(()=>{"use strict";var e={6270:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,s)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.AtUri=t.ATP_URI_REGEX=void 0,s(r(6294),t),t.ATP_URI_REGEX=/^(at:\/\/)?((?:did:[a-z0-9:%-]+)|(?:[a-z0-9][a-z0-9.:-]*))(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;const i=/^(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;class o{constructor(e,t){let r;if(Object.defineProperty(this,"hash",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"host",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"pathname",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"searchParams",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),t){if(r=a(t),!r)throw new Error(`Invalid at uri: ${t}`);const n=function(e){const t=i.exec(e);if(t)return{hash:t[3]||"",pathname:t[1]||"",searchParams:new URLSearchParams(t[2]||"")}}(e);if(!n)throw new Error(`Invalid path: ${e}`);Object.assign(r,n)}else if(r=a(e),!r)throw new Error(`Invalid at uri: ${e}`);this.hash=r.hash,this.host=r.host,this.pathname=r.pathname,this.searchParams=r.searchParams}static make(e,t,r){let n=e;return t&&(n+="/"+t),r&&(n+="/"+r),new o(n)}get protocol(){return"at:"}get origin(){return`at://${this.host}`}get hostname(){return this.host}set hostname(e){this.host=e}get search(){return this.searchParams.toString()}set search(e){this.searchParams=new URLSearchParams(e)}get collection(){return this.pathname.split("/").filter(Boolean)[0]||""}set collection(e){const t=this.pathname.split("/").filter(Boolean);t[0]=e,this.pathname=t.join("/")}get rkey(){return this.pathname.split("/").filter(Boolean)[1]||""}set rkey(e){const t=this.pathname.split("/").filter(Boolean);t[0]||(t[0]="undefined"),t[1]=e,this.pathname=t.join("/")}get href(){return this.toString()}toString(){let e=this.pathname||"/";e.startsWith("/")||(e=`/${e}`);let t=this.searchParams.toString();t&&!t.startsWith("?")&&(t=`?${t}`);let r=this.hash;return r&&!r.startsWith("#")&&(r=`#${r}`),`at://${this.host}${e}${t}${r}`}}function a(e){const r=t.ATP_URI_REGEX.exec(e);if(r)return{hash:r[5]||"",host:r[2]||"",pathname:r[3]||"",searchParams:new URLSearchParams(r[4]||"")}}t.AtUri=o},6294:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ensureValidAtUriRegex=t.ensureValidAtUri=void 0;const n=r(1145),s=r(5530),i=r(2281);t.ensureValidAtUri=e=>{const t=e.split("#");if(t.length>2)throw new Error('ATURI can have at most one "#", separating fragment out');const r=t[1]||null;if(e=t[0],!/^[a-zA-Z0-9._~:@!$&')(*+,;=%/-]*$/.test(e))throw new Error("Disallowed characters in ATURI (ASCII)");const o=e.split("/");if(o.length>=3&&("at:"!==o[0]||0!==o[1].length))throw new Error('ATURI must start with "at://"');if(o.length<3)throw new Error("ATURI requires at least method and authority sections");try{o[2].startsWith("did:")?(0,s.ensureValidDid)(o[2]):(0,n.ensureValidHandle)(o[2])}catch{throw new Error("ATURI authority must be a valid handle or DID")}if(o.length>=4){if(0===o[3].length)throw new Error("ATURI can not have a slash after authority without a path segment");try{(0,i.ensureValidNsid)(o[3])}catch{throw new Error("ATURI requires first path segment (if supplied) to be valid NSID")}}if(o.length>=5&&0===o[4].length)throw new Error("ATURI can not have a slash after collection, unless record key is provided");if(o.length>=6)throw new Error("ATURI path can have at most two parts, and no trailing slash");if(t.length>=2&&null==r)throw new Error("ATURI fragment must be non-empty and start with slash");if(null!=r){if(0===r.length||"/"!==r[0])throw new Error("ATURI fragment must be non-empty and start with slash");if(!/^\/[a-zA-Z0-9._~:@!$&')(*+,;=%[\]/-]*$/.test(r))throw new Error("Disallowed characters in ATURI fragment (ASCII)")}if(e.length>8192)throw new Error("ATURI is far too long")},t.ensureValidAtUriRegex=e=>{const t=e.match(/^at:\/\/(?<authority>[a-zA-Z0-9._:%-]+)(\/(?<collection>[a-zA-Z0-9-.]+)(\/(?<rkey>[a-zA-Z0-9._~:@!$&%')(*+,;=-]+))?)?(#(?<fragment>\/[a-zA-Z0-9._~:@!$&%')(*+,;=\-[\]/\\]*))?$/);if(!t||!t.groups)throw new Error("ATURI didn't validate via regex");const r=t.groups;try{(0,n.ensureValidHandleRegex)(r.authority)}catch{try{(0,s.ensureValidDidRegex)(r.authority)}catch{throw new Error("ATURI authority must be a valid handle or DID")}}if(r.collection)try{(0,i.ensureValidNsidRegex)(r.collection)}catch{throw new Error("ATURI collection path segment must be a valid NSID")}if(e.length>8192)throw new Error("ATURI is far too long")}},9166:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InvalidDatetimeError=t.normalizeDatetimeAlways=t.normalizeDatetime=t.isValidDatetime=t.ensureValidDatetime=void 0,t.ensureValidDatetime=e=>{const t=new Date(e);if(isNaN(t.getTime()))throw new r("datetime did not parse as ISO 8601");if(t.toISOString().startsWith("-"))throw new r("datetime normalized to a negative time");if(!/^[0-9]{4}-[01][0-9]-[0-3][0-9]T[0-2][0-9]:[0-6][0-9]:[0-6][0-9](.[0-9]{1,20})?(Z|([+-][0-2][0-9]:[0-5][0-9]))$/.test(e))throw new r("datetime didn't validate via regex");if(e.length>64)throw new r("datetime is too long (64 chars max)");if(e.endsWith("-00:00"))throw new r('datetime can not use "-00:00" for UTC timezone');if(e.startsWith("000"))throw new r("datetime so close to year zero not allowed")},t.isValidDatetime=e=>{try{(0,t.ensureValidDatetime)(e)}catch(e){if(e instanceof r)return!1;throw e}return!0},t.normalizeDatetime=e=>{if((0,t.isValidDatetime)(e)){const r=new Date(e).toISOString();if((0,t.isValidDatetime)(r))return r}if(!/.*(([+-]\d\d:?\d\d)|[a-zA-Z])$/.test(e)){const r=new Date(e+"Z");if(!isNaN(r.getTime())){const e=r.toISOString();if((0,t.isValidDatetime)(e))return e}}const n=new Date(e);if(isNaN(n.getTime()))throw new r("datetime did not parse as any timestamp format");const s=n.toISOString();if((0,t.isValidDatetime)(s))return s;throw new r("datetime normalized to invalid timestamp string")},t.normalizeDatetimeAlways=e=>{try{return(0,t.normalizeDatetime)(e)}catch(e){if(e instanceof r)return new Date(0).toISOString();throw e}};class r extends Error{}t.InvalidDatetimeError=r},5530:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InvalidDidError=t.ensureValidDidRegex=t.ensureValidDid=void 0,t.ensureValidDid=e=>{if(!e.startsWith("did:"))throw new r('DID requires "did:" prefix');if(!/^[a-zA-Z0-9._:%-]*$/.test(e))throw new r("Disallowed characters in DID (ASCII letters, digits, and a couple other characters only)");const{length:t,1:n}=e.split(":");if(t<3)throw new r("DID requires prefix, method, and method-specific content");if(!/^[a-z]+$/.test(n))throw new r("DID method must be lower-case letters");if(e.endsWith(":")||e.endsWith("%"))throw new r('DID can not end with ":" or "%"');if(e.length>2048)throw new r("DID is too long (2048 chars max)")},t.ensureValidDidRegex=e=>{if(!/^did:[a-z]+:[a-zA-Z0-9._:%-]*[a-zA-Z0-9._-]$/.test(e))throw new r("DID didn't validate via regex");if(e.length>2048)throw new r("DID is too long (2048 chars max)")};class r extends Error{}t.InvalidDidError=r},1145:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DisallowedDomainError=t.UnsupportedDomainError=t.ReservedHandleError=t.InvalidHandleError=t.isValidTld=t.isValidHandle=t.normalizeAndEnsureValidHandle=t.normalizeHandle=t.ensureValidHandleRegex=t.ensureValidHandle=t.DISALLOWED_TLDS=t.INVALID_HANDLE=void 0,t.INVALID_HANDLE="handle.invalid",t.DISALLOWED_TLDS=[".local",".arpa",".invalid",".localhost",".internal",".example",".alt",".onion"],t.ensureValidHandle=e=>{if(!/^[a-zA-Z0-9.-]*$/.test(e))throw new r("Disallowed characters in handle (ASCII letters, digits, dashes, periods only)");if(e.length>253)throw new r("Handle is too long (253 chars max)");const t=e.split(".");if(t.length<2)throw new r("Handle domain needs at least two parts");for(let e=0;e<t.length;e++){const n=t[e];if(n.length<1)throw new r("Handle parts can not be empty");if(n.length>63)throw new r("Handle part too long (max 63 chars)");if(n.endsWith("-")||n.startsWith("-"))throw new r("Handle parts can not start or end with hyphens");if(e+1===t.length&&!/^[a-zA-Z]/.test(n))throw new r("Handle final component (TLD) must start with ASCII letter")}},t.ensureValidHandleRegex=e=>{if(!/^([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$/.test(e))throw new r("Handle didn't validate via regex");if(e.length>253)throw new r("Handle is too long (253 chars max)")},t.normalizeHandle=e=>e.toLowerCase(),t.normalizeAndEnsureValidHandle=e=>{const r=(0,t.normalizeHandle)(e);return(0,t.ensureValidHandle)(r),r},t.isValidHandle=e=>{try{(0,t.ensureValidHandle)(e)}catch(e){if(e instanceof r)return!1;throw e}return!0},t.isValidTld=e=>!t.DISALLOWED_TLDS.some((t=>e.endsWith(t)));class r extends Error{}t.InvalidHandleError=r;class n extends Error{}t.ReservedHandleError=n;class s extends Error{}t.UnsupportedDomainError=s;class i extends Error{}t.DisallowedDomainError=i},1163:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,s)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),s(r(1145),t),s(r(5530),t),s(r(2281),t),s(r(6270),t),s(r(1722),t),s(r(8643),t),s(r(9166),t)},2281:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InvalidNsidError=t.ensureValidNsidRegex=t.ensureValidNsid=t.NSID=void 0;class r{static parse(e){return new r(e)}static create(e,t){const n=[...e.split(".").reverse(),t].join(".");return new r(n)}static isValid(e){try{return r.parse(e),!0}catch(e){return!1}}constructor(e){Object.defineProperty(this,"segments",{enumerable:!0,configurable:!0,writable:!0,value:[]}),(0,t.ensureValidNsid)(e),this.segments=e.split(".")}get authority(){return this.segments.slice(0,this.segments.length-1).reverse().join(".")}get name(){return this.segments.at(this.segments.length-1)}toString(){return this.segments.join(".")}}t.NSID=r,t.ensureValidNsid=e=>{const t=e;if(!/^[a-zA-Z0-9.-]*$/.test(t))throw new n("Disallowed characters in NSID (ASCII letters, digits, dashes, periods only)");if(t.length>317)throw new n("NSID is too long (317 chars max)");const r=t.split(".");if(r.length<3)throw new n("NSID needs at least three parts");for(let e=0;e<r.length;e++){const t=r[e];if(t.length<1)throw new n("NSID parts can not be empty");if(t.length>63)throw new n("NSID part too long (max 63 chars)");if(t.endsWith("-")||t.startsWith("-"))throw new n("NSID parts can not start or end with hyphen");if(/^[0-9]/.test(t)&&0===e)throw new n("NSID first part may not start with a digit");if(!/^[a-zA-Z]+$/.test(t)&&e+1===r.length)throw new n("NSID name part must be only letters")}},t.ensureValidNsidRegex=e=>{if(!/^[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(\.[a-zA-Z]([a-zA-Z]{0,61}[a-zA-Z])?)$/.test(e))throw new n("NSID didn't validate via regex");if(e.length>317)throw new n("NSID is too long (317 chars max)")};class n extends Error{}t.InvalidNsidError=n},8643:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InvalidRecordKeyError=t.isValidRecordKey=t.ensureValidRecordKey=void 0,t.ensureValidRecordKey=e=>{if(e.length>512||e.length<1)throw new r("record key must be 1 to 512 characters");if(!/^[a-zA-Z0-9_~.:-]{1,512}$/.test(e))throw new r("record key syntax not valid (regex)");if("."===e||".."===e)throw new r('record key can not be "." or ".."')},t.isValidRecordKey=e=>{try{(0,t.ensureValidRecordKey)(e)}catch(e){if(e instanceof r)return!1;throw e}return!0};class r extends Error{}t.InvalidRecordKeyError=r},1722:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InvalidTidError=t.isValidTid=t.ensureValidTid=void 0,t.ensureValidTid=e=>{if(13!==e.length)throw new r("TID must be 13 characters");if(!/^[234567abcdefghij][234567abcdefghijklmnopqrstuvwxyz]{12}$/.test(e))throw new r("TID syntax not valid (regex)")},t.isValidTid=e=>{try{(0,t.ensureValidTid)(e)}catch(e){if(e instanceof r)return!1;throw e}return!0};class r extends Error{}t.InvalidTidError=r},8275:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,s)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return s(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});const o=r(749),a=i(r(6748)),c=document.getElementById("blueskySignInButton"),d=document.getElementById("blueskyLogoutButton"),l=document.getElementById("blueskyNextButton");let u=null;const h=new o.BrowserOAuthClient({clientMetadata:{client_id:"https://seattle.carinbikelane.com/client-metadata.json",client_name:"Seattle Cars in Bike Lanes",client_uri:"https://seattle.carinbikelane.com",redirect_uris:["https://seattle.carinbikelane.com/"],scope:"atproto transition:generic",grant_types:["authorization_code","refresh_token"],response_types:["code"],token_endpoint_auth_method:"none",application_type:"web",dpop_bound_access_tokens:!0},handleResolver:"https://bsky.social"});function p(){const e=document.getElementById("blueskyHandleInput").value;a.changeButtonToLoadingButton(l,"Login"),function(e){try{h.signIn(e).catch((e=>{console.error(e),a.changeLoadingButtonToRegularButton(l,"Login")}))}catch(e){console.error(e),a.changeLoadingButtonToRegularButton(l,"Login")}}(e),a.changeLoadingButtonToRegularButton(l,"Login")}function f(){h.revoke(u).then((()=>{delete window.blueskyHandle,delete window.blueskyUserDid,u=null,c.removeAttribute("disabled"),c.innerText="Sign in with Bluesky",d.className="dropdown-item disabled"}))}h.addEventListener("deleted",(e=>{const{sub:t,cause:r}=e.detail;f()})),h.init().then((e=>{e?(e.state,function(e){const t=indexedDB.open("@atproto-oauth-client");let r={};return new Promise(((e,r)=>{t.onsuccess=function(){e(t.result)},t.onerror=function(){r(t.error)}})).then((t=>{const r=t.transaction("session").objectStore("session").get(e);return new Promise(((e,t)=>{r.onsuccess=function(){e(r.result)},r.onerror=function(){t(r.error)}}))})).then((e=>{r.keyId=e.value.dpopKey.keyId,r.accessToken=e.value.tokenSet.access_token;const t=e.value.dpopKey.keyPair.privateKey;return crypto.subtle.exportKey("pkcs8",t)})).then((e=>{const t=String.fromCharCode.apply(null,new Uint8Array(e)),n=btoa(t);return r.privateKey=`-----BEGIN PRIVATE KEY-----\n${n}\n-----END PRIVATE KEY-----`,r}))}(e.session.did).then((t=>{return window.blueskyAuthInfo=t,r=e.session.did,fetch(`https://plc.directory/${r}`).then((e=>e.json())).then((e=>e));var r})).then((t=>{const r=(n=t).alsoKnownAs.length>0?1===n.alsoKnownAs.length?n.alsoKnownAs[0].substring(5):n.alsoKnownAs.find((e=>e.startsWith("at://"))).substring(5):n.id;var n;r.startsWith("did:plc:")?delete window.blueskyAuthInfo:(window.blueskyHandle=r,window.blueskyUserDid=e.session.did,window.blueskyPds=function(e){if(e.service.length>0)return e.service[0].serviceEndpoint;throw new Error("No PDS found in DID document")}(t),u=e.session.sub,c.setAttribute("disabled",""),c.innerText="Logged in with Bluesky",d.className="dropdown-item")}))):d.className="dropdown-item disabled"})),l.addEventListener("click",(()=>{p()})),l.addEventListener("keydown",(function(e){"Enter"===e.key&&p()})),d.addEventListener("click",(()=>{f()}))},6748:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.changeButtonToLoadingButton=function(e,t){e.innerHTML="",e.setAttribute("disabled","");const r=document.createElement("span");r.className="spinner-border spinner-border-sm",r.setAttribute("role","status"),r.setAttribute("aria-hidden","true"),e.append(r),e.append(` ${t}`)},t.changeLoadingButtonToRegularButton=function(e,t){e.innerHTML="",e.append(t),e.removeAttribute("disabled")}},6837:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ZodError=t.quotelessJson=t.ZodIssueCode=void 0;const n=r(2146);t.ZodIssueCode=n.util.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]),t.quotelessJson=e=>JSON.stringify(e,null,2).replace(/"([^"]+)":/g,"$1:");class s extends Error{constructor(e){super(),this.issues=[],this.addIssue=e=>{this.issues=[...this.issues,e]},this.addIssues=(e=[])=>{this.issues=[...this.issues,...e]};const t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,this.name="ZodError",this.issues=e}get errors(){return this.issues}format(e){const t=e||function(e){return e.message},r={_errors:[]},n=e=>{for(const s of e.issues)if("invalid_union"===s.code)s.unionErrors.map(n);else if("invalid_return_type"===s.code)n(s.returnTypeError);else if("invalid_arguments"===s.code)n(s.argumentsError);else if(0===s.path.length)r._errors.push(t(s));else{let e=r,n=0;for(;n<s.path.length;){const r=s.path[n];n===s.path.length-1?(e[r]=e[r]||{_errors:[]},e[r]._errors.push(t(s))):e[r]=e[r]||{_errors:[]},e=e[r],n++}}};return n(this),r}static assert(e){if(!(e instanceof s))throw new Error(`Not a ZodError: ${e}`)}toString(){return this.message}get message(){return JSON.stringify(this.issues,n.util.jsonStringifyReplacer,2)}get isEmpty(){return 0===this.issues.length}flatten(e=e=>e.message){const t={},r=[];for(const n of this.issues)n.path.length>0?(t[n.path[0]]=t[n.path[0]]||[],t[n.path[0]].push(e(n))):r.push(e(n));return{formErrors:r,fieldErrors:t}}get formErrors(){return this.flatten()}}t.ZodError=s,s.create=e=>new s(e)},627:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getErrorMap=t.setErrorMap=t.defaultErrorMap=void 0;const s=n(r(8227));t.defaultErrorMap=s.default;let i=s.default;t.setErrorMap=function(e){i=e},t.getErrorMap=function(){return i}},6555:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),s(r(627),t),s(r(7231),t),s(r(1892),t),s(r(2146),t),s(r(2739),t),s(r(6837),t)},9750:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.errorUtil=void 0,(r=t.errorUtil||(t.errorUtil={})).errToObj=e=>"string"==typeof e?{message:e}:e||{},r.toString=e=>"string"==typeof e?e:null==e?void 0:e.message},7231:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.isAsync=t.isValid=t.isDirty=t.isAborted=t.OK=t.DIRTY=t.INVALID=t.ParseStatus=t.addIssueToContext=t.EMPTY_PATH=t.makeIssue=void 0;const s=r(627),i=n(r(8227));t.makeIssue=e=>{const{data:t,path:r,errorMaps:n,issueData:s}=e,i=[...r,...s.path||[]],o={...s,path:i};if(void 0!==s.message)return{...s,path:i,message:s.message};let a="";const c=n.filter((e=>!!e)).slice().reverse();for(const e of c)a=e(o,{data:t,defaultError:a}).message;return{...s,path:i,message:a}},t.EMPTY_PATH=[],t.addIssueToContext=function(e,r){const n=(0,s.getErrorMap)(),o=(0,t.makeIssue)({issueData:r,data:e.data,path:e.path,errorMaps:[e.common.contextualErrorMap,e.schemaErrorMap,n,n===i.default?void 0:i.default].filter((e=>!!e))});e.common.issues.push(o)};class o{constructor(){this.value="valid"}dirty(){"valid"===this.value&&(this.value="dirty")}abort(){"aborted"!==this.value&&(this.value="aborted")}static mergeArray(e,r){const n=[];for(const s of r){if("aborted"===s.status)return t.INVALID;"dirty"===s.status&&e.dirty(),n.push(s.value)}return{status:e.value,value:n}}static async mergeObjectAsync(e,t){const r=[];for(const e of t){const t=await e.key,n=await e.value;r.push({key:t,value:n})}return o.mergeObjectSync(e,r)}static mergeObjectSync(e,r){const n={};for(const s of r){const{key:r,value:i}=s;if("aborted"===r.status)return t.INVALID;if("aborted"===i.status)return t.INVALID;"dirty"===r.status&&e.dirty(),"dirty"===i.status&&e.dirty(),"__proto__"===r.value||void 0===i.value&&!s.alwaysSet||(n[r.value]=i.value)}return{status:e.value,value:n}}}t.ParseStatus=o,t.INVALID=Object.freeze({status:"aborted"}),t.DIRTY=e=>({status:"dirty",value:e}),t.OK=e=>({status:"valid",value:e}),t.isAborted=e=>"aborted"===e.status,t.isDirty=e=>"dirty"===e.status,t.isValid=e=>"valid"===e.status,t.isAsync=e=>"undefined"!=typeof Promise&&e instanceof Promise},1892:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},2146:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.getParsedType=t.ZodParsedType=t.objectUtil=t.util=void 0,function(e){e.assertEqual=e=>e,e.assertIs=function(e){},e.assertNever=function(e){throw new Error},e.arrayToEnum=e=>{const t={};for(const r of e)t[r]=r;return t},e.getValidEnumValues=t=>{const r=e.objectKeys(t).filter((e=>"number"!=typeof t[t[e]])),n={};for(const e of r)n[e]=t[e];return e.objectValues(n)},e.objectValues=t=>e.objectKeys(t).map((function(e){return t[e]})),e.objectKeys="function"==typeof Object.keys?e=>Object.keys(e):e=>{const t=[];for(const r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.push(r);return t},e.find=(e,t)=>{for(const r of e)if(t(r))return r},e.isInteger="function"==typeof Number.isInteger?e=>Number.isInteger(e):e=>"number"==typeof e&&isFinite(e)&&Math.floor(e)===e,e.joinValues=function(e,t=" | "){return e.map((e=>"string"==typeof e?`'${e}'`:e)).join(t)},e.jsonStringifyReplacer=(e,t)=>"bigint"==typeof t?t.toString():t}(r=t.util||(t.util={})),(t.objectUtil||(t.objectUtil={})).mergeShapes=(e,t)=>({...e,...t}),t.ZodParsedType=r.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),t.getParsedType=e=>{switch(typeof e){case"undefined":return t.ZodParsedType.undefined;case"string":return t.ZodParsedType.string;case"number":return isNaN(e)?t.ZodParsedType.nan:t.ZodParsedType.number;case"boolean":return t.ZodParsedType.boolean;case"function":return t.ZodParsedType.function;case"bigint":return t.ZodParsedType.bigint;case"symbol":return t.ZodParsedType.symbol;case"object":return Array.isArray(e)?t.ZodParsedType.array:null===e?t.ZodParsedType.null:e.then&&"function"==typeof e.then&&e.catch&&"function"==typeof e.catch?t.ZodParsedType.promise:"undefined"!=typeof Map&&e instanceof Map?t.ZodParsedType.map:"undefined"!=typeof Set&&e instanceof Set?t.ZodParsedType.set:"undefined"!=typeof Date&&e instanceof Date?t.ZodParsedType.date:t.ZodParsedType.object;default:return t.ZodParsedType.unknown}}},1614:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return s(t,e),t},o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.z=void 0;const a=i(r(6555));t.z=a,o(r(6555),t),t.default=a},8227:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=r(2146),s=r(6837);t.default=(e,t)=>{let r;switch(e.code){case s.ZodIssueCode.invalid_type:r=e.received===n.ZodParsedType.undefined?"Required":`Expected ${e.expected}, received ${e.received}`;break;case s.ZodIssueCode.invalid_literal:r=`Invalid literal value, expected ${JSON.stringify(e.expected,n.util.jsonStringifyReplacer)}`;break;case s.ZodIssueCode.unrecognized_keys:r=`Unrecognized key(s) in object: ${n.util.joinValues(e.keys,", ")}`;break;case s.ZodIssueCode.invalid_union:r="Invalid input";break;case s.ZodIssueCode.invalid_union_discriminator:r=`Invalid discriminator value. Expected ${n.util.joinValues(e.options)}`;break;case s.ZodIssueCode.invalid_enum_value:r=`Invalid enum value. Expected ${n.util.joinValues(e.options)}, received '${e.received}'`;break;case s.ZodIssueCode.invalid_arguments:r="Invalid function arguments";break;case s.ZodIssueCode.invalid_return_type:r="Invalid function return type";break;case s.ZodIssueCode.invalid_date:r="Invalid date";break;case s.ZodIssueCode.invalid_string:"object"==typeof e.validation?"includes"in e.validation?(r=`Invalid input: must include "${e.validation.includes}"`,"number"==typeof e.validation.position&&(r=`${r} at one or more positions greater than or equal to ${e.validation.position}`)):"startsWith"in e.validation?r=`Invalid input: must start with "${e.validation.startsWith}"`:"endsWith"in e.validation?r=`Invalid input: must end with "${e.validation.endsWith}"`:n.util.assertNever(e.validation):r="regex"!==e.validation?`Invalid ${e.validation}`:"Invalid";break;case s.ZodIssueCode.too_small:r="array"===e.type?`Array must contain ${e.exact?"exactly":e.inclusive?"at least":"more than"} ${e.minimum} element(s)`:"string"===e.type?`String must contain ${e.exact?"exactly":e.inclusive?"at least":"over"} ${e.minimum} character(s)`:"number"===e.type?`Number must be ${e.exact?"exactly equal to ":e.inclusive?"greater than or equal to ":"greater than "}${e.minimum}`:"date"===e.type?`Date must be ${e.exact?"exactly equal to ":e.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(e.minimum))}`:"Invalid input";break;case s.ZodIssueCode.too_big:r="array"===e.type?`Array must contain ${e.exact?"exactly":e.inclusive?"at most":"less than"} ${e.maximum} element(s)`:"string"===e.type?`String must contain ${e.exact?"exactly":e.inclusive?"at most":"under"} ${e.maximum} character(s)`:"number"===e.type?`Number must be ${e.exact?"exactly":e.inclusive?"less than or equal to":"less than"} ${e.maximum}`:"bigint"===e.type?`BigInt must be ${e.exact?"exactly":e.inclusive?"less than or equal to":"less than"} ${e.maximum}`:"date"===e.type?`Date must be ${e.exact?"exactly":e.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(e.maximum))}`:"Invalid input";break;case s.ZodIssueCode.custom:r="Invalid input";break;case s.ZodIssueCode.invalid_intersection_types:r="Intersection results could not be merged";break;case s.ZodIssueCode.not_multiple_of:r=`Number must be a multiple of ${e.multipleOf}`;break;case s.ZodIssueCode.not_finite:r="Number must be finite";break;default:r=t.defaultError,n.util.assertNever(e)}return{message:r}}},2739:function(e,t,r){var n,s,i=this&&this.__classPrivateFieldGet||function(e,t,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(e):n?n.value:t.get(e)},o=this&&this.__classPrivateFieldSet||function(e,t,r,n,s){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?s.call(e,r):s?s.value=r:t.set(e,r),r};Object.defineProperty(t,"__esModule",{value:!0}),t.boolean=t.bigint=t.array=t.any=t.coerce=t.ZodFirstPartyTypeKind=t.late=t.ZodSchema=t.Schema=t.custom=t.ZodReadonly=t.ZodPipeline=t.ZodBranded=t.BRAND=t.ZodNaN=t.ZodCatch=t.ZodDefault=t.ZodNullable=t.ZodOptional=t.ZodTransformer=t.ZodEffects=t.ZodPromise=t.ZodNativeEnum=t.ZodEnum=t.ZodLiteral=t.ZodLazy=t.ZodFunction=t.ZodSet=t.ZodMap=t.ZodRecord=t.ZodTuple=t.ZodIntersection=t.ZodDiscriminatedUnion=t.ZodUnion=t.ZodObject=t.ZodArray=t.ZodVoid=t.ZodNever=t.ZodUnknown=t.ZodAny=t.ZodNull=t.ZodUndefined=t.ZodSymbol=t.ZodDate=t.ZodBoolean=t.ZodBigInt=t.ZodNumber=t.ZodString=t.datetimeRegex=t.ZodType=void 0,t.NEVER=t.void=t.unknown=t.union=t.undefined=t.tuple=t.transformer=t.symbol=t.string=t.strictObject=t.set=t.record=t.promise=t.preprocess=t.pipeline=t.ostring=t.optional=t.onumber=t.oboolean=t.object=t.number=t.nullable=t.null=t.never=t.nativeEnum=t.nan=t.map=t.literal=t.lazy=t.intersection=t.instanceof=t.function=t.enum=t.effect=t.discriminatedUnion=t.date=void 0;const a=r(627),c=r(9750),d=r(7231),l=r(2146),u=r(6837);class h{constructor(e,t,r,n){this._cachedPath=[],this.parent=e,this.data=t,this._path=r,this._key=n}get path(){return this._cachedPath.length||(this._key instanceof Array?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}}const p=(e,t)=>{if((0,d.isValid)(t))return{success:!0,data:t.value};if(!e.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;const t=new u.ZodError(e.common.issues);return this._error=t,this._error}}};function f(e){if(!e)return{};const{errorMap:t,invalid_type_error:r,required_error:n,description:s}=e;if(t&&(r||n))throw new Error('Can\'t use "invalid_type_error" or "required_error" in conjunction with custom error map.');return t?{errorMap:t,description:s}:{errorMap:(t,s)=>{var i,o;const{message:a}=e;return"invalid_enum_value"===t.code?{message:null!=a?a:s.defaultError}:void 0===s.data?{message:null!==(i=null!=a?a:n)&&void 0!==i?i:s.defaultError}:"invalid_type"!==t.code?{message:s.defaultError}:{message:null!==(o=null!=a?a:r)&&void 0!==o?o:s.defaultError}},description:s}}class y{constructor(e){this.spa=this.safeParseAsync,this._def=e,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this)}get description(){return this._def.description}_getType(e){return(0,l.getParsedType)(e.data)}_getOrReturnCtx(e,t){return t||{common:e.parent.common,data:e.data,parsedType:(0,l.getParsedType)(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}_processInputParams(e){return{status:new d.ParseStatus,ctx:{common:e.parent.common,data:e.data,parsedType:(0,l.getParsedType)(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}}_parseSync(e){const t=this._parse(e);if((0,d.isAsync)(t))throw new Error("Synchronous parse encountered promise.");return t}_parseAsync(e){const t=this._parse(e);return Promise.resolve(t)}parse(e,t){const r=this.safeParse(e,t);if(r.success)return r.data;throw r.error}safeParse(e,t){var r;const n={common:{issues:[],async:null!==(r=null==t?void 0:t.async)&&void 0!==r&&r,contextualErrorMap:null==t?void 0:t.errorMap},path:(null==t?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:(0,l.getParsedType)(e)},s=this._parseSync({data:e,path:n.path,parent:n});return p(n,s)}async parseAsync(e,t){const r=await this.safeParseAsync(e,t);if(r.success)return r.data;throw r.error}async safeParseAsync(e,t){const r={common:{issues:[],contextualErrorMap:null==t?void 0:t.errorMap,async:!0},path:(null==t?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:(0,l.getParsedType)(e)},n=this._parse({data:e,path:r.path,parent:r}),s=await((0,d.isAsync)(n)?n:Promise.resolve(n));return p(r,s)}refine(e,t){const r=e=>"string"==typeof t||void 0===t?{message:t}:"function"==typeof t?t(e):t;return this._refinement(((t,n)=>{const s=e(t),i=()=>n.addIssue({code:u.ZodIssueCode.custom,...r(t)});return"undefined"!=typeof Promise&&s instanceof Promise?s.then((e=>!!e||(i(),!1))):!!s||(i(),!1)}))}refinement(e,t){return this._refinement(((r,n)=>!!e(r)||(n.addIssue("function"==typeof t?t(r,n):t),!1)))}_refinement(e){return new de({schema:this,typeName:ve.ZodEffects,effect:{type:"refinement",refinement:e}})}superRefine(e){return this._refinement(e)}optional(){return le.create(this,this._def)}nullable(){return ue.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return J.create(this,this._def)}promise(){return ce.create(this,this._def)}or(e){return B.create([this,e],this._def)}and(e){return X.create(this,e,this._def)}transform(e){return new de({...f(this._def),schema:this,typeName:ve.ZodEffects,effect:{type:"transform",transform:e}})}default(e){const t="function"==typeof e?e:()=>e;return new he({...f(this._def),innerType:this,defaultValue:t,typeName:ve.ZodDefault})}brand(){return new ye({typeName:ve.ZodBranded,type:this,...f(this._def)})}catch(e){const t="function"==typeof e?e:()=>e;return new pe({...f(this._def),innerType:this,catchValue:t,typeName:ve.ZodCatch})}describe(e){return new(0,this.constructor)({...this._def,description:e})}pipe(e){return me.create(this,e)}readonly(){return we.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}}t.ZodType=y,t.Schema=y,t.ZodSchema=y;const m=/^c[^\s-]{8,}$/i,w=/^[0-9a-z]+$/,g=/^[0-9A-HJKMNP-TV-Z]{26}$/,v=/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,b=/^[a-z0-9_-]{21}$/i,_=/^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,S=/^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;let E;const k=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,A=/^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,P=/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,T="((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))",I=new RegExp(`^${T}$`);function O(e){let t="([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d";return e.precision?t=`${t}\\.\\d{${e.precision}}`:null==e.precision&&(t=`${t}(\\.\\d+)?`),t}function C(e){let t=`${T}T${O(e)}`;const r=[];return r.push(e.local?"Z?":"Z"),e.offset&&r.push("([+-]\\d{2}:?\\d{2})"),t=`${t}(${r.join("|")})`,new RegExp(`^${t}$`)}t.datetimeRegex=C;class x extends y{_parse(e){if(this._def.coerce&&(e.data=String(e.data)),this._getType(e)!==l.ZodParsedType.string){const t=this._getOrReturnCtx(e);return(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.invalid_type,expected:l.ZodParsedType.string,received:t.parsedType}),d.INVALID}const t=new d.ParseStatus;let r;for(const i of this._def.checks)if("min"===i.kind)e.data.length<i.value&&(r=this._getOrReturnCtx(e,r),(0,d.addIssueToContext)(r,{code:u.ZodIssueCode.too_small,minimum:i.value,type:"string",inclusive:!0,exact:!1,message:i.message}),t.dirty());else if("max"===i.kind)e.data.length>i.value&&(r=this._getOrReturnCtx(e,r),(0,d.addIssueToContext)(r,{code:u.ZodIssueCode.too_big,maximum:i.value,type:"string",inclusive:!0,exact:!1,message:i.message}),t.dirty());else if("length"===i.kind){const n=e.data.length>i.value,s=e.data.length<i.value;(n||s)&&(r=this._getOrReturnCtx(e,r),n?(0,d.addIssueToContext)(r,{code:u.ZodIssueCode.too_big,maximum:i.value,type:"string",inclusive:!0,exact:!0,message:i.message}):s&&(0,d.addIssueToContext)(r,{code:u.ZodIssueCode.too_small,minimum:i.value,type:"string",inclusive:!0,exact:!0,message:i.message}),t.dirty())}else if("email"===i.kind)S.test(e.data)||(r=this._getOrReturnCtx(e,r),(0,d.addIssueToContext)(r,{validation:"email",code:u.ZodIssueCode.invalid_string,message:i.message}),t.dirty());else if("emoji"===i.kind)E||(E=new RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$","u")),E.test(e.data)||(r=this._getOrReturnCtx(e,r),(0,d.addIssueToContext)(r,{validation:"emoji",code:u.ZodIssueCode.invalid_string,message:i.message}),t.dirty());else if("uuid"===i.kind)v.test(e.data)||(r=this._getOrReturnCtx(e,r),(0,d.addIssueToContext)(r,{validation:"uuid",code:u.ZodIssueCode.invalid_string,message:i.message}),t.dirty());else if("nanoid"===i.kind)b.test(e.data)||(r=this._getOrReturnCtx(e,r),(0,d.addIssueToContext)(r,{validation:"nanoid",code:u.ZodIssueCode.invalid_string,message:i.message}),t.dirty());else if("cuid"===i.kind)m.test(e.data)||(r=this._getOrReturnCtx(e,r),(0,d.addIssueToContext)(r,{validation:"cuid",code:u.ZodIssueCode.invalid_string,message:i.message}),t.dirty());else if("cuid2"===i.kind)w.test(e.data)||(r=this._getOrReturnCtx(e,r),(0,d.addIssueToContext)(r,{validation:"cuid2",code:u.ZodIssueCode.invalid_string,message:i.message}),t.dirty());else if("ulid"===i.kind)g.test(e.data)||(r=this._getOrReturnCtx(e,r),(0,d.addIssueToContext)(r,{validation:"ulid",code:u.ZodIssueCode.invalid_string,message:i.message}),t.dirty());else if("url"===i.kind)try{new URL(e.data)}catch(n){r=this._getOrReturnCtx(e,r),(0,d.addIssueToContext)(r,{validation:"url",code:u.ZodIssueCode.invalid_string,message:i.message}),t.dirty()}else"regex"===i.kind?(i.regex.lastIndex=0,i.regex.test(e.data)||(r=this._getOrReturnCtx(e,r),(0,d.addIssueToContext)(r,{validation:"regex",code:u.ZodIssueCode.invalid_string,message:i.message}),t.dirty())):"trim"===i.kind?e.data=e.data.trim():"includes"===i.kind?e.data.includes(i.value,i.position)||(r=this._getOrReturnCtx(e,r),(0,d.addIssueToContext)(r,{code:u.ZodIssueCode.invalid_string,validation:{includes:i.value,position:i.position},message:i.message}),t.dirty()):"toLowerCase"===i.kind?e.data=e.data.toLowerCase():"toUpperCase"===i.kind?e.data=e.data.toUpperCase():"startsWith"===i.kind?e.data.startsWith(i.value)||(r=this._getOrReturnCtx(e,r),(0,d.addIssueToContext)(r,{code:u.ZodIssueCode.invalid_string,validation:{startsWith:i.value},message:i.message}),t.dirty()):"endsWith"===i.kind?e.data.endsWith(i.value)||(r=this._getOrReturnCtx(e,r),(0,d.addIssueToContext)(r,{code:u.ZodIssueCode.invalid_string,validation:{endsWith:i.value},message:i.message}),t.dirty()):"datetime"===i.kind?C(i).test(e.data)||(r=this._getOrReturnCtx(e,r),(0,d.addIssueToContext)(r,{code:u.ZodIssueCode.invalid_string,validation:"datetime",message:i.message}),t.dirty()):"date"===i.kind?I.test(e.data)||(r=this._getOrReturnCtx(e,r),(0,d.addIssueToContext)(r,{code:u.ZodIssueCode.invalid_string,validation:"date",message:i.message}),t.dirty()):"time"===i.kind?new RegExp(`^${O(i)}$`).test(e.data)||(r=this._getOrReturnCtx(e,r),(0,d.addIssueToContext)(r,{code:u.ZodIssueCode.invalid_string,validation:"time",message:i.message}),t.dirty()):"duration"===i.kind?_.test(e.data)||(r=this._getOrReturnCtx(e,r),(0,d.addIssueToContext)(r,{validation:"duration",code:u.ZodIssueCode.invalid_string,message:i.message}),t.dirty()):"ip"===i.kind?(n=e.data,("v4"!==(s=i.version)&&s||!k.test(n))&&("v6"!==s&&s||!A.test(n))&&(r=this._getOrReturnCtx(e,r),(0,d.addIssueToContext)(r,{validation:"ip",code:u.ZodIssueCode.invalid_string,message:i.message}),t.dirty())):"base64"===i.kind?P.test(e.data)||(r=this._getOrReturnCtx(e,r),(0,d.addIssueToContext)(r,{validation:"base64",code:u.ZodIssueCode.invalid_string,message:i.message}),t.dirty()):l.util.assertNever(i);var n,s;return{status:t.value,value:e.data}}_regex(e,t,r){return this.refinement((t=>e.test(t)),{validation:t,code:u.ZodIssueCode.invalid_string,...c.errorUtil.errToObj(r)})}_addCheck(e){return new x({...this._def,checks:[...this._def.checks,e]})}email(e){return this._addCheck({kind:"email",...c.errorUtil.errToObj(e)})}url(e){return this._addCheck({kind:"url",...c.errorUtil.errToObj(e)})}emoji(e){return this._addCheck({kind:"emoji",...c.errorUtil.errToObj(e)})}uuid(e){return this._addCheck({kind:"uuid",...c.errorUtil.errToObj(e)})}nanoid(e){return this._addCheck({kind:"nanoid",...c.errorUtil.errToObj(e)})}cuid(e){return this._addCheck({kind:"cuid",...c.errorUtil.errToObj(e)})}cuid2(e){return this._addCheck({kind:"cuid2",...c.errorUtil.errToObj(e)})}ulid(e){return this._addCheck({kind:"ulid",...c.errorUtil.errToObj(e)})}base64(e){return this._addCheck({kind:"base64",...c.errorUtil.errToObj(e)})}ip(e){return this._addCheck({kind:"ip",...c.errorUtil.errToObj(e)})}datetime(e){var t,r;return"string"==typeof e?this._addCheck({kind:"datetime",precision:null,offset:!1,local:!1,message:e}):this._addCheck({kind:"datetime",precision:void 0===(null==e?void 0:e.precision)?null:null==e?void 0:e.precision,offset:null!==(t=null==e?void 0:e.offset)&&void 0!==t&&t,local:null!==(r=null==e?void 0:e.local)&&void 0!==r&&r,...c.errorUtil.errToObj(null==e?void 0:e.message)})}date(e){return this._addCheck({kind:"date",message:e})}time(e){return"string"==typeof e?this._addCheck({kind:"time",precision:null,message:e}):this._addCheck({kind:"time",precision:void 0===(null==e?void 0:e.precision)?null:null==e?void 0:e.precision,...c.errorUtil.errToObj(null==e?void 0:e.message)})}duration(e){return this._addCheck({kind:"duration",...c.errorUtil.errToObj(e)})}regex(e,t){return this._addCheck({kind:"regex",regex:e,...c.errorUtil.errToObj(t)})}includes(e,t){return this._addCheck({kind:"includes",value:e,position:null==t?void 0:t.position,...c.errorUtil.errToObj(null==t?void 0:t.message)})}startsWith(e,t){return this._addCheck({kind:"startsWith",value:e,...c.errorUtil.errToObj(t)})}endsWith(e,t){return this._addCheck({kind:"endsWith",value:e,...c.errorUtil.errToObj(t)})}min(e,t){return this._addCheck({kind:"min",value:e,...c.errorUtil.errToObj(t)})}max(e,t){return this._addCheck({kind:"max",value:e,...c.errorUtil.errToObj(t)})}length(e,t){return this._addCheck({kind:"length",value:e,...c.errorUtil.errToObj(t)})}nonempty(e){return this.min(1,c.errorUtil.errToObj(e))}trim(){return new x({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new x({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new x({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find((e=>"datetime"===e.kind))}get isDate(){return!!this._def.checks.find((e=>"date"===e.kind))}get isTime(){return!!this._def.checks.find((e=>"time"===e.kind))}get isDuration(){return!!this._def.checks.find((e=>"duration"===e.kind))}get isEmail(){return!!this._def.checks.find((e=>"email"===e.kind))}get isURL(){return!!this._def.checks.find((e=>"url"===e.kind))}get isEmoji(){return!!this._def.checks.find((e=>"emoji"===e.kind))}get isUUID(){return!!this._def.checks.find((e=>"uuid"===e.kind))}get isNANOID(){return!!this._def.checks.find((e=>"nanoid"===e.kind))}get isCUID(){return!!this._def.checks.find((e=>"cuid"===e.kind))}get isCUID2(){return!!this._def.checks.find((e=>"cuid2"===e.kind))}get isULID(){return!!this._def.checks.find((e=>"ulid"===e.kind))}get isIP(){return!!this._def.checks.find((e=>"ip"===e.kind))}get isBase64(){return!!this._def.checks.find((e=>"base64"===e.kind))}get minLength(){let e=null;for(const t of this._def.checks)"min"===t.kind&&(null===e||t.value>e)&&(e=t.value);return e}get maxLength(){let e=null;for(const t of this._def.checks)"max"===t.kind&&(null===e||t.value<e)&&(e=t.value);return e}}function j(e,t){const r=(e.toString().split(".")[1]||"").length,n=(t.toString().split(".")[1]||"").length,s=r>n?r:n;return parseInt(e.toFixed(s).replace(".",""))%parseInt(t.toFixed(s).replace(".",""))/Math.pow(10,s)}t.ZodString=x,x.create=e=>{var t;return new x({checks:[],typeName:ve.ZodString,coerce:null!==(t=null==e?void 0:e.coerce)&&void 0!==t&&t,...f(e)})};class R extends y{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(e){if(this._def.coerce&&(e.data=Number(e.data)),this._getType(e)!==l.ZodParsedType.number){const t=this._getOrReturnCtx(e);return(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.invalid_type,expected:l.ZodParsedType.number,received:t.parsedType}),d.INVALID}let t;const r=new d.ParseStatus;for(const n of this._def.checks)"int"===n.kind?l.util.isInteger(e.data)||(t=this._getOrReturnCtx(e,t),(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.invalid_type,expected:"integer",received:"float",message:n.message}),r.dirty()):"min"===n.kind?(n.inclusive?e.data<n.value:e.data<=n.value)&&(t=this._getOrReturnCtx(e,t),(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.too_small,minimum:n.value,type:"number",inclusive:n.inclusive,exact:!1,message:n.message}),r.dirty()):"max"===n.kind?(n.inclusive?e.data>n.value:e.data>=n.value)&&(t=this._getOrReturnCtx(e,t),(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.too_big,maximum:n.value,type:"number",inclusive:n.inclusive,exact:!1,message:n.message}),r.dirty()):"multipleOf"===n.kind?0!==j(e.data,n.value)&&(t=this._getOrReturnCtx(e,t),(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.not_multiple_of,multipleOf:n.value,message:n.message}),r.dirty()):"finite"===n.kind?Number.isFinite(e.data)||(t=this._getOrReturnCtx(e,t),(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.not_finite,message:n.message}),r.dirty()):l.util.assertNever(n);return{status:r.value,value:e.data}}gte(e,t){return this.setLimit("min",e,!0,c.errorUtil.toString(t))}gt(e,t){return this.setLimit("min",e,!1,c.errorUtil.toString(t))}lte(e,t){return this.setLimit("max",e,!0,c.errorUtil.toString(t))}lt(e,t){return this.setLimit("max",e,!1,c.errorUtil.toString(t))}setLimit(e,t,r,n){return new R({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:c.errorUtil.toString(n)}]})}_addCheck(e){return new R({...this._def,checks:[...this._def.checks,e]})}int(e){return this._addCheck({kind:"int",message:c.errorUtil.toString(e)})}positive(e){return this._addCheck({kind:"min",value:0,inclusive:!1,message:c.errorUtil.toString(e)})}negative(e){return this._addCheck({kind:"max",value:0,inclusive:!1,message:c.errorUtil.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:0,inclusive:!0,message:c.errorUtil.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:0,inclusive:!0,message:c.errorUtil.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:c.errorUtil.toString(t)})}finite(e){return this._addCheck({kind:"finite",message:c.errorUtil.toString(e)})}safe(e){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:c.errorUtil.toString(e)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:c.errorUtil.toString(e)})}get minValue(){let e=null;for(const t of this._def.checks)"min"===t.kind&&(null===e||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)"max"===t.kind&&(null===e||t.value<e)&&(e=t.value);return e}get isInt(){return!!this._def.checks.find((e=>"int"===e.kind||"multipleOf"===e.kind&&l.util.isInteger(e.value)))}get isFinite(){let e=null,t=null;for(const r of this._def.checks){if("finite"===r.kind||"int"===r.kind||"multipleOf"===r.kind)return!0;"min"===r.kind?(null===t||r.value>t)&&(t=r.value):"max"===r.kind&&(null===e||r.value<e)&&(e=r.value)}return Number.isFinite(t)&&Number.isFinite(e)}}t.ZodNumber=R,R.create=e=>new R({checks:[],typeName:ve.ZodNumber,coerce:(null==e?void 0:e.coerce)||!1,...f(e)});class D extends y{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(e){if(this._def.coerce&&(e.data=BigInt(e.data)),this._getType(e)!==l.ZodParsedType.bigint){const t=this._getOrReturnCtx(e);return(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.invalid_type,expected:l.ZodParsedType.bigint,received:t.parsedType}),d.INVALID}let t;const r=new d.ParseStatus;for(const n of this._def.checks)"min"===n.kind?(n.inclusive?e.data<n.value:e.data<=n.value)&&(t=this._getOrReturnCtx(e,t),(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.too_small,type:"bigint",minimum:n.value,inclusive:n.inclusive,message:n.message}),r.dirty()):"max"===n.kind?(n.inclusive?e.data>n.value:e.data>=n.value)&&(t=this._getOrReturnCtx(e,t),(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.too_big,type:"bigint",maximum:n.value,inclusive:n.inclusive,message:n.message}),r.dirty()):"multipleOf"===n.kind?e.data%n.value!==BigInt(0)&&(t=this._getOrReturnCtx(e,t),(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.not_multiple_of,multipleOf:n.value,message:n.message}),r.dirty()):l.util.assertNever(n);return{status:r.value,value:e.data}}gte(e,t){return this.setLimit("min",e,!0,c.errorUtil.toString(t))}gt(e,t){return this.setLimit("min",e,!1,c.errorUtil.toString(t))}lte(e,t){return this.setLimit("max",e,!0,c.errorUtil.toString(t))}lt(e,t){return this.setLimit("max",e,!1,c.errorUtil.toString(t))}setLimit(e,t,r,n){return new D({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:c.errorUtil.toString(n)}]})}_addCheck(e){return new D({...this._def,checks:[...this._def.checks,e]})}positive(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:c.errorUtil.toString(e)})}negative(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:c.errorUtil.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:c.errorUtil.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:c.errorUtil.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:c.errorUtil.toString(t)})}get minValue(){let e=null;for(const t of this._def.checks)"min"===t.kind&&(null===e||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)"max"===t.kind&&(null===e||t.value<e)&&(e=t.value);return e}}t.ZodBigInt=D,D.create=e=>{var t;return new D({checks:[],typeName:ve.ZodBigInt,coerce:null!==(t=null==e?void 0:e.coerce)&&void 0!==t&&t,...f(e)})};class z extends y{_parse(e){if(this._def.coerce&&(e.data=Boolean(e.data)),this._getType(e)!==l.ZodParsedType.boolean){const t=this._getOrReturnCtx(e);return(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.invalid_type,expected:l.ZodParsedType.boolean,received:t.parsedType}),d.INVALID}return(0,d.OK)(e.data)}}t.ZodBoolean=z,z.create=e=>new z({typeName:ve.ZodBoolean,coerce:(null==e?void 0:e.coerce)||!1,...f(e)});class M extends y{_parse(e){if(this._def.coerce&&(e.data=new Date(e.data)),this._getType(e)!==l.ZodParsedType.date){const t=this._getOrReturnCtx(e);return(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.invalid_type,expected:l.ZodParsedType.date,received:t.parsedType}),d.INVALID}if(isNaN(e.data.getTime())){const t=this._getOrReturnCtx(e);return(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.invalid_date}),d.INVALID}const t=new d.ParseStatus;let r;for(const n of this._def.checks)"min"===n.kind?e.data.getTime()<n.value&&(r=this._getOrReturnCtx(e,r),(0,d.addIssueToContext)(r,{code:u.ZodIssueCode.too_small,message:n.message,inclusive:!0,exact:!1,minimum:n.value,type:"date"}),t.dirty()):"max"===n.kind?e.data.getTime()>n.value&&(r=this._getOrReturnCtx(e,r),(0,d.addIssueToContext)(r,{code:u.ZodIssueCode.too_big,message:n.message,inclusive:!0,exact:!1,maximum:n.value,type:"date"}),t.dirty()):l.util.assertNever(n);return{status:t.value,value:new Date(e.data.getTime())}}_addCheck(e){return new M({...this._def,checks:[...this._def.checks,e]})}min(e,t){return this._addCheck({kind:"min",value:e.getTime(),message:c.errorUtil.toString(t)})}max(e,t){return this._addCheck({kind:"max",value:e.getTime(),message:c.errorUtil.toString(t)})}get minDate(){let e=null;for(const t of this._def.checks)"min"===t.kind&&(null===e||t.value>e)&&(e=t.value);return null!=e?new Date(e):null}get maxDate(){let e=null;for(const t of this._def.checks)"max"===t.kind&&(null===e||t.value<e)&&(e=t.value);return null!=e?new Date(e):null}}t.ZodDate=M,M.create=e=>new M({checks:[],coerce:(null==e?void 0:e.coerce)||!1,typeName:ve.ZodDate,...f(e)});class K extends y{_parse(e){if(this._getType(e)!==l.ZodParsedType.symbol){const t=this._getOrReturnCtx(e);return(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.invalid_type,expected:l.ZodParsedType.symbol,received:t.parsedType}),d.INVALID}return(0,d.OK)(e.data)}}t.ZodSymbol=K,K.create=e=>new K({typeName:ve.ZodSymbol,...f(e)});class L extends y{_parse(e){if(this._getType(e)!==l.ZodParsedType.undefined){const t=this._getOrReturnCtx(e);return(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.invalid_type,expected:l.ZodParsedType.undefined,received:t.parsedType}),d.INVALID}return(0,d.OK)(e.data)}}t.ZodUndefined=L,L.create=e=>new L({typeName:ve.ZodUndefined,...f(e)});class H extends y{_parse(e){if(this._getType(e)!==l.ZodParsedType.null){const t=this._getOrReturnCtx(e);return(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.invalid_type,expected:l.ZodParsedType.null,received:t.parsedType}),d.INVALID}return(0,d.OK)(e.data)}}t.ZodNull=H,H.create=e=>new H({typeName:ve.ZodNull,...f(e)});class W extends y{constructor(){super(...arguments),this._any=!0}_parse(e){return(0,d.OK)(e.data)}}t.ZodAny=W,W.create=e=>new W({typeName:ve.ZodAny,...f(e)});class U extends y{constructor(){super(...arguments),this._unknown=!0}_parse(e){return(0,d.OK)(e.data)}}t.ZodUnknown=U,U.create=e=>new U({typeName:ve.ZodUnknown,...f(e)});class Z extends y{_parse(e){const t=this._getOrReturnCtx(e);return(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.invalid_type,expected:l.ZodParsedType.never,received:t.parsedType}),d.INVALID}}t.ZodNever=Z,Z.create=e=>new Z({typeName:ve.ZodNever,...f(e)});class N extends y{_parse(e){if(this._getType(e)!==l.ZodParsedType.undefined){const t=this._getOrReturnCtx(e);return(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.invalid_type,expected:l.ZodParsedType.void,received:t.parsedType}),d.INVALID}return(0,d.OK)(e.data)}}t.ZodVoid=N,N.create=e=>new N({typeName:ve.ZodVoid,...f(e)});class J extends y{_parse(e){const{ctx:t,status:r}=this._processInputParams(e),n=this._def;if(t.parsedType!==l.ZodParsedType.array)return(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.invalid_type,expected:l.ZodParsedType.array,received:t.parsedType}),d.INVALID;if(null!==n.exactLength){const e=t.data.length>n.exactLength.value,s=t.data.length<n.exactLength.value;(e||s)&&((0,d.addIssueToContext)(t,{code:e?u.ZodIssueCode.too_big:u.ZodIssueCode.too_small,minimum:s?n.exactLength.value:void 0,maximum:e?n.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:n.exactLength.message}),r.dirty())}if(null!==n.minLength&&t.data.length<n.minLength.value&&((0,d.addIssueToContext)(t,{code:u.ZodIssueCode.too_small,minimum:n.minLength.value,type:"array",inclusive:!0,exact:!1,message:n.minLength.message}),r.dirty()),null!==n.maxLength&&t.data.length>n.maxLength.value&&((0,d.addIssueToContext)(t,{code:u.ZodIssueCode.too_big,maximum:n.maxLength.value,type:"array",inclusive:!0,exact:!1,message:n.maxLength.message}),r.dirty()),t.common.async)return Promise.all([...t.data].map(((e,r)=>n.type._parseAsync(new h(t,e,t.path,r))))).then((e=>d.ParseStatus.mergeArray(r,e)));const s=[...t.data].map(((e,r)=>n.type._parseSync(new h(t,e,t.path,r))));return d.ParseStatus.mergeArray(r,s)}get element(){return this._def.type}min(e,t){return new J({...this._def,minLength:{value:e,message:c.errorUtil.toString(t)}})}max(e,t){return new J({...this._def,maxLength:{value:e,message:c.errorUtil.toString(t)}})}length(e,t){return new J({...this._def,exactLength:{value:e,message:c.errorUtil.toString(t)}})}nonempty(e){return this.min(1,e)}}function $(e){if(e instanceof F){const t={};for(const r in e.shape){const n=e.shape[r];t[r]=le.create($(n))}return new F({...e._def,shape:()=>t})}return e instanceof J?new J({...e._def,type:$(e.element)}):e instanceof le?le.create($(e.unwrap())):e instanceof ue?ue.create($(e.unwrap())):e instanceof Y?Y.create(e.items.map((e=>$(e)))):e}t.ZodArray=J,J.create=(e,t)=>new J({type:e,minLength:null,maxLength:null,exactLength:null,typeName:ve.ZodArray,...f(t)});class F extends y{constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(null!==this._cached)return this._cached;const e=this._def.shape(),t=l.util.objectKeys(e);return this._cached={shape:e,keys:t}}_parse(e){if(this._getType(e)!==l.ZodParsedType.object){const t=this._getOrReturnCtx(e);return(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.invalid_type,expected:l.ZodParsedType.object,received:t.parsedType}),d.INVALID}const{status:t,ctx:r}=this._processInputParams(e),{shape:n,keys:s}=this._getCached(),i=[];if(!(this._def.catchall instanceof Z&&"strip"===this._def.unknownKeys))for(const e in r.data)s.includes(e)||i.push(e);const o=[];for(const e of s){const t=n[e],s=r.data[e];o.push({key:{status:"valid",value:e},value:t._parse(new h(r,s,r.path,e)),alwaysSet:e in r.data})}if(this._def.catchall instanceof Z){const e=this._def.unknownKeys;if("passthrough"===e)for(const e of i)o.push({key:{status:"valid",value:e},value:{status:"valid",value:r.data[e]}});else if("strict"===e)i.length>0&&((0,d.addIssueToContext)(r,{code:u.ZodIssueCode.unrecognized_keys,keys:i}),t.dirty());else if("strip"!==e)throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{const e=this._def.catchall;for(const t of i){const n=r.data[t];o.push({key:{status:"valid",value:t},value:e._parse(new h(r,n,r.path,t)),alwaysSet:t in r.data})}}return r.common.async?Promise.resolve().then((async()=>{const e=[];for(const t of o){const r=await t.key,n=await t.value;e.push({key:r,value:n,alwaysSet:t.alwaysSet})}return e})).then((e=>d.ParseStatus.mergeObjectSync(t,e))):d.ParseStatus.mergeObjectSync(t,o)}get shape(){return this._def.shape()}strict(e){return c.errorUtil.errToObj,new F({...this._def,unknownKeys:"strict",...void 0!==e?{errorMap:(t,r)=>{var n,s,i,o;const a=null!==(i=null===(s=(n=this._def).errorMap)||void 0===s?void 0:s.call(n,t,r).message)&&void 0!==i?i:r.defaultError;return"unrecognized_keys"===t.code?{message:null!==(o=c.errorUtil.errToObj(e).message)&&void 0!==o?o:a}:{message:a}}}:{}})}strip(){return new F({...this._def,unknownKeys:"strip"})}passthrough(){return new F({...this._def,unknownKeys:"passthrough"})}extend(e){return new F({...this._def,shape:()=>({...this._def.shape(),...e})})}merge(e){return new F({unknownKeys:e._def.unknownKeys,catchall:e._def.catchall,shape:()=>({...this._def.shape(),...e._def.shape()}),typeName:ve.ZodObject})}setKey(e,t){return this.augment({[e]:t})}catchall(e){return new F({...this._def,catchall:e})}pick(e){const t={};return l.util.objectKeys(e).forEach((r=>{e[r]&&this.shape[r]&&(t[r]=this.shape[r])})),new F({...this._def,shape:()=>t})}omit(e){const t={};return l.util.objectKeys(this.shape).forEach((r=>{e[r]||(t[r]=this.shape[r])})),new F({...this._def,shape:()=>t})}deepPartial(){return $(this)}partial(e){const t={};return l.util.objectKeys(this.shape).forEach((r=>{const n=this.shape[r];e&&!e[r]?t[r]=n:t[r]=n.optional()})),new F({...this._def,shape:()=>t})}required(e){const t={};return l.util.objectKeys(this.shape).forEach((r=>{if(e&&!e[r])t[r]=this.shape[r];else{let e=this.shape[r];for(;e instanceof le;)e=e._def.innerType;t[r]=e}})),new F({...this._def,shape:()=>t})}keyof(){return ie(l.util.objectKeys(this.shape))}}t.ZodObject=F,F.create=(e,t)=>new F({shape:()=>e,unknownKeys:"strip",catchall:Z.create(),typeName:ve.ZodObject,...f(t)}),F.strictCreate=(e,t)=>new F({shape:()=>e,unknownKeys:"strict",catchall:Z.create(),typeName:ve.ZodObject,...f(t)}),F.lazycreate=(e,t)=>new F({shape:e,unknownKeys:"strip",catchall:Z.create(),typeName:ve.ZodObject,...f(t)});class B extends y{_parse(e){const{ctx:t}=this._processInputParams(e),r=this._def.options;if(t.common.async)return Promise.all(r.map((async e=>{const r={...t,common:{...t.common,issues:[]},parent:null};return{result:await e._parseAsync({data:t.data,path:t.path,parent:r}),ctx:r}}))).then((function(e){for(const t of e)if("valid"===t.result.status)return t.result;for(const r of e)if("dirty"===r.result.status)return t.common.issues.push(...r.ctx.common.issues),r.result;const r=e.map((e=>new u.ZodError(e.ctx.common.issues)));return(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.invalid_union,unionErrors:r}),d.INVALID}));{let e;const n=[];for(const s of r){const r={...t,common:{...t.common,issues:[]},parent:null},i=s._parseSync({data:t.data,path:t.path,parent:r});if("valid"===i.status)return i;"dirty"!==i.status||e||(e={result:i,ctx:r}),r.common.issues.length&&n.push(r.common.issues)}if(e)return t.common.issues.push(...e.ctx.common.issues),e.result;const s=n.map((e=>new u.ZodError(e)));return(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.invalid_union,unionErrors:s}),d.INVALID}}get options(){return this._def.options}}t.ZodUnion=B,B.create=(e,t)=>new B({options:e,typeName:ve.ZodUnion,...f(t)});const V=e=>e instanceof ne?V(e.schema):e instanceof de?V(e.innerType()):e instanceof se?[e.value]:e instanceof oe?e.options:e instanceof ae?l.util.objectValues(e.enum):e instanceof he?V(e._def.innerType):e instanceof L?[void 0]:e instanceof H?[null]:e instanceof le?[void 0,...V(e.unwrap())]:e instanceof ue?[null,...V(e.unwrap())]:e instanceof ye||e instanceof we?V(e.unwrap()):e instanceof pe?V(e._def.innerType):[];class q extends y{_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==l.ZodParsedType.object)return(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.invalid_type,expected:l.ZodParsedType.object,received:t.parsedType}),d.INVALID;const r=this.discriminator,n=t.data[r],s=this.optionsMap.get(n);return s?t.common.async?s._parseAsync({data:t.data,path:t.path,parent:t}):s._parseSync({data:t.data,path:t.path,parent:t}):((0,d.addIssueToContext)(t,{code:u.ZodIssueCode.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[r]}),d.INVALID)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(e,t,r){const n=new Map;for(const r of t){const t=V(r.shape[e]);if(!t.length)throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);for(const s of t){if(n.has(s))throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(s)}`);n.set(s,r)}}return new q({typeName:ve.ZodDiscriminatedUnion,discriminator:e,options:t,optionsMap:n,...f(r)})}}function G(e,t){const r=(0,l.getParsedType)(e),n=(0,l.getParsedType)(t);if(e===t)return{valid:!0,data:e};if(r===l.ZodParsedType.object&&n===l.ZodParsedType.object){const r=l.util.objectKeys(t),n=l.util.objectKeys(e).filter((e=>-1!==r.indexOf(e))),s={...e,...t};for(const r of n){const n=G(e[r],t[r]);if(!n.valid)return{valid:!1};s[r]=n.data}return{valid:!0,data:s}}if(r===l.ZodParsedType.array&&n===l.ZodParsedType.array){if(e.length!==t.length)return{valid:!1};const r=[];for(let n=0;n<e.length;n++){const s=G(e[n],t[n]);if(!s.valid)return{valid:!1};r.push(s.data)}return{valid:!0,data:r}}return r===l.ZodParsedType.date&&n===l.ZodParsedType.date&&+e==+t?{valid:!0,data:e}:{valid:!1}}t.ZodDiscriminatedUnion=q;class X extends y{_parse(e){const{status:t,ctx:r}=this._processInputParams(e),n=(e,n)=>{if((0,d.isAborted)(e)||(0,d.isAborted)(n))return d.INVALID;const s=G(e.value,n.value);return s.valid?(((0,d.isDirty)(e)||(0,d.isDirty)(n))&&t.dirty(),{status:t.value,value:s.data}):((0,d.addIssueToContext)(r,{code:u.ZodIssueCode.invalid_intersection_types}),d.INVALID)};return r.common.async?Promise.all([this._def.left._parseAsync({data:r.data,path:r.path,parent:r}),this._def.right._parseAsync({data:r.data,path:r.path,parent:r})]).then((([e,t])=>n(e,t))):n(this._def.left._parseSync({data:r.data,path:r.path,parent:r}),this._def.right._parseSync({data:r.data,path:r.path,parent:r}))}}t.ZodIntersection=X,X.create=(e,t,r)=>new X({left:e,right:t,typeName:ve.ZodIntersection,...f(r)});class Y extends y{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==l.ZodParsedType.array)return(0,d.addIssueToContext)(r,{code:u.ZodIssueCode.invalid_type,expected:l.ZodParsedType.array,received:r.parsedType}),d.INVALID;if(r.data.length<this._def.items.length)return(0,d.addIssueToContext)(r,{code:u.ZodIssueCode.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),d.INVALID;!this._def.rest&&r.data.length>this._def.items.length&&((0,d.addIssueToContext)(r,{code:u.ZodIssueCode.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),t.dirty());const n=[...r.data].map(((e,t)=>{const n=this._def.items[t]||this._def.rest;return n?n._parse(new h(r,e,r.path,t)):null})).filter((e=>!!e));return r.common.async?Promise.all(n).then((e=>d.ParseStatus.mergeArray(t,e))):d.ParseStatus.mergeArray(t,n)}get items(){return this._def.items}rest(e){return new Y({...this._def,rest:e})}}t.ZodTuple=Y,Y.create=(e,t)=>{if(!Array.isArray(e))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new Y({items:e,typeName:ve.ZodTuple,rest:null,...f(t)})};class Q extends y{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==l.ZodParsedType.object)return(0,d.addIssueToContext)(r,{code:u.ZodIssueCode.invalid_type,expected:l.ZodParsedType.object,received:r.parsedType}),d.INVALID;const n=[],s=this._def.keyType,i=this._def.valueType;for(const e in r.data)n.push({key:s._parse(new h(r,e,r.path,e)),value:i._parse(new h(r,r.data[e],r.path,e)),alwaysSet:e in r.data});return r.common.async?d.ParseStatus.mergeObjectAsync(t,n):d.ParseStatus.mergeObjectSync(t,n)}get element(){return this._def.valueType}static create(e,t,r){return new Q(t instanceof y?{keyType:e,valueType:t,typeName:ve.ZodRecord,...f(r)}:{keyType:x.create(),valueType:e,typeName:ve.ZodRecord,...f(t)})}}t.ZodRecord=Q;class ee extends y{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==l.ZodParsedType.map)return(0,d.addIssueToContext)(r,{code:u.ZodIssueCode.invalid_type,expected:l.ZodParsedType.map,received:r.parsedType}),d.INVALID;const n=this._def.keyType,s=this._def.valueType,i=[...r.data.entries()].map((([e,t],i)=>({key:n._parse(new h(r,e,r.path,[i,"key"])),value:s._parse(new h(r,t,r.path,[i,"value"]))})));if(r.common.async){const e=new Map;return Promise.resolve().then((async()=>{for(const r of i){const n=await r.key,s=await r.value;if("aborted"===n.status||"aborted"===s.status)return d.INVALID;"dirty"!==n.status&&"dirty"!==s.status||t.dirty(),e.set(n.value,s.value)}return{status:t.value,value:e}}))}{const e=new Map;for(const r of i){const n=r.key,s=r.value;if("aborted"===n.status||"aborted"===s.status)return d.INVALID;"dirty"!==n.status&&"dirty"!==s.status||t.dirty(),e.set(n.value,s.value)}return{status:t.value,value:e}}}}t.ZodMap=ee,ee.create=(e,t,r)=>new ee({valueType:t,keyType:e,typeName:ve.ZodMap,...f(r)});class te extends y{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==l.ZodParsedType.set)return(0,d.addIssueToContext)(r,{code:u.ZodIssueCode.invalid_type,expected:l.ZodParsedType.set,received:r.parsedType}),d.INVALID;const n=this._def;null!==n.minSize&&r.data.size<n.minSize.value&&((0,d.addIssueToContext)(r,{code:u.ZodIssueCode.too_small,minimum:n.minSize.value,type:"set",inclusive:!0,exact:!1,message:n.minSize.message}),t.dirty()),null!==n.maxSize&&r.data.size>n.maxSize.value&&((0,d.addIssueToContext)(r,{code:u.ZodIssueCode.too_big,maximum:n.maxSize.value,type:"set",inclusive:!0,exact:!1,message:n.maxSize.message}),t.dirty());const s=this._def.valueType;function i(e){const r=new Set;for(const n of e){if("aborted"===n.status)return d.INVALID;"dirty"===n.status&&t.dirty(),r.add(n.value)}return{status:t.value,value:r}}const o=[...r.data.values()].map(((e,t)=>s._parse(new h(r,e,r.path,t))));return r.common.async?Promise.all(o).then((e=>i(e))):i(o)}min(e,t){return new te({...this._def,minSize:{value:e,message:c.errorUtil.toString(t)}})}max(e,t){return new te({...this._def,maxSize:{value:e,message:c.errorUtil.toString(t)}})}size(e,t){return this.min(e,t).max(e,t)}nonempty(e){return this.min(1,e)}}t.ZodSet=te,te.create=(e,t)=>new te({valueType:e,minSize:null,maxSize:null,typeName:ve.ZodSet,...f(t)});class re extends y{constructor(){super(...arguments),this.validate=this.implement}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==l.ZodParsedType.function)return(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.invalid_type,expected:l.ZodParsedType.function,received:t.parsedType}),d.INVALID;function r(e,r){return(0,d.makeIssue)({data:e,path:t.path,errorMaps:[t.common.contextualErrorMap,t.schemaErrorMap,(0,a.getErrorMap)(),a.defaultErrorMap].filter((e=>!!e)),issueData:{code:u.ZodIssueCode.invalid_arguments,argumentsError:r}})}function n(e,r){return(0,d.makeIssue)({data:e,path:t.path,errorMaps:[t.common.contextualErrorMap,t.schemaErrorMap,(0,a.getErrorMap)(),a.defaultErrorMap].filter((e=>!!e)),issueData:{code:u.ZodIssueCode.invalid_return_type,returnTypeError:r}})}const s={errorMap:t.common.contextualErrorMap},i=t.data;if(this._def.returns instanceof ce){const e=this;return(0,d.OK)((async function(...t){const o=new u.ZodError([]),a=await e._def.args.parseAsync(t,s).catch((e=>{throw o.addIssue(r(t,e)),o})),c=await Reflect.apply(i,this,a);return await e._def.returns._def.type.parseAsync(c,s).catch((e=>{throw o.addIssue(n(c,e)),o}))}))}{const e=this;return(0,d.OK)((function(...t){const o=e._def.args.safeParse(t,s);if(!o.success)throw new u.ZodError([r(t,o.error)]);const a=Reflect.apply(i,this,o.data),c=e._def.returns.safeParse(a,s);if(!c.success)throw new u.ZodError([n(a,c.error)]);return c.data}))}}parameters(){return this._def.args}returnType(){return this._def.returns}args(...e){return new re({...this._def,args:Y.create(e).rest(U.create())})}returns(e){return new re({...this._def,returns:e})}implement(e){return this.parse(e)}strictImplement(e){return this.parse(e)}static create(e,t,r){return new re({args:e||Y.create([]).rest(U.create()),returns:t||U.create(),typeName:ve.ZodFunction,...f(r)})}}t.ZodFunction=re;class ne extends y{get schema(){return this._def.getter()}_parse(e){const{ctx:t}=this._processInputParams(e);return this._def.getter()._parse({data:t.data,path:t.path,parent:t})}}t.ZodLazy=ne,ne.create=(e,t)=>new ne({getter:e,typeName:ve.ZodLazy,...f(t)});class se extends y{_parse(e){if(e.data!==this._def.value){const t=this._getOrReturnCtx(e);return(0,d.addIssueToContext)(t,{received:t.data,code:u.ZodIssueCode.invalid_literal,expected:this._def.value}),d.INVALID}return{status:"valid",value:e.data}}get value(){return this._def.value}}function ie(e,t){return new oe({values:e,typeName:ve.ZodEnum,...f(t)})}t.ZodLiteral=se,se.create=(e,t)=>new se({value:e,typeName:ve.ZodLiteral,...f(t)});class oe extends y{constructor(){super(...arguments),n.set(this,void 0)}_parse(e){if("string"!=typeof e.data){const t=this._getOrReturnCtx(e),r=this._def.values;return(0,d.addIssueToContext)(t,{expected:l.util.joinValues(r),received:t.parsedType,code:u.ZodIssueCode.invalid_type}),d.INVALID}if(i(this,n,"f")||o(this,n,new Set(this._def.values),"f"),!i(this,n,"f").has(e.data)){const t=this._getOrReturnCtx(e),r=this._def.values;return(0,d.addIssueToContext)(t,{received:t.data,code:u.ZodIssueCode.invalid_enum_value,options:r}),d.INVALID}return(0,d.OK)(e.data)}get options(){return this._def.values}get enum(){const e={};for(const t of this._def.values)e[t]=t;return e}get Values(){const e={};for(const t of this._def.values)e[t]=t;return e}get Enum(){const e={};for(const t of this._def.values)e[t]=t;return e}extract(e,t=this._def){return oe.create(e,{...this._def,...t})}exclude(e,t=this._def){return oe.create(this.options.filter((t=>!e.includes(t))),{...this._def,...t})}}t.ZodEnum=oe,n=new WeakMap,oe.create=ie;class ae extends y{constructor(){super(...arguments),s.set(this,void 0)}_parse(e){const t=l.util.getValidEnumValues(this._def.values),r=this._getOrReturnCtx(e);if(r.parsedType!==l.ZodParsedType.string&&r.parsedType!==l.ZodParsedType.number){const e=l.util.objectValues(t);return(0,d.addIssueToContext)(r,{expected:l.util.joinValues(e),received:r.parsedType,code:u.ZodIssueCode.invalid_type}),d.INVALID}if(i(this,s,"f")||o(this,s,new Set(l.util.getValidEnumValues(this._def.values)),"f"),!i(this,s,"f").has(e.data)){const e=l.util.objectValues(t);return(0,d.addIssueToContext)(r,{received:r.data,code:u.ZodIssueCode.invalid_enum_value,options:e}),d.INVALID}return(0,d.OK)(e.data)}get enum(){return this._def.values}}t.ZodNativeEnum=ae,s=new WeakMap,ae.create=(e,t)=>new ae({values:e,typeName:ve.ZodNativeEnum,...f(t)});class ce extends y{unwrap(){return this._def.type}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==l.ZodParsedType.promise&&!1===t.common.async)return(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.invalid_type,expected:l.ZodParsedType.promise,received:t.parsedType}),d.INVALID;const r=t.parsedType===l.ZodParsedType.promise?t.data:Promise.resolve(t.data);return(0,d.OK)(r.then((e=>this._def.type.parseAsync(e,{path:t.path,errorMap:t.common.contextualErrorMap}))))}}t.ZodPromise=ce,ce.create=(e,t)=>new ce({type:e,typeName:ve.ZodPromise,...f(t)});class de extends y{innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===ve.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(e){const{status:t,ctx:r}=this._processInputParams(e),n=this._def.effect||null,s={addIssue:e=>{(0,d.addIssueToContext)(r,e),e.fatal?t.abort():t.dirty()},get path(){return r.path}};if(s.addIssue=s.addIssue.bind(s),"preprocess"===n.type){const e=n.transform(r.data,s);if(r.common.async)return Promise.resolve(e).then((async e=>{if("aborted"===t.value)return d.INVALID;const n=await this._def.schema._parseAsync({data:e,path:r.path,parent:r});return"aborted"===n.status?d.INVALID:"dirty"===n.status||"dirty"===t.value?(0,d.DIRTY)(n.value):n}));{if("aborted"===t.value)return d.INVALID;const n=this._def.schema._parseSync({data:e,path:r.path,parent:r});return"aborted"===n.status?d.INVALID:"dirty"===n.status||"dirty"===t.value?(0,d.DIRTY)(n.value):n}}if("refinement"===n.type){const e=e=>{const t=n.refinement(e,s);if(r.common.async)return Promise.resolve(t);if(t instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return e};if(!1===r.common.async){const n=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});return"aborted"===n.status?d.INVALID:("dirty"===n.status&&t.dirty(),e(n.value),{status:t.value,value:n.value})}return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then((r=>"aborted"===r.status?d.INVALID:("dirty"===r.status&&t.dirty(),e(r.value).then((()=>({status:t.value,value:r.value}))))))}if("transform"===n.type){if(!1===r.common.async){const e=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});if(!(0,d.isValid)(e))return e;const i=n.transform(e.value,s);if(i instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:t.value,value:i}}return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then((e=>(0,d.isValid)(e)?Promise.resolve(n.transform(e.value,s)).then((e=>({status:t.value,value:e}))):e))}l.util.assertNever(n)}}t.ZodEffects=de,t.ZodTransformer=de,de.create=(e,t,r)=>new de({schema:e,typeName:ve.ZodEffects,effect:t,...f(r)}),de.createWithPreprocess=(e,t,r)=>new de({schema:t,effect:{type:"preprocess",transform:e},typeName:ve.ZodEffects,...f(r)});class le extends y{_parse(e){return this._getType(e)===l.ZodParsedType.undefined?(0,d.OK)(void 0):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}t.ZodOptional=le,le.create=(e,t)=>new le({innerType:e,typeName:ve.ZodOptional,...f(t)});class ue extends y{_parse(e){return this._getType(e)===l.ZodParsedType.null?(0,d.OK)(null):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}t.ZodNullable=ue,ue.create=(e,t)=>new ue({innerType:e,typeName:ve.ZodNullable,...f(t)});class he extends y{_parse(e){const{ctx:t}=this._processInputParams(e);let r=t.data;return t.parsedType===l.ZodParsedType.undefined&&(r=this._def.defaultValue()),this._def.innerType._parse({data:r,path:t.path,parent:t})}removeDefault(){return this._def.innerType}}t.ZodDefault=he,he.create=(e,t)=>new he({innerType:e,typeName:ve.ZodDefault,defaultValue:"function"==typeof t.default?t.default:()=>t.default,...f(t)});class pe extends y{_parse(e){const{ctx:t}=this._processInputParams(e),r={...t,common:{...t.common,issues:[]}},n=this._def.innerType._parse({data:r.data,path:r.path,parent:{...r}});return(0,d.isAsync)(n)?n.then((e=>({status:"valid",value:"valid"===e.status?e.value:this._def.catchValue({get error(){return new u.ZodError(r.common.issues)},input:r.data})}))):{status:"valid",value:"valid"===n.status?n.value:this._def.catchValue({get error(){return new u.ZodError(r.common.issues)},input:r.data})}}removeCatch(){return this._def.innerType}}t.ZodCatch=pe,pe.create=(e,t)=>new pe({innerType:e,typeName:ve.ZodCatch,catchValue:"function"==typeof t.catch?t.catch:()=>t.catch,...f(t)});class fe extends y{_parse(e){if(this._getType(e)!==l.ZodParsedType.nan){const t=this._getOrReturnCtx(e);return(0,d.addIssueToContext)(t,{code:u.ZodIssueCode.invalid_type,expected:l.ZodParsedType.nan,received:t.parsedType}),d.INVALID}return{status:"valid",value:e.data}}}t.ZodNaN=fe,fe.create=e=>new fe({typeName:ve.ZodNaN,...f(e)}),t.BRAND=Symbol("zod_brand");class ye extends y{_parse(e){const{ctx:t}=this._processInputParams(e),r=t.data;return this._def.type._parse({data:r,path:t.path,parent:t})}unwrap(){return this._def.type}}t.ZodBranded=ye;class me extends y{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.common.async)return(async()=>{const e=await this._def.in._parseAsync({data:r.data,path:r.path,parent:r});return"aborted"===e.status?d.INVALID:"dirty"===e.status?(t.dirty(),(0,d.DIRTY)(e.value)):this._def.out._parseAsync({data:e.value,path:r.path,parent:r})})();{const e=this._def.in._parseSync({data:r.data,path:r.path,parent:r});return"aborted"===e.status?d.INVALID:"dirty"===e.status?(t.dirty(),{status:"dirty",value:e.value}):this._def.out._parseSync({data:e.value,path:r.path,parent:r})}}static create(e,t){return new me({in:e,out:t,typeName:ve.ZodPipeline})}}t.ZodPipeline=me;class we extends y{_parse(e){const t=this._def.innerType._parse(e),r=e=>((0,d.isValid)(e)&&(e.value=Object.freeze(e.value)),e);return(0,d.isAsync)(t)?t.then((e=>r(e))):r(t)}unwrap(){return this._def.innerType}}function ge(e,t={},r){return e?W.create().superRefine(((n,s)=>{var i,o;if(!e(n)){const e="function"==typeof t?t(n):"string"==typeof t?{message:t}:t,a=null===(o=null!==(i=e.fatal)&&void 0!==i?i:r)||void 0===o||o,c="string"==typeof e?{message:e}:e;s.addIssue({code:"custom",...c,fatal:a})}})):W.create()}var ve;t.ZodReadonly=we,we.create=(e,t)=>new we({innerType:e,typeName:ve.ZodReadonly,...f(t)}),t.custom=ge,t.late={object:F.lazycreate},function(e){e.ZodString="ZodString",e.ZodNumber="ZodNumber",e.ZodNaN="ZodNaN",e.ZodBigInt="ZodBigInt",e.ZodBoolean="ZodBoolean",e.ZodDate="ZodDate",e.ZodSymbol="ZodSymbol",e.ZodUndefined="ZodUndefined",e.ZodNull="ZodNull",e.ZodAny="ZodAny",e.ZodUnknown="ZodUnknown",e.ZodNever="ZodNever",e.ZodVoid="ZodVoid",e.ZodArray="ZodArray",e.ZodObject="ZodObject",e.ZodUnion="ZodUnion",e.ZodDiscriminatedUnion="ZodDiscriminatedUnion",e.ZodIntersection="ZodIntersection",e.ZodTuple="ZodTuple",e.ZodRecord="ZodRecord",e.ZodMap="ZodMap",e.ZodSet="ZodSet",e.ZodFunction="ZodFunction",e.ZodLazy="ZodLazy",e.ZodLiteral="ZodLiteral",e.ZodEnum="ZodEnum",e.ZodEffects="ZodEffects",e.ZodNativeEnum="ZodNativeEnum",e.ZodOptional="ZodOptional",e.ZodNullable="ZodNullable",e.ZodDefault="ZodDefault",e.ZodCatch="ZodCatch",e.ZodPromise="ZodPromise",e.ZodBranded="ZodBranded",e.ZodPipeline="ZodPipeline",e.ZodReadonly="ZodReadonly"}(ve=t.ZodFirstPartyTypeKind||(t.ZodFirstPartyTypeKind={})),t.instanceof=(e,t={message:`Input not instance of ${e.name}`})=>ge((t=>t instanceof e),t);const be=x.create;t.string=be;const _e=R.create;t.number=_e;const Se=fe.create;t.nan=Se;const Ee=D.create;t.bigint=Ee;const ke=z.create;t.boolean=ke;const Ae=M.create;t.date=Ae;const Pe=K.create;t.symbol=Pe;const Te=L.create;t.undefined=Te;const Ie=H.create;t.null=Ie;const Oe=W.create;t.any=Oe;const Ce=U.create;t.unknown=Ce;const xe=Z.create;t.never=xe;const je=N.create;t.void=je;const Re=J.create;t.array=Re;const De=F.create;t.object=De;const ze=F.strictCreate;t.strictObject=ze;const Me=B.create;t.union=Me;const Ke=q.create;t.discriminatedUnion=Ke;const Le=X.create;t.intersection=Le;const He=Y.create;t.tuple=He;const We=Q.create;t.record=We;const Ue=ee.create;t.map=Ue;const Ze=te.create;t.set=Ze;const Ne=re.create;t.function=Ne;const Je=ne.create;t.lazy=Je;const $e=se.create;t.literal=$e;const Fe=oe.create;t.enum=Fe;const Be=ae.create;t.nativeEnum=Be;const Ve=ce.create;t.promise=Ve;const qe=de.create;t.effect=qe,t.transformer=qe;const Ge=le.create;t.optional=Ge;const Xe=ue.create;t.nullable=Xe;const Ye=de.createWithPreprocess;t.preprocess=Ye;const Qe=me.create;t.pipeline=Qe,t.ostring=()=>be().optional(),t.onumber=()=>_e().optional(),t.oboolean=()=>ke().optional(),t.coerce={string:e=>x.create({...e,coerce:!0}),number:e=>R.create({...e,coerce:!0}),boolean:e=>z.create({...e,coerce:!0}),bigint:e=>D.create({...e,coerce:!0}),date:e=>M.create({...e,coerce:!0})},t.NEVER=d.INVALID},9118:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DidCacheMemory=void 0;const n=r(868),s=36e5;class i extends n.SimpleStoreMemory{constructor(e){super(null==e?.max?{ttl:s,maxSize:52428800,...e}:{ttl:s,...e})}}t.DidCacheMemory=i},6e3:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DidResolverCached=void 0;const n=r(3350),s=r(9118);t.DidResolverCached=class{constructor(e,t=new s.DidCacheMemory){Object.defineProperty(this,"getter",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.getter=new n.CachedGetter(((t,r)=>e.resolve(t,r)),t)}async resolve(e,t){return this.getter.get(e,t)}}},2961:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},6866:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DidResolverBase=void 0;const n=r(3654),s=r(6574),i=r(1614);t.DidResolverBase=class{constructor(e){Object.defineProperty(this,"methods",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.methods=new Map(Object.entries(e))}async resolve(e,t){t?.signal?.throwIfAborted();const r=(0,s.extractDidMethod)(e),o=this.methods.get(r);if(!o)throw new s.DidError(e,"Unsupported DID method","did-method-invalid",400);try{const r=await o.resolve(e,t);if(r.id!==e)throw new s.DidError(e,`DID document id (${r.id}) does not match DID`,"did-document-id-mismatch",400);return r}catch(t){if(t instanceof n.FetchRequestError)throw new s.DidError(e,t.message,"did-fetch-error",400,t);if(t instanceof i.ZodError)throw new s.DidError(e,t.message,"did-document-format-error",503,t);throw s.DidError.from(t,e)}}}},6382:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DidResolverCommon=void 0;const n=r(6866),s=r(8010),i=r(5445);class o extends n.DidResolverBase{constructor(e){super({plc:new s.DidPlcMethod(e),web:new i.DidWebMethod(e)})}}t.DidResolverCommon=o},3178:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},4186:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,s)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),s(r(6574),t),s(r(9118),t),s(r(6e3),t),s(r(2961),t),s(r(6382),t),s(r(3178),t),s(r(2400),t),s(r(4996),t)},2400:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,s)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),s(r(8010),t),s(r(5445),t)},8010:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DidPlcMethod=void 0;const n=r(3654),s=r(6672),i=r(6574),o=(0,s.pipe)((0,n.fetchOkProcessor)(),(0,n.fetchJsonProcessor)(/^application\/(did\+ld\+)?json$/),(0,n.fetchJsonZodProcessor)(i.didDocumentValidator));t.DidPlcMethod=class{constructor(e){Object.defineProperty(this,"fetch",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"plcDirectoryUrl",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.plcDirectoryUrl=new URL(e?.plcDirectoryUrl||"https://plc.directory/"),this.fetch=(0,n.bindFetch)(e?.fetch)}async resolve(e,t){(0,i.assertDidPlc)(e);const r=new URL(`/${e}`,this.plcDirectoryUrl);return this.fetch(r,{redirect:"error",headers:{accept:"application/did+ld+json,application/json"},signal:t?.signal}).then(o)}}},5445:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DidWebMethod=void 0,t.buildDidWebDocumentUrl=a;const n=r(3654),s=r(6672),i=r(6574),o=(0,s.pipe)((0,n.fetchOkProcessor)(),(0,n.fetchJsonProcessor)(/^application\/(did\+ld\+)?json$/),(0,n.fetchJsonZodProcessor)(i.didDocumentValidator));function a(e){const t=(0,i.didWebToUrl)(e);return"/"===t.pathname?new URL("/.well-known/did.json",t):new URL(`${t.pathname}/did.json`,t)}t.DidWebMethod=class{constructor({fetch:e=globalThis.fetch,allowHttp:t=!0}={}){Object.defineProperty(this,"fetch",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"allowHttp",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.fetch=(0,n.bindFetch)(e),this.allowHttp=t}async resolve(e,t){const r=a(e);if(!this.allowHttp&&"http:"===r.protocol)throw new Error(`Cannot resolve DID document for localhost: ${r}`);return this.fetch(r,{redirect:"error",headers:{accept:"application/did+ld+json,application/json"},signal:t?.signal}).then(o)}}},4996:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},2437:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FetchError=void 0;class r extends Error{constructor(e,t,r){if(null==e||!t){const s=function(e){if("string"==typeof e&&e.length>0)return[500,e];if(!(e instanceof Error))return[500,"Failed to fetch"];const t=e.code;if("string"==typeof t)switch(!0){case"ENOTFOUND"===t:return[400,"Invalid hostname"];case"ECONNREFUSED"===t:return[502,"Connection refused"];case"DEPTH_ZERO_SELF_SIGNED_CERT"===t:return[502,"Self-signed certificate"];case t.startsWith("ERR_TLS"):return[502,"TLS error"];case t.startsWith("ECONN"):return[502,"Connection error"];default:return[500,`${t} error`]}return[500,e.message]}((n=r?.cause,n instanceof TypeError&&"fetch failed"===n.message&&void 0!==n.cause?n.cause:n));e=e??s[0],t=t||s[1]}var n;super(t,r),Object.defineProperty(this,"statusCode",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.statusCode=e}}t.FetchError=r},2510:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.forbiddenDomainNameRequestTransform=t.DEFAULT_FORBIDDEN_DOMAIN_NAMES=t.requireHostHeaderTransform=t.redirectCheckRequestTransform=t.protocolCheckRequestTransform=t.FetchRequestError=void 0;const n=r(2437),s=r(3202),i=r(5912);class o extends n.FetchError{constructor(e,t,r,n){super(t,r,n),Object.defineProperty(this,"request",{enumerable:!0,configurable:!0,writable:!0,value:e})}static from(e,t){return t instanceof o?t:new o(e,void 0,void 0,{cause:t})}}t.FetchRequestError=o,t.protocolCheckRequestTransform=function(e){return(t,r)=>{const{protocol:n,port:a}=(0,i.extractUrl)(t),c=(0,s.asRequest)(t,r),d=Object.hasOwn(e,n)?e[n]:void 0;if(!d)throw new o(c,400,`Forbidden protocol "${n}"`);if(!0===d);else if(!d.allowCustomPort&&""!==a)throw new o(c,400,`Custom ${n} ports not allowed`);return c}},t.redirectCheckRequestTransform=function(){return(e,t)=>{const r=(0,s.asRequest)(e,t);if("follow"===r.redirect)throw new o(r,500,'Request redirect must be "error" or "manual"');return r}},t.requireHostHeaderTransform=function(){return(e,t)=>{const{protocol:r,hostname:n}=(0,i.extractUrl)(e),a=(0,s.asRequest)(e,t);if("http:"!==r&&"https:"!==r)throw new o(a,400,`"${r}" requests are not allowed`);if(!n||(0,i.isIp)(n))throw new o(a,400,"Invalid hostname");return a}},t.DEFAULT_FORBIDDEN_DOMAIN_NAMES=["example.com","*.example.com","example.org","*.example.org","example.net","*.example.net","googleusercontent.com","*.googleusercontent.com"],t.forbiddenDomainNameRequestTransform=function(e=t.DEFAULT_FORBIDDEN_DOMAIN_NAMES){const r=new Set(e);return 0===r.size?s.asRequest:async(e,t)=>{const{hostname:n}=(0,i.extractUrl)(e),a=(0,s.asRequest)(e,t);if(r.has(n))throw new o(a,403,"Forbidden hostname");let c=n.indexOf(".");for(;-1!==c;){const e=n.slice(c+1);if(r.has(`*.${e}`))throw new o(a,403,"Forbidden hostname");c=n.indexOf(".",c+1)}return a}}},4704:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.fetchJsonZodProcessor=t.fetchJsonProcessor=t.fetchResponseJsonTranformer=t.fetchResponseTypeChecker=t.fetchTypeProcessor=t.fetchResponseMaxSizeChecker=t.fetchMaxSizeProcessor=t.fetchOkTransformer=t.fetchOkProcessor=t.cancelBodyOnError=t.extractMime=t.extractLength=t.checkLength=t.peekJson=t.FetchResponseError=void 0;const n=r(6672),s=r(2437),i=r(6371),o=r(5912);class a extends s.FetchError{constructor(e,t=e.status,r=e.statusText,n){super(t,r,n),Object.defineProperty(this,"response",{enumerable:!0,configurable:!0,writable:!0,value:e})}static async from(e,t=c,r=e.status,n){const s="string"==typeof t?t:"function"==typeof t?await t(e):void 0;return new a(e,r,s,n)}}t.FetchResponseError=a;const c=async e=>{const t=u(e);if(t)try{if("text/plain"===t)return await e.text();if(/^application\/(?:[^+]+\+)?json$/i.test(t)){const t=await e.json();if("string"==typeof t)return t;const r=(0,o.ifString)((0,o.ifObject)(t)?.error_description);if(r)return r;const n=(0,o.ifString)((0,o.ifObject)(t)?.error);if(n)return n;const s=(0,o.ifString)((0,o.ifObject)(t)?.message);if(s)return s}}catch{}};function d(e,t){if(!(t>=0))throw new TypeError("maxBytes must be a non-negative number");const r=l(e);if(null!=r&&r>t)throw new a(e,502,"Response too large");return r}function l(e){const t=e.headers.get("Content-Length");if(null==t)return;if(!/^\d+$/.test(t))throw new a(e,502,"Invalid Content-Length");const r=Number(t);if(!Number.isSafeInteger(r))throw new a(e,502,"Content-Length too large");return r}function u(e){const t=e.headers.get("Content-Type");if(null!=t)return t.split(";",1)[0].trim()}function h(e,t=o.logCancellationError){return async r=>{try{return await e(r)}catch(e){throw await(0,o.cancelBody)(r,t??void 0),e}}}async function p(e,t){if(e.ok)return e;throw await a.from(e,t)}function f(e,t){if(t===1/0)return e;if(d(e,t),!e.body)return e;const r=new o.MaxBytesTransformStream(t);return new i.TransformedResponse(e,r)}function y(e,t=!0){const r="string"==typeof e?t=>t===e:e instanceof RegExp?t=>e.test(t):e;return h((e=>m(e,r,t)))}async function m(e,t,r=!0){const n=u(e);if(n){if(!t(n))throw await a.from(e,`Unexpected response Content-Type (${n})`,502)}else if(r)throw await a.from(e,"Missing response Content-Type header",502);return e}async function w(e){try{const t=await e.json();return{response:e,json:t}}catch(t){throw new a(e,502,"Unable to parse response as JSON",{cause:t})}}t.peekJson=async function(e,t=1/0){if("application/json"!==u(e))return;d(e,t);const r=e.clone();return(e.body&&t<1/0?new i.TransformedResponse(r,new o.MaxBytesTransformStream(t)):r).json()},t.checkLength=d,t.extractLength=l,t.extractMime=u,t.cancelBodyOnError=h,t.fetchOkProcessor=function(e){return h((t=>p(t,e)))},t.fetchOkTransformer=p,t.fetchMaxSizeProcessor=function(e){if(e===1/0)return e=>e;if(!Number.isFinite(e)||e<0)throw new TypeError("maxBytes must be a 0, Infinity or a positive number");return h((t=>f(t,e)))},t.fetchResponseMaxSizeChecker=f,t.fetchTypeProcessor=y,t.fetchResponseTypeChecker=m,t.fetchResponseJsonTranformer=w,t.fetchJsonProcessor=function(e=/^application\/(?:[^+]+\+)?json$/,t=!0){return(0,n.pipe)(y(e,t),h(w))},t.fetchJsonZodProcessor=function(e,t){return async r=>e.parseAsync(r.json,t)}},4543:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.bindFetch=t.timedFetch=t.loggedFetch=void 0;const n=r(2510),s=r(3202),i=r(6371),o=r(5912);t.loggedFetch=function({fetch:e=globalThis.fetch,logRequest:t=!0,logResponse:r=!0,logError:n=!0}){const i=!0===t?async e=>{const t=await(0,o.stringifyMessage)(e);console.info(`> ${e.method} ${e.url}\n${(0,o.padLines)(t,"  ")}`)}:t||void 0,a=!0===r?async e=>{const t=await(0,o.stringifyMessage)(e.clone());console.info(`< HTTP/1.1 ${e.status} ${e.statusText}\n${(0,o.padLines)(t,"  ")}`)}:r||void 0,c=!0===n?async e=>{console.error("< Error:",e)}:n||void 0;return i||a||c?(0,s.toRequestTransformer)((async function(t){i&&await i(t);try{const r=await e.call(this,t);return a&&await a(r,t),r}catch(e){throw c&&await c(e,t),e}})):e},t.timedFetch=(e=6e4,t=globalThis.fetch)=>{if(e===1/0)return t;if(!Number.isFinite(e)||e<=0)throw new TypeError("Timeout must be positive");return(0,s.toRequestTransformer)((async function(r){const n=new AbortController,s=n.signal,o=()=>{n.abort()},a=()=>{clearTimeout(c),r.signal?.removeEventListener("abort",o)},c=setTimeout(o,e);"object"==typeof c&&c.unref?.(),r.signal?.addEventListener("abort",o),s.addEventListener("abort",a);const d=await t.call(this,r,{signal:s});if(d.body){const e=new TransformStream({flush:a});return new i.TransformedResponse(d,e)}return a(),d}))},t.bindFetch=function(e=globalThis.fetch,t=globalThis){return(0,s.toRequestTransformer)((async r=>{try{return await e.call(t,r)}catch(e){throw n.FetchRequestError.from(r,e)}}))}},3202:(e,t)=>{function r(e,t){return!t&&e instanceof Request?e:new Request(e,t)}Object.defineProperty(t,"__esModule",{value:!0}),t.asRequest=t.toRequestTransformer=void 0,t.toRequestTransformer=function(e){return function(t,n){return e.call(this,r(t,n))}},t.asRequest=r},3654:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,s)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),s(r(2437),t),s(r(2510),t),s(r(4704),t),s(r(4543),t),s(r(3202),t),s(r(5912),t)},6371:function(e,t){var r,n=this&&this.__classPrivateFieldSet||function(e,t,r,n,s){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?s.call(e,r):s?s.value=r:t.set(e,r),r},s=this&&this.__classPrivateFieldGet||function(e,t,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(e):n?n.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.TransformedResponse=void 0;class i extends Response{constructor(e,t){if(!e.body)throw new TypeError("Response body is not available");if(e.bodyUsed)throw new TypeError("Response body is already used");super(e.body.pipeThrough(t),{status:e.status,statusText:e.statusText,headers:e.headers}),r.set(this,void 0),n(this,r,e,"f")}get url(){return s(this,r,"f").url}get redirected(){return s(this,r,"f").redirected}get type(){return s(this,r,"f").type}get statusText(){return s(this,r,"f").statusText}}t.TransformedResponse=i,r=new WeakMap},5912:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.extractUrl=t.stringifyMessage=t.logCancellationError=t.cancelBody=t.padLines=t.MaxBytesTransformStream=t.ifString=t.ifObject=t.isIp=void 0,t.isIp=function(e){return!!e.match(/^\d+\.\d+\.\d+\.\d+$/)||!(!e.startsWith("[")||!e.endsWith("]"))};const r=Object.prototype;t.ifObject=e=>{if("object"==typeof e&&null!=e&&!Array.isArray(e)){const t=Object.getPrototypeOf(e);if(null===t||t===r)return e}},t.ifString=e=>"string"==typeof e?e:void 0;class n extends TransformStream{constructor(e){if(!(e>=0))throw new TypeError("maxBytes must be a non-negative number");let t=0;super({transform:(r,n)=>{(t+=r.length)<=e?n.enqueue(r):n.error(new Error("Response too large"))}})}}t.MaxBytesTransformStream=n;const s=/\r?\n/g;async function i(e,t){!e.body||e.bodyUsed||e.body.locked||"function"!=typeof e.body.cancel||("function"==typeof t?e.body.cancel().catch(t):"log"===t?e.body.cancel().catch(o):await e.body.cancel())}function o(e){console.warn("Failed to cancel response body",e)}t.padLines=function(e,t){return e?t+e.replace(s,`$&${t}`):e},t.cancelBody=i,t.logCancellationError=o,t.stringifyMessage=async function(e){try{const t=function(e){return Array.from(e).map((([e,t])=>`${e}: ${t}`)).join("\n")}(e.headers),r=await async function(e){try{const t=await e.blob();if(t.type?.startsWith("text/")){const e=await t.text();return JSON.stringify(e)}if(/application\/(?:\w+\+)?json/.test(t.type)){const e=await t.text();return e.includes("\n")?JSON.stringify(JSON.parse(e)):e}return`[Body size: ${t.size}, type: ${JSON.stringify(t.type)} ]`}catch{return"[Body could not be read]"}}(e);return t&&r?`${t}\n${r}`:t||r}finally{i(e,"log")}},t.extractUrl=e=>"string"==typeof e?new URL(e):e instanceof URL?e:new URL(e.url)},6678:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AppViewHandleResolver=t.xrpcErrorSchema=void 0;const s=n(r(1614)),i=r(7810);t.xrpcErrorSchema=s.default.object({error:s.default.string(),message:s.default.string().optional()});class o{static from(e,t){return"string"==typeof e||e instanceof URL?new o(e,t):e}constructor(e,t){Object.defineProperty(this,"serviceUrl",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"fetch",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.serviceUrl=new URL(e),this.fetch=t?.fetch??globalThis.fetch}async resolve(e,r){const n=new URL("/xrpc/com.atproto.identity.resolveHandle",this.serviceUrl);n.searchParams.set("handle",e);const s=await this.fetch.call(null,n,{cache:r?.noCache?"no-cache":void 0,signal:r?.signal,redirect:"error"}),o=await s.json();if(400===s.status){const e=t.xrpcErrorSchema.parse(o);if("InvalidRequest"===e.error&&"Unable to resolve handle"===e.message)return null}if(!s.ok)throw new TypeError("Invalid response from resolveHandle method");const a=o?.did;if(!(0,i.isResolvedHandle)(a))throw new TypeError("Invalid DID returned from resolveHandle method");return a}}t.AppViewHandleResolver=o},9370:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AtprotoDohHandleResolver=void 0;const n=r(3992);class s extends n.AtprotoHandleResolver{constructor(e){super({...e,resolveTxt:i(e),resolveTxtFallback:void 0})}}function i({dohEndpoint:e,fetch:t=globalThis.fetch}){return async r=>{const n=new URL(e);n.searchParams.set("type","TXT"),n.searchParams.set("name",r);const s=await t(n,{method:"GET",headers:{accept:"application/dns-json"},redirect:"follow"});try{const e=s.headers.get("content-type")?.trim();if(!s.ok){const t=e?.startsWith("text/plain")?await s.text():`Failed to resolve ${r}`;throw new TypeError(t)}if("application/dns-json"!==e)throw new TypeError("Unexpected response from DoH server");const t=function(e){if(function(e){return"object"==typeof e&&null!==e&&"Status"in e&&"number"==typeof e.Status&&!("Answer"in e&&(t=e.Answer,r=a,!Array.isArray(t)||!t.every(r)));var t,r}(e))return e;throw new TypeError("Invalid DoH response")}(await s.json());return t.Answer?.filter(c).map(d)??null}finally{!1===s.bodyUsed&&s.body?.cancel().catch(o)}}}function o(e){e instanceof DOMException&&"AbortError"===e.name||console.error("An error occurred while cancelling the response body:",e)}function a(e){return"object"==typeof e&&null!==e&&"name"in e&&"string"==typeof e.name&&"type"in e&&"number"==typeof e.type&&"data"in e&&"string"==typeof e.data&&"TTL"in e&&"number"==typeof e.TTL}function c(e){return 16===e.type}function d(e){return e.data.replace(/^"|"$/g,"").replace(/\\"/g,'"')}t.AtprotoDohHandleResolver=s},3992:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AtprotoHandleResolver=void 0;const n=r(3498),s=r(7011),i=()=>{};t.AtprotoHandleResolver=class{constructor(e){Object.defineProperty(this,"httpResolver",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"dnsResolver",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"dnsResolverFallback",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.httpResolver=new s.WellKnownHandleResolver(e),this.dnsResolver=new n.DnsHandleResolver(e.resolveTxt),this.dnsResolverFallback=e.resolveTxtFallback?new n.DnsHandleResolver(e.resolveTxtFallback):void 0}async resolve(e,t){t?.signal?.throwIfAborted();const r=new AbortController,{signal:n}=r;t?.signal?.addEventListener("abort",(()=>r.abort()),{signal:n});const s={...t,signal:n};try{const t=this.dnsResolver.resolve(e,s),r=this.httpResolver.resolve(e,s);r.catch(i);const o=await t;if(o)return o;n.throwIfAborted();return await r||(n.throwIfAborted(),this.dnsResolverFallback?.resolve(e,s)??null)}finally{r.abort()}}}},4319:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CachedHandleResolver=void 0;const n=r(3350),s=r(868);t.CachedHandleResolver=class{constructor(e,t=new s.SimpleStoreMemory({max:1e3,ttl:6e5})){Object.defineProperty(this,"getter",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.getter=new n.CachedGetter(((t,r)=>e.resolve(t,r)),t)}async resolve(e,t){return this.getter.get(e,t)}}},3427:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,s)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),s(r(7810),t),s(r(6678),t),s(r(9370),t),s(r(3992),t),s(r(4319),t)},3498:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DnsHandleResolver=void 0;const n=r(7810),s="did=";t.DnsHandleResolver=class{constructor(e){Object.defineProperty(this,"resolveTxt",{enumerable:!0,configurable:!0,writable:!0,value:e})}async resolve(e){const t=await this.resolveTxt.call(null,`_atproto.${e}`);if(!t)return null;for(let e=0;e<t.length;e++){if(!t[e].startsWith(s))continue;for(let r=e+1;r<t.length;r++)if(t[r].startsWith(s))return null;const r=t[e].slice(4);return(0,n.isResolvedHandle)(r)?r:null}return null}}},7011:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WellKnownHandleResolver=void 0;const n=r(7810);t.WellKnownHandleResolver=class{constructor(e){Object.defineProperty(this,"fetch",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.fetch=e?.fetch??globalThis.fetch}async resolve(e,t){const r=new URL("/.well-known/atproto-did",`https://${e}`);try{const e=await this.fetch.call(null,r,{cache:t?.noCache?"no-cache":void 0,signal:t?.signal,redirect:"error"}),s=(await e.text()).split("\n")[0].trim();return(0,n.isResolvedHandle)(s)?s:null}catch(e){return t?.signal?.throwIfAborted(),null}}}},7810:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isResolvedHandle=function(e){return null===e||(0,n.isAtprotoDid)(e)};const n=r(6574)},2752:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.IdentityResolver=void 0;const n=r(3427),s=r(1163);function i(e){return"string"==typeof e.serviceEndpoint&&"AtprotoPersonalDataServer"===e.type&&(e.id.startsWith("#")?"#atproto_pds"===e.id:e.id===`${this.id}#atproto_pds`)}t.IdentityResolver=class{constructor(e,t){Object.defineProperty(this,"didResolver",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,"handleResolver",{enumerable:!0,configurable:!0,writable:!0,value:t})}async resolve(e,t){const r=(0,n.isResolvedHandle)(e)?await this.getDocumentFromDid(e,t):await this.getDocumentFromHandle(e,t),s=r.service?.find(i,r);if(!s)throw new TypeError(`No valid "AtprotoPersonalDataServer" service found in "${r.id}" DID document`);return{did:r.id,pds:new URL(s.serviceEndpoint)}}async getDocumentFromDid(e,t){return this.didResolver.resolve(e,t)}async getDocumentFromHandle(e,t){const r=(0,s.normalizeAndEnsureValidHandle)(e),n=await this.handleResolver.resolve(r,t);if(!n)throw new TypeError(`Handle "${r}" does not resolve to a DID`);t?.signal?.throwIfAborted();const i=await this.didResolver.resolve(n,t);if(!i.alsoKnownAs?.includes(`at://${r}`))throw new TypeError(`Did document for "${n}" does not include the handle "${r}"`);return i}}},9299:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,s)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),s(r(2752),t)},6672:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pipeTwo=t.pipe=void 0;var n=r(2122);Object.defineProperty(t,"pipe",{enumerable:!0,get:function(){return n.pipe}}),Object.defineProperty(t,"pipeTwo",{enumerable:!0,get:function(){return n.pipeTwo}})},2122:(e,t)=>{function r(e,t){return async r=>t(await e(r))}Object.defineProperty(t,"__esModule",{value:!0}),t.pipeTwo=t.pipe=void 0,t.pipe=function(...e){return e.reduce(r)},t.pipeTwo=r},868:function(e,t,r){var n,s=this&&this.__classPrivateFieldSet||function(e,t,r,n,s){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?s.call(e,r):s?s.value=r:t.set(e,r),r},i=this&&this.__classPrivateFieldGet||function(e,t,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(e):n?n.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.SimpleStoreMemory=void 0;const o=r(9096),a=r(7910),c=Symbol("nullItem"),d=e=>e===c?null:e;t.SimpleStoreMemory=class{constructor({sizeCalculation:e,...t}){n.set(this,void 0),s(this,n,new o.LRUCache({...t,allowStale:!1,updateAgeOnGet:!1,updateAgeOnHas:!1,sizeCalculation:e?(t,r)=>e(d(t),r):null!=t.maxEntrySize||null!=t.maxSize?a.roughSizeOfObject:void 0}),"f")}get(e){const t=i(this,n,"f").get(e);if(void 0!==t)return d(t)}set(e,t){i(this,n,"f").set(e,(e=>null===e?c:e)(t))}del(e){i(this,n,"f").delete(e)}clear(){i(this,n,"f").clear()}},n=new WeakMap},7910:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.roughSizeOfObject=void 0;const r=new WeakMap;t.roughSizeOfObject=function(e){const t=new Set,n=[e];let s=0;for(;n.length;){const e=n.pop();switch(typeof e){case"string":s+=12+4*Math.ceil(e.length/4);break;case"number":s+=12;break;case"boolean":s+=4;break;case"object":if(s+=4,null===e)break;if(r.has(e)){s+=r.get(e);break}if(t.has(e))continue;if(t.add(e),Array.isArray(e))s+=4,n.push(...e);else{s+=8;const t=Object.getOwnPropertyNames(e);for(let r=0;r<t.length;r++){s+=4;const i=t[r],o=e[i];void 0!==o&&n.push(o),n.push(i)}}break;case"function":case"symbol":s+=8;break;case"bigint":s+=16}}return"object"==typeof e&&null!==e&&r.set(e,s),s}},7228:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CachedGetter=void 0;const r=()=>!0,n=()=>!1;t.CachedGetter=class{constructor(e,t,r){Object.defineProperty(this,"getter",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,"store",{enumerable:!0,configurable:!0,writable:!0,value:t}),Object.defineProperty(this,"options",{enumerable:!0,configurable:!0,writable:!0,value:r}),Object.defineProperty(this,"pending",{enumerable:!0,configurable:!0,writable:!0,value:new Map})}async get(e,t){t?.signal?.throwIfAborted();const s=this.options?.isStale,i=t?.noCache?n:t?.allowStale||null==s?r:async t=>!await s(e,t);let o;for(;o=this.pending.get(e);){try{const{isFresh:e,value:t}=await o;if(e)return t;if(await i(t))return t}catch{}t?.signal?.throwIfAborted()}const a=Promise.resolve().then((async()=>{const r=await this.getStored(e,t);return void 0!==r&&await i(r)?{isFresh:!1,value:r}:Promise.resolve().then((async()=>(0,this.getter)(e,t,r))).catch((async t=>{if(void 0!==r)try{const n=this.options?.deleteOnError;await(n?.(t,e,r))&&await this.delStored(e,t)}catch(e){throw new AggregateError([t,e],"Error while deleting stored value")}throw t})).then((async t=>(await this.setStored(e,t),{isFresh:!0,value:t})))})).finally((()=>{this.pending.delete(e)}));if(this.pending.has(e))throw new Error("Concurrent request for the same key");this.pending.set(e,a);const{value:c}=await a;return c}bind(e){return async t=>this.get(e,t)}async getStored(e,t){try{return await this.store.get(e,t)}catch(e){return}}async setStored(e,t){try{await this.store.set(e,t)}catch(r){const n=this.options?.onStoreError;await(n?.(r,e,t))}}async delStored(e,t){await this.store.del(e)}}},3350:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,s)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),s(r(7228),t),s(r(4586),t)},4586:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},991:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.atprotoDidSchema=void 0,t.isAtprotoDid=o,t.asAtprotoDid=function(e){return a(e),e},t.assertAtprotoDid=a,t.assertAtprotoDidWeb=c,t.isAtprotoDidWeb=d;const n=r(1614),s=r(7760),i=r(7492);function o(e){return"string"==typeof e&&(e.startsWith(i.DID_PLC_PREFIX)?(0,i.isDidPlc)(e):!!e.startsWith(i.DID_WEB_PREFIX)&&d(e))}function a(e){if("string"!=typeof e)throw new s.InvalidDidError(typeof e,"DID must be a string");if(e.startsWith(i.DID_PLC_PREFIX))(0,i.assertDidPlc)(e);else{if(!e.startsWith(i.DID_WEB_PREFIX))throw new s.InvalidDidError(e,'Atproto only allows "plc" and "web" DID methods');c(e)}}function c(e){if((0,i.assertDidWeb)(e),e.includes(":",i.DID_WEB_PREFIX.length))throw new s.InvalidDidError(e,"Atproto does not allow path components in Web DIDs");if(e.includes("%3A",i.DID_WEB_PREFIX.length)&&!e.startsWith("did:web:localhost%3A"))throw new s.InvalidDidError(e,"Atproto does not allow port numbers in Web DIDs, except for localhost")}function d(e){try{return c(e),!0}catch{return!1}}t.atprotoDidSchema=n.z.string().refine(o,'Atproto only allows "plc" and "web" DID methods')},9665:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.didDocumentValidator=t.didDocumentSchema=void 0;const n=r(1614),s=r(9707),i=n.z.string().refine((e=>{try{return new URL(e),!0}catch{return!1}}),"RFC3968 compliant URI"),o=n.z.union([s.didSchema,n.z.array(s.didSchema)]),a=n.z.union([i,n.z.string().regex(/^#[^#]+$/)]),c=n.z.object({id:a,type:n.z.string().min(1),controller:o,publicKeyJwk:n.z.record(n.z.string(),n.z.unknown()).optional(),publicKeyMultibase:n.z.string().optional()}),d=a,l=n.z.union([n.z.string(),n.z.array(n.z.string())]),u=n.z.union([i,n.z.record(n.z.string(),i),n.z.array(n.z.union([i,n.z.record(n.z.string(),i)])).nonempty()]),h=n.z.object({id:d,type:l,serviceEndpoint:u}),p=n.z.union([a,c]);t.didDocumentSchema=n.z.object({"@context":n.z.union([n.z.literal("https://www.w3.org/ns/did/v1"),n.z.array(n.z.string().url()).nonempty().refine((e=>"https://www.w3.org/ns/did/v1"===e[0]),{message:"First @context must be https://www.w3.org/ns/did/v1"})]),id:s.didSchema,controller:o.optional(),alsoKnownAs:n.z.array(i).optional(),service:n.z.array(h).optional(),authentication:n.z.array(p).optional(),verificationMethod:n.z.array(n.z.union([c,a])).optional()}),t.didDocumentValidator=t.didDocumentSchema.superRefine((({id:e,service:t},r)=>{if(t){const s=new Set;for(let i=0;i<t.length;i++){const o=t[i],a=o.id.startsWith("#")?`${e}${o.id}`:o.id;s.has(a)?r.addIssue({code:n.z.ZodIssueCode.custom,message:`Duplicate service id (${o.id}) found in the document`,path:["service",i,"id"]}):s.add(a)}}}))},7760:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InvalidDidError=t.DidError=void 0;class r extends Error{constructor(e,t,r,n=400,s){super(t,{cause:s}),Object.defineProperty(this,"did",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,"code",{enumerable:!0,configurable:!0,writable:!0,value:r}),Object.defineProperty(this,"status",{enumerable:!0,configurable:!0,writable:!0,value:n})}get statusCode(){return this.status}toString(){return`${this.constructor.name} ${this.code} (${this.did}): ${this.message}`}static from(e,t){if(e instanceof r)return e;const n=e instanceof Error?e.message:"string"==typeof e?e:"An unknown error occurred",s=("number"==typeof e?.statusCode?e.statusCode:void 0)??("number"==typeof e?.status?e.status:void 0);return new r(t,n,"did-unknown-error",s,e)}}t.DidError=r,t.InvalidDidError=class extends r{constructor(e,t,r){super(e,t,"did-invalid",400,r)}}},9707:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.didSchema=t.DID_PREFIX=void 0,t.assertDidMethod=a,t.extractDidMethod=function(e){const t=e.indexOf(":",o);return e.slice(o,t)},t.assertDidMsid=c,t.assertDid=d,t.isDid=function(e){try{return d(e),!0}catch(e){if(e instanceof s.DidError)return!1;throw e}},t.asDid=function(e){return d(e),e};const n=r(1614),s=r(7760),i="did:";t.DID_PREFIX=i;const o=i.length;function a(e,t=0,r=e.length){if(!Number.isFinite(r)||!Number.isFinite(t)||r<t||r>e.length)throw new TypeError("Invalid start or end position");if(r===t)throw new s.InvalidDidError(e,"Empty method name");let n;for(let i=t;i<r;i++)if(n=e.charCodeAt(i),(n<97||n>122)&&(n<48||n>57))throw new s.InvalidDidError(e,`Invalid character at position ${i} in DID method name`)}function c(e,t=0,r=e.length){if(!Number.isFinite(r)||!Number.isFinite(t)||r<t||r>e.length)throw new TypeError("Invalid start or end position");if(r===t)throw new s.InvalidDidError(e,"DID method-specific id must not be empty");let n;for(let i=t;i<r;i++)if(n=e.charCodeAt(i),(n<97||n>122)&&(n<65||n>90)&&(n<48||n>57)&&46!==n&&45!==n&&95!==n){if(58===n){if(i===r-1)throw new s.InvalidDidError(e,'DID cannot end with ":"');continue}if(37===n){if(n=e.charCodeAt(++i),(n<48||n>57)&&(n<65||n>70))throw new s.InvalidDidError(e,`Invalid pct-encoded character at position ${i}`);if(n=e.charCodeAt(++i),(n<48||n>57)&&(n<65||n>70))throw new s.InvalidDidError(e,`Invalid pct-encoded character at position ${i}`);if(i>=r)throw new s.InvalidDidError(e,"Incomplete pct-encoded character at position "+(i-2));continue}throw new s.InvalidDidError(e,`Disallowed character in DID at position ${i}`)}}function d(e){if("string"!=typeof e)throw new s.InvalidDidError(typeof e,"DID must be a string");const{length:t}=e;if(t>2048)throw new s.InvalidDidError(e,"DID is too long (2048 chars max)");if(!e.startsWith(i))throw new s.InvalidDidError(e,`DID requires "${i}" prefix`);const r=e.indexOf(":",o);if(-1===r)throw new s.InvalidDidError(e,"Missing colon after method name");a(e,o,r),c(e,r+1,t)}t.didSchema=n.z.string().superRefine(((e,t)=>{try{return d(e),!0}catch(e){return t.addIssue({code:n.z.ZodIssueCode.custom,message:e instanceof Error?e.message:"Unexpected error"}),!1}}))},6574:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,s)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),s(r(991),t),s(r(9665),t),s(r(7760),t),s(r(9707),t),s(r(7492),t)},7492:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,s)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),s(r(1950),t),s(r(7441),t)},1950:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DID_PLC_PREFIX=void 0,t.isDidPlc=function(e){if("string"!=typeof e)return!1;if(e.length!==o)return!1;if(!e.startsWith(s))return!1;for(let t=i;t<o;t++)if(!c(e.charCodeAt(t)))return!1;return!0},t.asDidPlc=function(e){return a(e),e},t.assertDidPlc=a;const n=r(7760),s="did:plc:";t.DID_PLC_PREFIX=s;const i=s.length,o=32;function a(e){if("string"!=typeof e)throw new n.InvalidDidError(typeof e,"DID must be a string");if(e.length!==o)throw new n.InvalidDidError(e,`did:plc must be ${o} characters long`);if(!e.startsWith(s))throw new n.InvalidDidError(e,"Invalid did:plc prefix");for(let t=i;t<o;t++)if(!c(e.charCodeAt(t)))throw new n.InvalidDidError(e,`Invalid character at position ${t}`)}const c=e=>e>=97&&e<=122||e>=50&&e<=55},7441:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DID_WEB_PREFIX=void 0,t.isDidWeb=function(e){if("string"!=typeof e)return!1;try{return i(e),!0}catch{return!1}},t.asDidWeb=function(e){return i(e),e},t.assertDidWeb=i,t.didWebToUrl=o,t.urlToDidWeb=function(e){const t="/"===e.pathname?"":e.pathname.slice(1).split("/").map(encodeURIComponent).join(":");return`did:web:${encodeURIComponent(e.host)}${t?`:${t}`:""}`};const n=r(7760),s=r(9707);function i(e){if("string"!=typeof e)throw new n.InvalidDidError(typeof e,"DID must be a string");o(e)}function o(e){if(!e.startsWith(t.DID_WEB_PREFIX))throw new n.InvalidDidError(e,`did:web must start with ${t.DID_WEB_PREFIX}`);if(":"===e.charAt(t.DID_WEB_PREFIX.length))throw new n.InvalidDidError(e,"did:web MSID must not start with a colon");(0,s.assertDidMsid)(e,t.DID_WEB_PREFIX.length);try{const r=e.slice(t.DID_WEB_PREFIX.length).split(":").map(decodeURIComponent),n=new URL(`https://${r.join("/")}`);return"localhost"===n.hostname&&(n.protocol="http:"),n}catch(t){throw new n.InvalidDidError(e,"Invalid Web DID",t)}}t.DID_WEB_PREFIX="did:web:"},5113:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,s)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),s(r(1996),t)},1996:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.JoseKey=void 0;const n=r(5909),s=r(5948),i=r(5909),o=r(4401),{JOSEError:a}=s.errors;class c extends i.Key{#e;async getKey(){try{return this.#e||=await(0,s.importJWK)(this.jwk)}catch(e){throw new i.JwkError("Failed to import JWK",void 0,{cause:e})}}async createJwt(e,t){if(e.kid&&e.kid!==this.kid)throw new i.JwtCreateError(`Invalid "kid" (${e.kid}) used to sign with key "${this.kid}"`);if(!e.alg||!this.algorithms.includes(e.alg))throw new i.JwtCreateError(`Invalid "alg" (${e.alg}) used to sign with key "${this.kid}"`);const r=await this.getKey();return new s.SignJWT(t).setProtectedHeader({...e,kid:this.kid}).sign(r)}async verifyJwt(e,t){try{const r=await this.getKey();return await(0,s.jwtVerify)(e,r,{...t,algorithms:this.algorithms})}catch(e){throw e instanceof a?new n.JwtVerifyError(e.message,e.code,{cause:e}):n.JwtVerifyError.from(e)}}static async generateKeyPair(e=["ES256"],t){if(!e.length)throw new i.JwkError("No algorithms provided for key generation");const r=[];for(const n of e)try{return await(0,s.generateKeyPair)(n,t)}catch(e){r.push(e)}throw new i.JwkError("Failed to generate key pair",void 0,{cause:new AggregateError(r,"None of the algorithms worked")})}static async generate(e=["ES256"],t,r){const n=await this.generateKeyPair(e,{...r,extractable:!0});return this.fromImportable(n.privateKey,t)}static async fromImportable(e,t){if("string"==typeof e){if(e.startsWith("-----"))return this.fromPKCS8(e,"",t);if(e.startsWith("{"))return this.fromJWK(e,t);throw new i.JwkError("Invalid input")}if("object"==typeof e)return"kty"in e||"alg"in e?this.fromJWK(e,t):this.fromKeyLike(e,t);throw new i.JwkError("Invalid input")}static async fromKeyLike(e,t,r){const n=await(0,s.exportJWK)(e);if(r)if(n.alg){if(n.alg!==r)throw new i.JwkError('Invalid "alg" in JWK')}else n.alg=r;return this.fromJWK(n,t)}static async fromPKCS8(e,t,r){const n=await(0,s.importPKCS8)(e,t,{extractable:!0});return this.fromKeyLike(n,r)}static async fromJWK(e,t){const r="string"==typeof e?JSON.parse(e):e;if(!r||"object"!=typeof r)throw new i.JwkError("Invalid JWK");const n=(0,o.either)(r.kid,t),s=r.use||"sig";return new c(i.jwkValidator.parse({...r,kid:n,use:s}))}}t.JoseKey=c},4401:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.either=void 0,t.either=function(e,t){if(null!=e&&null!=t&&e!==t)throw new TypeError(`Expected "${t}", got "${e}"`);return e??t??void 0}},1475:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,s)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),s(r(5202),t)},3435:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isCryptoKeyPair=t.fromSubtleAlgorithm=t.toSubtleAlgorithm=void 0,t.toSubtleAlgorithm=function(e,t,r){switch(e){case"PS256":case"PS384":case"PS512":return{name:"RSA-PSS",hash:`SHA-${e.slice(-3)}`,modulusLength:r?.modulusLength??2048,publicExponent:new Uint8Array([1,0,1])};case"RS256":case"RS384":case"RS512":return{name:"RSASSA-PKCS1-v1_5",hash:`SHA-${e.slice(-3)}`,modulusLength:r?.modulusLength??2048,publicExponent:new Uint8Array([1,0,1])};case"ES256":case"ES384":return{name:"ECDSA",namedCurve:`P-${e.slice(-3)}`};case"ES512":return{name:"ECDSA",namedCurve:"P-521"};default:throw new TypeError(`Unsupported alg "${e}"`)}},t.fromSubtleAlgorithm=function(e){switch(e.name){case"RSA-PSS":case"RSASSA-PKCS1-v1_5":{const t=e.hash.name;switch(t){case"SHA-256":case"SHA-384":case"SHA-512":return`${"RSA-PSS"===e.name?"PS":"RS"}${t.slice(-3)}`;default:throw new TypeError("unsupported RsaHashedKeyAlgorithm hash")}}case"ECDSA":{const t=e.namedCurve;switch(t){case"P-256":case"P-384":case"P-512":return`ES${t.slice(-3)}`;case"P-521":return"ES512";default:throw new TypeError("unsupported EcKeyAlgorithm namedCurve")}}case"Ed448":case"Ed25519":return"EdDSA";default:throw new TypeError(`Unexpected algorithm "${e.name}"`)}},t.isCryptoKeyPair=function(e,t){return"object"==typeof e&&null!==e&&"privateKey"in e&&e.privateKey instanceof CryptoKey&&"private"===e.privateKey.type&&(null==t||e.privateKey.extractable===t)&&e.privateKey.usages.includes("sign")&&"publicKey"in e&&e.publicKey instanceof CryptoKey&&"public"===e.publicKey.type&&!0===e.publicKey.extractable&&e.publicKey.usages.includes("verify")}},5202:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WebcryptoKey=void 0;const n=r(5909),s=r(5113),i=r(3435);class o extends s.JoseKey{static async generate(e=["ES256"],t=crypto.randomUUID(),r){const n=await this.generateKeyPair(e,r);if(!(0,i.isCryptoKeyPair)(n))throw new TypeError("Invalid CryptoKeyPair");return this.fromKeypair(n,t)}static async fromKeypair(e,t){const{key_ops:r,...s}=await crypto.subtle.exportKey("jwk",e.privateKey.extractable?e.privateKey:e.publicKey),a=s.use??"sig",c=s.alg??(0,i.fromSubtleAlgorithm)(e.privateKey.algorithm);if("sig"!==a)throw new TypeError("Unsupported JWK use");return new o(n.jwkSchema.parse({...s,use:a,kid:t,alg:c}),e)}constructor(e,t){super(e),Object.defineProperty(this,"cryptoKeyPair",{enumerable:!0,configurable:!0,writable:!0,value:t})}get isPrivate(){return!0}get privateJwk(){if(super.isPrivate)return this.jwk;throw new Error("Private Webcrypto Key not exportable")}async getKey(){return this.cryptoKeyPair.privateKey}}t.WebcryptoKey=o},9371:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.jwkAlgorithms=void 0;const n=r(394),{process:s}=globalThis,i=void 0!==s&&"string"==typeof s?.versions?.node;t.jwkAlgorithms=function*(e){if(e.alg)yield e.alg;else switch(e.kty){case"EC":if("enc"!==e.use&&void 0!==e.use||(yield"ECDH-ES",yield"ECDH-ES+A128KW",yield"ECDH-ES+A192KW",yield"ECDH-ES+A256KW"),"sig"===e.use||void 0===e.use){const t="crv"in e?e.crv:void 0;switch(t){case"P-256":case"P-384":yield`ES${t.slice(-3)}`;break;case"P-521":yield"ES512";break;case"secp256k1":i&&(yield"ES256K");break;default:throw new n.JwkError(`Unsupported crv "${t}"`)}}return;case"OKP":if(!e.use)throw new n.JwkError('Missing "use" Parameter value');return yield"ECDH-ES",yield"ECDH-ES+A128KW",yield"ECDH-ES+A192KW",void(yield"ECDH-ES+A256KW");case"RSA":return"enc"!==e.use&&void 0!==e.use||(yield"RSA-OAEP",yield"RSA-OAEP-256",yield"RSA-OAEP-384",yield"RSA-OAEP-512",i&&(yield"RSA1_5")),void("sig"!==e.use&&void 0!==e.use||(yield"PS256",yield"PS384",yield"PS512",yield"RS256",yield"RS384",yield"RS512"));case"oct":return"enc"!==e.use&&void 0!==e.use||(yield"A128GCMKW",yield"A192GCMKW",yield"A256GCMKW",yield"A128KW",yield"A192KW",yield"A256KW"),void("sig"!==e.use&&void 0!==e.use||(yield"HS256",yield"HS384",yield"HS512"));default:throw new n.JwkError(`Unsupported kty "${e.kty}"`)}}},394:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.JwtVerifyError=t.JwtCreateError=t.JwkError=t.ERR_JWT_VERIFY=t.ERR_JWT_CREATE=t.ERR_JWT_INVALID=t.ERR_JWK_NOT_FOUND=t.ERR_JWK_INVALID=t.ERR_JWKS_NO_MATCHING_KEY=void 0,t.ERR_JWKS_NO_MATCHING_KEY="ERR_JWKS_NO_MATCHING_KEY",t.ERR_JWK_INVALID="ERR_JWK_INVALID",t.ERR_JWK_NOT_FOUND="ERR_JWK_NOT_FOUND",t.ERR_JWT_INVALID="ERR_JWT_INVALID",t.ERR_JWT_CREATE="ERR_JWT_CREATE",t.ERR_JWT_VERIFY="ERR_JWT_VERIFY";class r extends TypeError{constructor(e="JWK error",r=t.ERR_JWK_INVALID,n){super(e,n),Object.defineProperty(this,"code",{enumerable:!0,configurable:!0,writable:!0,value:r})}}t.JwkError=r;class n extends Error{constructor(e="Unable to create JWT",r=t.ERR_JWT_CREATE,n){super(e,n),Object.defineProperty(this,"code",{enumerable:!0,configurable:!0,writable:!0,value:r})}static from(e,t,s){return e instanceof n?e:new n(s,e instanceof r?e.code:t,{cause:e})}}t.JwtCreateError=n;class s extends Error{constructor(e="Invalid JWT",r=t.ERR_JWT_VERIFY,n){super(e,n),Object.defineProperty(this,"code",{enumerable:!0,configurable:!0,writable:!0,value:r})}static from(e,t,n){return e instanceof s?e:new s(n,e instanceof r?e.code:t,{cause:e})}}t.JwtVerifyError=s},5909:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,s)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),s(r(9371),t),s(r(394),t),s(r(4937),t),s(r(4364),t),s(r(5135),t),s(r(2836),t),s(r(9940),t),s(r(3318),t),s(r(2416),t),s(r(3237),t)},4937:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.jwkPubSchema=t.jwkValidator=t.jwkSchema=t.jwkUnknownKeySchema=t.jwkSymKeySchema=t.jwkOkpKeySchema=t.jwkEcSecp256k1KeySchema=t.jwkEcKeySchema=t.jwkRsaKeySchema=t.jwkBaseSchema=t.keyUsageSchema=void 0;const n=r(1614);t.keyUsageSchema=n.z.enum(["sign","verify","encrypt","decrypt","wrapKey","unwrapKey","deriveKey","deriveBits"]),t.jwkBaseSchema=n.z.object({kty:n.z.string().min(1),alg:n.z.string().min(1).optional(),kid:n.z.string().min(1).optional(),ext:n.z.boolean().optional(),use:n.z.enum(["sig","enc"]).optional(),key_ops:n.z.array(t.keyUsageSchema).optional(),x5c:n.z.array(n.z.string()).optional(),x5t:n.z.string().min(1).optional(),"x5t#S256":n.z.string().min(1).optional(),x5u:n.z.string().url().optional()}),t.jwkRsaKeySchema=t.jwkBaseSchema.extend({kty:n.z.literal("RSA"),alg:n.z.enum(["RS256","RS384","RS512","PS256","PS384","PS512"]).optional(),n:n.z.string().min(1),e:n.z.string().min(1),d:n.z.string().min(1).optional(),p:n.z.string().min(1).optional(),q:n.z.string().min(1).optional(),dp:n.z.string().min(1).optional(),dq:n.z.string().min(1).optional(),qi:n.z.string().min(1).optional(),oth:n.z.array(n.z.object({r:n.z.string().optional(),d:n.z.string().optional(),t:n.z.string().optional()})).nonempty().optional()}),t.jwkEcKeySchema=t.jwkBaseSchema.extend({kty:n.z.literal("EC"),alg:n.z.enum(["ES256","ES384","ES512"]).optional(),crv:n.z.enum(["P-256","P-384","P-521"]),x:n.z.string().min(1),y:n.z.string().min(1),d:n.z.string().min(1).optional()}),t.jwkEcSecp256k1KeySchema=t.jwkBaseSchema.extend({kty:n.z.literal("EC"),alg:n.z.enum(["ES256K"]).optional(),crv:n.z.enum(["secp256k1"]),x:n.z.string().min(1),y:n.z.string().min(1),d:n.z.string().min(1).optional()}),t.jwkOkpKeySchema=t.jwkBaseSchema.extend({kty:n.z.literal("OKP"),alg:n.z.enum(["EdDSA"]).optional(),crv:n.z.enum(["Ed25519","Ed448"]),x:n.z.string().min(1),d:n.z.string().min(1).optional()}),t.jwkSymKeySchema=t.jwkBaseSchema.extend({kty:n.z.literal("oct"),alg:n.z.enum(["HS256","HS384","HS512"]).optional(),k:n.z.string()}),t.jwkUnknownKeySchema=t.jwkBaseSchema.extend({kty:n.z.string().refine((e=>"RSA"!==e&&"EC"!==e&&"OKP"!==e&&"oct"!==e))}),t.jwkSchema=n.z.union([t.jwkUnknownKeySchema,t.jwkRsaKeySchema,t.jwkEcKeySchema,t.jwkEcSecp256k1KeySchema,t.jwkOkpKeySchema,t.jwkSymKeySchema]),t.jwkValidator=t.jwkSchema.refine((e=>null!=e.use||null!=e.key_ops),"use or key_ops required").refine((e=>!e.use||!e.key_ops||e.key_ops.every((t=>"sig"===e.use?"sign"===t||"verify"===t:"encrypt"===t||"decrypt"===t))),"use and key_ops must be consistent"),t.jwkPubSchema=t.jwkValidator.refine((e=>null!=e.kid),"kid is required").refine((e=>!("k"in e)&&!("d"in e)),"private key not allowed")},4364:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.jwksPubSchema=t.jwksSchema=void 0;const n=r(1614),s=r(4937);t.jwksSchema=n.z.object({keys:n.z.array(s.jwkSchema)}),t.jwksPubSchema=n.z.object({keys:n.z.array(s.jwkPubSchema)})},5135:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.unsafeDecodeJwt=void 0;const n=r(394),s=r(9940),i=r(3237);t.unsafeDecodeJwt=function(e){const{0:t,1:r,length:o}=e.split(".");if(o>3||o<2)throw new n.JwtVerifyError(void 0,n.ERR_JWT_INVALID);const a=s.jwtHeaderSchema.parse((0,i.parseB64uJson)(t));if(2===o&&"none"!==a?.alg)throw new n.JwtVerifyError(void 0,n.ERR_JWT_INVALID);return{header:a,payload:s.jwtPayloadSchema.parse((0,i.parseB64uJson)(r))}}},2836:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},9940:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.jwtPayloadSchema=t.jwtHeaderSchema=t.isUnsignedJwt=t.unsignedJwtSchema=t.isSignedJwt=t.signedJwtSchema=void 0;const n=r(1614),s=r(4937),i=r(3237);t.signedJwtSchema=n.z.string().superRefine(i.jwtCharsRefinement).superRefine((0,i.segmentedStringRefinementFactory)(3)),t.isSignedJwt=e=>t.signedJwtSchema.safeParse(e).success,t.unsignedJwtSchema=n.z.string().superRefine(i.jwtCharsRefinement).superRefine((0,i.segmentedStringRefinementFactory)(2)),t.isUnsignedJwt=e=>t.unsignedJwtSchema.safeParse(e).success,t.jwtHeaderSchema=n.z.object({alg:n.z.string(),jku:n.z.string().url().optional(),jwk:n.z.object({kty:n.z.string(),crv:n.z.string().optional(),x:n.z.string().optional(),y:n.z.string().optional(),e:n.z.string().optional(),n:n.z.string().optional()}).optional(),kid:n.z.string().optional(),x5u:n.z.string().optional(),x5c:n.z.array(n.z.string()).optional(),x5t:n.z.string().optional(),"x5t#S256":n.z.string().optional(),typ:n.z.string().optional(),cty:n.z.string().optional(),crit:n.z.array(n.z.string()).optional()}),t.jwtPayloadSchema=n.z.object({iss:n.z.string().optional(),aud:n.z.union([n.z.string(),n.z.array(n.z.string()).nonempty()]).optional(),sub:n.z.string().optional(),exp:n.z.number().int().optional(),nbf:n.z.number().int().optional(),iat:n.z.number().int().optional(),jti:n.z.string().optional(),htm:n.z.string().optional(),htu:n.z.string().optional(),ath:n.z.string().optional(),acr:n.z.string().optional(),azp:n.z.string().optional(),amr:n.z.array(n.z.string()).optional(),cnf:n.z.object({kid:n.z.string().optional(),jwk:s.jwkPubSchema.optional(),jwe:n.z.string().optional(),jku:n.z.string().url().optional(),jkt:n.z.string().optional(),"x5t#S256":n.z.string().optional(),osc:n.z.string().optional()}).optional(),client_id:n.z.string().optional(),scope:n.z.string().optional(),nonce:n.z.string().optional(),at_hash:n.z.string().optional(),c_hash:n.z.string().optional(),s_hash:n.z.string().optional(),auth_time:n.z.number().int().optional(),name:n.z.string().optional(),family_name:n.z.string().optional(),given_name:n.z.string().optional(),middle_name:n.z.string().optional(),nickname:n.z.string().optional(),preferred_username:n.z.string().optional(),gender:n.z.string().optional(),picture:n.z.string().url().optional(),profile:n.z.string().url().optional(),website:n.z.string().url().optional(),birthdate:n.z.string().regex(/\d{4}-\d{2}-\d{2}/).optional(),zoneinfo:n.z.string().regex(/^[A-Za-z0-9_/]+$/).optional(),locale:n.z.string().regex(/^[a-z]{2}(-[A-Z]{2})?$/).optional(),updated_at:n.z.number().int().optional(),email:n.z.string().optional(),email_verified:n.z.boolean().optional(),phone_number:n.z.string().optional(),phone_number_verified:n.z.boolean().optional(),address:n.z.object({formatted:n.z.string().optional(),street_address:n.z.string().optional(),locality:n.z.string().optional(),region:n.z.string().optional(),postal_code:n.z.string().optional(),country:n.z.string().optional()}).optional(),authorization_details:n.z.array(n.z.object({type:n.z.string(),locations:n.z.array(n.z.string()).optional(),actions:n.z.array(n.z.string()).optional(),datatypes:n.z.array(n.z.string()).optional(),identifier:n.z.string().optional(),privileges:n.z.array(n.z.string()).optional()}).passthrough()).optional()})},3318:function(e,t,r){var n=this&&this.__runInitializers||function(e,t,r){for(var n=arguments.length>2,s=0;s<t.length;s++)r=n?t[s].call(e,r):t[s].call(e);return n?r:void 0},s=this&&this.__esDecorate||function(e,t,r,n,s,i){function o(e){if(void 0!==e&&"function"!=typeof e)throw new TypeError("Function expected");return e}for(var a,c=n.kind,d="getter"===c?"get":"setter"===c?"set":"value",l=!t&&e?n.static?e:e.prototype:null,u=t||(l?Object.getOwnPropertyDescriptor(l,n.name):{}),h=!1,p=r.length-1;p>=0;p--){var f={};for(var y in n)f[y]="access"===y?{}:n[y];for(var y in n.access)f.access[y]=n.access[y];f.addInitializer=function(e){if(h)throw new TypeError("Cannot add initializers after decoration has completed");i.push(o(e||null))};var m=(0,r[p])("accessor"===c?{get:u.get,set:u.set}:u[d],f);if("accessor"===c){if(void 0===m)continue;if(null===m||"object"!=typeof m)throw new TypeError("Object expected");(a=o(m.get))&&(u.get=a),(a=o(m.set))&&(u.set=a),(a=o(m.init))&&s.unshift(a)}else(a=o(m))&&("field"===c?s.unshift(a):u[d]=a)}l&&Object.defineProperty(l,n.name,u),h=!0};Object.defineProperty(t,"__esModule",{value:!0}),t.Key=void 0;const i=r(9371),o=r(394),a=r(4937),c=r(3237);let d=(()=>{var e;let t,r,d,l=[];return e=class{constructor(e){if(Object.defineProperty(this,"jwk",{enumerable:!0,configurable:!0,writable:!0,value:(n(this,l),e)}),!e.use)throw new o.JwkError('Missing "use" Parameter value')}get isPrivate(){const{jwk:e}=this;return"d"in e&&void 0!==e.d||"k"in e&&void 0!==e.k}get isSymetric(){const{jwk:e}=this;return"k"in e&&void 0!==e.k}get privateJwk(){return this.isPrivate?this.jwk:void 0}get publicJwk(){if(!this.isSymetric){if(this.isPrivate){const{d:e,...t}=this.jwk;return t}return this.jwk}}get bareJwk(){if(this.isSymetric)return;const{kty:e,crv:t,e:r,n,x:s,y:i}=this.jwk;return a.jwkSchema.parse({crv:t,e:r,kty:e,n,x:s,y:i})}get use(){return this.jwk.use}get alg(){return this.jwk.alg}get kid(){return this.jwk.kid}get crv(){return this.jwk.crv}get algorithms(){return Array.from((0,i.jwkAlgorithms)(this.jwk))}},(()=>{const n="function"==typeof Symbol&&Symbol.metadata?Object.create(null):void 0;t=[c.cachedGetter],r=[c.cachedGetter],d=[c.cachedGetter],s(e,null,t,{kind:"getter",name:"publicJwk",static:!1,private:!1,access:{has:e=>"publicJwk"in e,get:e=>e.publicJwk},metadata:n},null,l),s(e,null,r,{kind:"getter",name:"bareJwk",static:!1,private:!1,access:{has:e=>"bareJwk"in e,get:e=>e.bareJwk},metadata:n},null,l),s(e,null,d,{kind:"getter",name:"algorithms",static:!1,private:!1,access:{has:e=>"algorithms"in e,get:e=>e.algorithms},metadata:n},null,l),n&&Object.defineProperty(e,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:n})})(),e})();t.Key=d},2416:function(e,t,r){var n=this&&this.__runInitializers||function(e,t,r){for(var n=arguments.length>2,s=0;s<t.length;s++)r=n?t[s].call(e,r):t[s].call(e);return n?r:void 0},s=this&&this.__esDecorate||function(e,t,r,n,s,i){function o(e){if(void 0!==e&&"function"!=typeof e)throw new TypeError("Function expected");return e}for(var a,c=n.kind,d="getter"===c?"get":"setter"===c?"set":"value",l=!t&&e?n.static?e:e.prototype:null,u=t||(l?Object.getOwnPropertyDescriptor(l,n.name):{}),h=!1,p=r.length-1;p>=0;p--){var f={};for(var y in n)f[y]="access"===y?{}:n[y];for(var y in n.access)f.access[y]=n.access[y];f.addInitializer=function(e){if(h)throw new TypeError("Cannot add initializers after decoration has completed");i.push(o(e||null))};var m=(0,r[p])("accessor"===c?{get:u.get,set:u.set}:u[d],f);if("accessor"===c){if(void 0===m)continue;if(null===m||"object"!=typeof m)throw new TypeError("Object expected");(a=o(m.get))&&(u.get=a),(a=o(m.set))&&(u.set=a),(a=o(m.init))&&s.unshift(a)}else(a=o(m))&&("field"===c?s.unshift(a):u[d]=a)}l&&Object.defineProperty(l,n.name,u),h=!0};Object.defineProperty(t,"__esModule",{value:!0}),t.Keyset=void 0;const i=r(394),o=r(5135),a=r(3237),c=e=>e.privateJwk,d=e=>e.publicJwk;let l=(()=>{var e;let t,r,l,u=[];return e=class{constructor(t,r=(t instanceof e?[...t.preferredSigningAlgorithms]:["EdDSA","ES256K","ES256","PS256","PS384","PS512","HS256","HS384","HS512"])){Object.defineProperty(this,"preferredSigningAlgorithms",{enumerable:!0,configurable:!0,writable:!0,value:(n(this,u),r)}),Object.defineProperty(this,"keys",{enumerable:!0,configurable:!0,writable:!0,value:void 0});const s=[],o=new Set;for(const e of t)if(e&&(s.push(e),e.kid)){if(o.has(e.kid))throw new i.JwkError(`Duplicate key: ${e.kid}`);o.add(e.kid)}this.keys=Object.freeze(s)}get size(){return this.keys.length}get signAlgorithms(){const e=new Set;for(const t of this)if("sig"===t.use)for(const r of t.algorithms)e.add(r);return Object.freeze([...e].sort((0,a.preferredOrderCmp)(this.preferredSigningAlgorithms)))}get publicJwks(){return{keys:Array.from(this,d).filter(a.isDefined)}}get privateJwks(){return{keys:Array.from(this,c).filter(a.isDefined)}}has(e){return this.keys.some((t=>t.kid===e))}get(e){for(const t of this.list(e))return t;throw new i.JwkError(`Key not found ${e.kid||e.alg||"<unknown>"}`,i.ERR_JWK_NOT_FOUND)}*list(e){if(0!==e.kid?.length&&0!==e.alg?.length)for(const t of this)if(!e.use||t.use===e.use){if(Array.isArray(e.kid)){if(!t.kid||!e.kid.includes(t.kid))continue}else if(e.kid&&t.kid!==e.kid)continue;if(Array.isArray(e.alg)){if(!e.alg.some((e=>t.algorithms.includes(e))))continue}else if("string"==typeof e.alg&&!t.algorithms.includes(e.alg))continue;yield t}}findKey({kid:e,alg:t,use:r}){const n=[];for(const s of this.list({kid:e,alg:t,use:r}))if(s.isPrivate){if("string"==typeof t)return[s,t];n.push(s)}const s=(0,a.matchesAny)(t),o=n.map((e=>[e,e.algorithms.filter(s)]));for(const e of this.preferredSigningAlgorithms)for(const[t,r]of o)if(r.includes(e))return[t,e];for(const[e,t]of o)for(const r of t)return[e,r];throw new i.JwkError(`No singing key found for ${e||t||r||"<unknown>"}`,i.ERR_JWK_NOT_FOUND)}[(t=[a.cachedGetter],r=[a.cachedGetter],l=[a.cachedGetter],Symbol.iterator)](){return this.keys.values()}async createJwt({alg:e,kid:t,...r},n){try{const[s,i]=this.findKey({alg:e,kid:t,use:"sig"}),o={...r,alg:i,kid:s.kid};return"function"==typeof n&&(n=await n(o,s)),await s.createJwt(o,n)}catch(e){throw i.JwtCreateError.from(e)}}async verifyJwt(e,t){const{header:r}=(0,o.unsafeDecodeJwt)(e),{kid:n,alg:s}=r,a=[];for(const r of this.list({kid:n,alg:s}))try{return{...await r.verifyJwt(e,t),key:r}}catch(e){a.push(e)}switch(a.length){case 0:throw new i.JwtVerifyError("No key matched",i.ERR_JWKS_NO_MATCHING_KEY);case 1:throw i.JwtVerifyError.from(a[0],i.ERR_JWT_INVALID);default:throw i.JwtVerifyError.from(a,i.ERR_JWT_INVALID)}}toJSON(){return structuredClone(this.publicJwks)}},(()=>{const n="function"==typeof Symbol&&Symbol.metadata?Object.create(null):void 0;s(e,null,t,{kind:"getter",name:"signAlgorithms",static:!1,private:!1,access:{has:e=>"signAlgorithms"in e,get:e=>e.signAlgorithms},metadata:n},null,u),s(e,null,r,{kind:"getter",name:"publicJwks",static:!1,private:!1,access:{has:e=>"publicJwks"in e,get:e=>e.publicJwks},metadata:n},null,u),s(e,null,l,{kind:"getter",name:"privateJwks",static:!1,private:!1,access:{has:e=>"privateJwks"in e,get:e=>e.privateJwks},metadata:n},null,u),n&&Object.defineProperty(e,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:n})})(),e})();t.Keyset=l},3237:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.segmentedStringRefinementFactory=t.jwtCharsRefinement=t.parseB64uJson=t.cachedGetter=t.matchesAny=t.preferredOrderCmp=t.isDefined=void 0;const n=r(7044),s=r(1614);t.isDefined=e=>void 0!==e,t.preferredOrderCmp=e=>(t,r)=>{const n=e.indexOf(t),s=e.indexOf(r);return n===s?0:-1===n?1:-1===s?-1:n-s},t.matchesAny=function(e){return null==e?e=>!0:Array.isArray(e)?t=>e.includes(t):t=>t===e},t.cachedGetter=(e,t)=>function(){const t=e.call(this);return Object.defineProperty(this,e.name,{get:()=>t,enumerable:!0,configurable:!0}),t};const i=new TextDecoder;t.parseB64uJson=function(e){const t=n.base64url.baseDecode(e),r=i.decode(t);return JSON.parse(r)},t.jwtCharsRefinement=(e,t)=>{let r;for(let n=0;n<e.length;n++)if(r=e.charCodeAt(n),!(65<=r&&r<=90||97<=r&&r<=122||48<=r&&r<=57||45===r||95===r||46===r)){const r=String.fromCodePoint(e.codePointAt(n));return t.addIssue({code:s.ZodIssueCode.custom,message:`Invalid character "${r}" in JWT at position ${n}`})}},t.segmentedStringRefinementFactory=(e,t=2)=>{if(!Number.isFinite(e)||e<1||(0|e)!==e)throw new TypeError(`Count must be a natural number (got ${e})`);const r=e*t+(e-1),n="Invalid JWT format";return(i,o)=>{if(i.length<r)return o.addIssue({code:s.ZodIssueCode.custom,message:`${n}: too short`}),!1;let a=0;for(let r=0;r<e-1;r++){const c=i.indexOf(".",a);if(-1===c)return o.addIssue({code:s.ZodIssueCode.custom,message:`${n}: expected ${e} segments, got ${r+1}`}),!1;if(c-a<t)return o.addIssue({code:s.ZodIssueCode.custom,message:`${n}: segment ${r+1} is too short`}),!1;a=c+1}return-1!==i.indexOf(".",a)?(o.addIssue({code:s.ZodIssueCode.custom,message:`${n}: too many segments`}),!1):!(i.length-a<t&&(o.addIssue({code:s.ZodIssueCode.custom,message:`${n}: last segment is too short`}),1))}}},1395:(e,t,r)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.BrowserOAuthClient=void 0;const s=r(2546),i=r(8588),o=r(2593),a=r(2423),c=r(7186),d=r(4685),l="@@atproto/oauth-client-browser",u=`${l}(popup-channel)`,h=`${l}(popup-state):`,p=new BroadcastChannel(`${l}(synchronization-channel)`);class f extends s.OAuthClient{static async load({clientId:e,...t}){if(e.startsWith("http:")){const r=(0,i.atprotoLoopbackClientMetadata)(e);return new f({clientMetadata:r,...t})}if(e.startsWith("https:")){(0,i.assertOAuthDiscoverableClientId)(e);const r=await s.OAuthClient.fetchMetadata({clientId:e,...t});return new f({clientMetadata:r,...t})}throw new TypeError(`Invalid client id: ${e}`)}constructor({clientMetadata:e=(0,i.atprotoLoopbackClientMetadata)((0,d.buildLoopbackClientId)(window.location)),responseMode:t="fragment",...r}){if(!globalThis.crypto?.subtle)throw new Error("WebCrypto API is required");if(!["query","fragment"].includes(t))throw new TypeError(`Invalid response mode: ${t}`);const s=new o.BrowserOAuthDatabase;super({...r,clientMetadata:e,responseMode:t,keyset:void 0,runtimeImplementation:new a.BrowserRuntimeImplementation,sessionStore:s.getSessionStore(),stateStore:s.getStateStore(),didCache:s.getDidCache(),handleCache:s.getHandleCache(),dpopNonceCache:s.getDpopNonceCache(),authorizationServerMetadataCache:s.getAuthorizationServerMetadataCache(),protectedResourceMetadataCache:s.getProtectedResourceMetadataCache()}),Object.defineProperty(this,n,{enumerable:!0,configurable:!0,writable:!0,value:void 0});const c=new AbortController,{signal:u}=c;this[Symbol.dispose]=()=>c.abort(),u.addEventListener("abort",(()=>s[Symbol.asyncDispose]()),{once:!0}),this.addEventListener("deleted",(({detail:{sub:e}})=>{localStorage.getItem(`${l}(sub)`)===e&&localStorage.removeItem(`${l}(sub)`)}));for(const e of["deleted","updated"])this.sessionGetter.addEventListener(e,(({detail:t})=>{p.postMessage([e,t])}));p.addEventListener("message",(e=>{if(e.source!==window){const[t,r]=e.data;this.dispatchCustomEvent(t,r)}}),{signal:u})}async init(e){await function(e){if(!(0,i.isOAuthClientIdLoopback)(e.client_id))return;if("localhost"!==window.location.hostname)return;const t=new URL(window.location.href);for(const r of e.redirect_uris){const e=new URL(r);if(!("127.0.0.1"!==e.hostname&&"[::1]"!==e.hostname||e.port&&e.port!==t.port||e.protocol!==t.protocol||e.pathname!==t.pathname))throw e.port=t.port,window.location.href=e.href,new Error("Redirecting to loopback IP...")}throw new Error(`Please use the loopback IP address instead of ${t}`)}(this.clientMetadata);const t=await this.signInCallback();if(t)return localStorage.setItem(`${l}(sub)`,t.session.sub),t;const r=localStorage.getItem(`${l}(sub)`);if(r)try{return{session:await this.restore(r,e)}}catch(e){throw localStorage.removeItem(`${l}(sub)`),e}}async restore(e,t){const r=await super.restore(e,t);return localStorage.setItem(`${l}(sub)`,r.sub),r}async revoke(e){return localStorage.removeItem(`${l}(sub)`),super.revoke(e)}async signIn(e,t){return"popup"===t?.display?this.signInPopup(e,t):this.signInRedirect(e,t)}async signInRedirect(e,t){const r=await this.authorize(e,t);return window.location.href=r.href,new Promise(((e,t)=>{setTimeout((e=>{this.abortRequest(r).then((()=>t(e)),(r=>t(new AggregateError([e,r]))))}),5e3,new Error("User navigated back"))}))}async signInPopup(e,t){const r="width=600,height=600,menubar=no,toolbar=no";let n=window.open("about:blank","_blank",r);const i=`${Math.random().toString(36).slice(2)}`,o=await this.authorize(e,{...t,state:`${h}${i}`,display:t?.display??"popup"});return t?.signal?.throwIfAborted(),n?n.window.location.href=o.href:n=window.open(o.href,"_blank",r),n?.focus(),new Promise(((e,r)=>{const o=new BroadcastChannel(u),a=()=>{clearTimeout(d),o.removeEventListener("message",l),o.close(),t?.signal?.removeEventListener("abort",c),n?.close()},c=()=>{r(new Error(t?.signal?.aborted?"Aborted":"Timeout")),a()};t?.signal?.addEventListener("abort",c);const d=setTimeout(c,3e5),l=async({data:n})=>{if(n.key!==i)return;if(!("result"in n))return;o.postMessage({key:i,ack:!0}),a();const{result:c}=n;if("fulfilled"===c.status){const n=c.value;try{t?.signal?.throwIfAborted(),e(await this.restore(n,!1))}catch(e){r(e),this.revoke(n)}}else{const{message:e,params:t}=c.reason;r(new s.OAuthCallbackError(new URLSearchParams(t),e))}};o.addEventListener("message",l)}))}readCallbackParams(){const e="fragment"===this.responseMode?new URLSearchParams(location.hash.slice(1)):new URLSearchParams(location.search);return e.has("state")&&(e.has("code")||e.has("error"))&&this.clientMetadata.redirect_uris.map((e=>new URL(e))).some((e=>location.origin===e.origin&&location.pathname===e.pathname))?e:null}async signInCallback(){const e=this.readCallbackParams();if(!e)return null;"fragment"===this.responseMode?history.replaceState(null,"",location.pathname+location.search):"query"===this.responseMode&&history.replaceState(null,"",location.pathname);const t=e=>{const t=new BroadcastChannel(u);return new Promise((r=>{const n=e=>{clearTimeout(i),t.removeEventListener("message",s),t.close(),r(e)},s=({data:t})=>{"ack"in t&&e.key===t.key&&n(!0)};t.addEventListener("message",s),t.postMessage(e);const i=setTimeout(n,500,!1)}))};return this.callback(e).then((async e=>{if(e.state?.startsWith(h))throw await t({key:e.state.slice(h.length),result:{status:"fulfilled",value:e.session.sub}})||await e.session.signOut(),new c.LoginContinuedInParentWindowError;return e})).catch((async e=>{if(e instanceof s.OAuthCallbackError&&e.state?.startsWith(h))throw await t({key:e.state.slice(h.length),result:{status:"rejected",reason:{message:e.message,params:Array.from(e.params.entries())}}}),new c.LoginContinuedInParentWindowError;throw e})).catch((e=>{throw e instanceof c.LoginContinuedInParentWindowError&&window.close(),e}))}dispose(){this[Symbol.dispose]()}}t.BrowserOAuthClient=f,n=Symbol.dispose},2593:function(e,t,r){var n,s,i=this&&this.__classPrivateFieldSet||function(e,t,r,n,s){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?s.call(e,r):s?s.value=r:t.set(e,r),r},o=this&&this.__classPrivateFieldGet||function(e,t,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(e):n?n.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.BrowserOAuthDatabase=void 0;const a=r(1475),c=r(6880);function d(e){if(!(e instanceof a.WebcryptoKey&&e.kid))throw new Error("Invalid key object");return{keyId:e.kid,keyPair:e.cryptoKeyPair}}async function l(e){return a.WebcryptoKey.fromKeypair(e.keyPair,e.keyId)}const u=["state","session","didCache","dpopNonceCache","handleCache","authorizationServerMetadataCache","protectedResourceMetadataCache"];class h{constructor(e){n.set(this,void 0),s.set(this,void 0),i(this,n,c.DB.open(e?.name??"@atproto-oauth-client",[e=>{for(const t of u)e.createObjectStore(t,{autoIncrement:!0}).createIndex("expiresAt","expiresAt",{unique:!1})}],{durability:e?.durability??"strict"}),"f"),i(this,s,setInterval((()=>{this.cleanup()}),e?.cleanupInterval??3e4),"f")}async run(e,t,r){const s=await o(this,n,"f");return await s.transaction([e],t,(t=>r(t.objectStore(e))))}createStore(e,{encode:t,decode:r,expiresAt:n}){return{get:async t=>{const n=await this.run(e,"readonly",(e=>e.get(t)));if(void 0!==n){if(!(null!=n.expiresAt&&new Date(n.expiresAt)<new Date))return r(n.value);await this.run(e,"readwrite",(e=>e.delete(t)))}},set:async(r,s)=>{const i={value:await t(s),expiresAt:n(s)?.toISOString()};await this.run(e,"readwrite",(e=>e.put(i,r)))},del:async t=>{await this.run(e,"readwrite",(e=>e.delete(t)))}}}getSessionStore(){return this.createStore("session",{expiresAt:({tokenSet:e})=>e.refresh_token||null==e.expires_at?null:new Date(e.expires_at),encode:({dpopKey:e,...t})=>({...t,dpopKey:d(e)}),decode:async({dpopKey:e,...t})=>({...t,dpopKey:await l(e)})})}getStateStore(){return this.createStore("state",{expiresAt:e=>new Date(Date.now()+6e5),encode:({dpopKey:e,...t})=>({...t,dpopKey:d(e)}),decode:async({dpopKey:e,...t})=>({...t,dpopKey:await l(e)})})}getDpopNonceCache(){return this.createStore("dpopNonceCache",{expiresAt:e=>new Date(Date.now()+6e5),encode:e=>e,decode:e=>e})}getDidCache(){return this.createStore("didCache",{expiresAt:e=>new Date(Date.now()+6e4),encode:e=>e,decode:e=>e})}getHandleCache(){return this.createStore("handleCache",{expiresAt:e=>new Date(Date.now()+6e4),encode:e=>e,decode:e=>e})}getAuthorizationServerMetadataCache(){return this.createStore("authorizationServerMetadataCache",{expiresAt:e=>new Date(Date.now()+6e4),encode:e=>e,decode:e=>e})}getProtectedResourceMetadataCache(){return this.createStore("protectedResourceMetadataCache",{expiresAt:e=>new Date(Date.now()+6e4),encode:e=>e,decode:e=>e})}async cleanup(){const e=await o(this,n,"f");for(const t of u)await e.transaction([t],"readwrite",(e=>e.objectStore(t).index("expiresAt").deleteAll(IDBKeyRange.upperBound(Date.now()))))}async[(n=new WeakMap,s=new WeakMap,Symbol.asyncDispose)](){clearInterval(o(this,s,"f")),i(this,s,void 0,"f");const e=o(this,n,"f");i(this,n,Promise.reject(new Error("Database has been disposed")),"f"),o(this,n,"f").catch((()=>null));const t=await e.catch((()=>null));t&&await(t[Symbol.asyncDispose]||t[Symbol.dispose]).call(t)}}t.BrowserOAuthDatabase=h},2423:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BrowserRuntimeImplementation=void 0;const n=r(1475),s=navigator.locks?.request?(e,t)=>navigator.locks.request(e,{mode:"exclusive"},(async()=>t())):void 0;t.BrowserRuntimeImplementation=class{constructor(){if(Object.defineProperty(this,"requestLock",{enumerable:!0,configurable:!0,writable:!0,value:s}),"object"!=typeof crypto||!crypto?.subtle)throw new Error("Crypto with CryptoSubtle is required. If running in a browser, make sure the current page is loaded over HTTPS.");this.requestLock||console.warn("Locks API not available. You should consider using a more recent browser.")}async createKey(e){return n.WebcryptoKey.generate(e,crypto.randomUUID(),{extractable:!0})}getRandomValues(e){return crypto.getRandomValues(new Uint8Array(e))}async digest(e,{name:t}){switch(t){case"sha256":case"sha384":case"sha512":{const r=await crypto.subtle.digest(`SHA-${t.slice(3)}`,e);return new Uint8Array(r)}default:throw new Error(`Unsupported digest algorithm: ${t}`)}}}},8840:()=>{Symbol.dispose??(Symbol.dispose=Symbol("@@dispose")),Symbol.asyncDispose??(Symbol.asyncDispose=Symbol("@@asyncDispose"))},7186:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LoginContinuedInParentWindowError=void 0;class r extends Error{constructor(){super("Login complete, please close the popup window."),Object.defineProperty(this,"code",{enumerable:!0,configurable:!0,writable:!0,value:"LOGIN_CONTINUED_IN_PARENT_WINDOW"})}}t.LoginContinuedInParentWindowError=r},749:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,s)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.buildLoopbackClientId=void 0,r(8840),s(r(1475),t),s(r(2546),t),s(r(1395),t),s(r(7186),t);var i=r(4685);Object.defineProperty(t,"buildLoopbackClientId",{enumerable:!0,get:function(){return i.buildLoopbackClientId}})},7825:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DBIndex=void 0;const n=r(7898);t.DBIndex=class{constructor(e){Object.defineProperty(this,"idbIndex",{enumerable:!0,configurable:!0,writable:!0,value:e})}count(e){return(0,n.promisify)(this.idbIndex.count(e))}get(e){return(0,n.promisify)(this.idbIndex.get(e))}getKey(e){return(0,n.promisify)(this.idbIndex.getKey(e))}getAll(e,t){return(0,n.promisify)(this.idbIndex.getAll(e,t))}getAllKeys(e,t){return(0,n.promisify)(this.idbIndex.getAllKeys(e,t))}deleteAll(e){return new Promise(((t,r)=>{const n=this.idbIndex.openCursor(e);n.onsuccess=function(e){const r=e.target.result;r?(r.delete(),r.continue()):t()},n.onerror=function(e){r(e.target?.error||new Error("Unexpected error"))}}))}}},2694:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DBObjectStore=void 0;const n=r(7825),s=r(7898);t.DBObjectStore=class{constructor(e){Object.defineProperty(this,"idbObjStore",{enumerable:!0,configurable:!0,writable:!0,value:e})}get name(){return this.idbObjStore.name}index(e){return new n.DBIndex(this.idbObjStore.index(e))}get(e){return(0,s.promisify)(this.idbObjStore.get(e))}getKey(e){return(0,s.promisify)(this.idbObjStore.getKey(e))}getAll(e,t){return(0,s.promisify)(this.idbObjStore.getAll(e,t))}getAllKeys(e,t){return(0,s.promisify)(this.idbObjStore.getAllKeys(e,t))}add(e,t){return(0,s.promisify)(this.idbObjStore.add(e,t))}put(e,t){return(0,s.promisify)(this.idbObjStore.put(e,t))}delete(e){return(0,s.promisify)(this.idbObjStore.delete(e))}clear(){return(0,s.promisify)(this.idbObjStore.clear())}}},5161:function(e,t,r){var n,s=this&&this.__classPrivateFieldSet||function(e,t,r,n,s){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?s.call(e,r):s?s.value=r:t.set(e,r),r},i=this&&this.__classPrivateFieldGet||function(e,t,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(e):n?n.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.DBTransaction=void 0;const o=r(2694);class a{constructor(e){n.set(this,void 0),s(this,n,e,"f");const t=()=>{i()},r=()=>{i()},i=()=>{s(this,n,null,"f"),e.removeEventListener("abort",t),e.removeEventListener("complete",r)};e.addEventListener("abort",t),e.addEventListener("complete",r)}get tx(){if(!i(this,n,"f"))throw new Error("Transaction already ended");return i(this,n,"f")}async abort(){const{tx:e}=this;s(this,n,null,"f"),e.abort()}async commit(){const{tx:e}=this;s(this,n,null,"f"),e.commit?.()}objectStore(e){const t=this.tx.objectStore(e);return new o.DBObjectStore(t)}[(n=new WeakMap,Symbol.dispose)](){i(this,n,"f")&&this.commit()}}t.DBTransaction=a},6336:function(e,t,r){var n,s=this&&this.__classPrivateFieldSet||function(e,t,r,n,s){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?s.call(e,r):s?s.value=r:t.set(e,r),r},i=this&&this.__classPrivateFieldGet||function(e,t,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(e):n?n.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.DB=void 0;const o=r(5161);class a{static async open(e,t,r){const n=await new Promise(((r,n)=>{const s=indexedDB.open(e,t.length);s.onerror=()=>n(s.error),s.onsuccess=()=>r(s.result),s.onupgradeneeded=({oldVersion:e,newVersion:r})=>{const i=s.result;try{for(let n=e;n<(r??t.length);++n){const e=t[n];if(!e)throw new Error(`Missing migration for version ${n}`);e(i)}}catch(e){i.close(),n(e)}}}));return new a(n,r)}constructor(e,t){Object.defineProperty(this,"txOptions",{enumerable:!0,configurable:!0,writable:!0,value:t}),n.set(this,void 0),s(this,n,e,"f");const r=()=>{s(this,n,null,"f"),e.removeEventListener("versionchange",r),e.removeEventListener("close",r),e.close()};e.addEventListener("versionchange",r),e.addEventListener("close",r)}get db(){if(!i(this,n,"f"))throw new Error("Database closed");return i(this,n,"f")}get name(){return this.db.name}get objectStoreNames(){return this.db.objectStoreNames}get version(){return this.db.version}async transaction(e,t,r){return new Promise((async(n,s)=>{try{const i=this.db.transaction(e,t,this.txOptions);let a={done:!1};i.oncomplete=()=>{a.done?n(a.value):s(new Error("Transaction completed without result"))},i.onerror=()=>s(i.error),i.onabort=()=>s(i.error||new Error("Transaction aborted"));try{const e=await r(new o.DBTransaction(i));a={done:!0,value:e},i.commit()}catch(e){throw i.abort(),e}}catch(e){s(e)}}))}close(){const{db:e}=this;s(this,n,null,"f"),e.close()}[(n=new WeakMap,Symbol.dispose)](){if(i(this,n,"f"))return this.close()}}t.DB=a},6880:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,s)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),r(8840),s(r(6336),t),s(r(7825),t),s(r(2694),t),s(r(5161),t)},7898:(e,t)=>{function r(e,t,r){const n=()=>{e.removeEventListener("success",s),e.removeEventListener("error",i)},s=()=>{t(e.result),n()},i=()=>{r(e.error||new Error("Unknown error")),n()};e.addEventListener("success",s),e.addEventListener("error",i)}Object.defineProperty(t,"__esModule",{value:!0}),t.handleRequest=r,t.promisify=function(e){return new Promise(((t,n)=>{r(e,t,n)}))}},4685:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.buildLoopbackClientId=function(e,t="127.0.0.1"){if(!(0,n.isLoopbackHost)(e.hostname))throw new TypeError(`Expected a loopback host, got ${e.hostname}`);const r=`http://${"localhost"===e.hostname?t:e.hostname}${e.port&&!e.port.startsWith(":")?`:${e.port}`:e.port}${e.pathname}`;return`http://localhost${"/"===e.pathname?"":e.pathname}?redirect_uri=${encodeURIComponent(r)}`};const n=r(8588)},8811:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.atprotoTokenResponseSchema=t.atprotoScopeSchema=t.isAtprotoScope=void 0;const n=r(6574),s=r(8588),i=r(1614),o=r(4716);t.isAtprotoScope=e=>(0,o.includesSpaceSeparatedValue)(e,"atproto"),t.atprotoScopeSchema=i.z.string().refine(t.isAtprotoScope,'The "atproto" scope is required'),t.atprotoTokenResponseSchema=s.oauthTokenResponseSchema.extend({token_type:i.z.literal("DPoP"),sub:n.atprotoDidSchema,scope:t.atprotoScopeSchema,id_token:i.z.never().optional()})},8435:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FALLBACK_ALG=void 0,t.FALLBACK_ALG="ES256"},3188:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TokenInvalidError=void 0;class r extends Error{constructor(e,t=`The session for "${e}" is invalid`,r){super(t,r),Object.defineProperty(this,"sub",{enumerable:!0,configurable:!0,writable:!0,value:e})}}t.TokenInvalidError=r},5904:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TokenRefreshError=void 0;class r extends Error{constructor(e,t,r){super(t,r),Object.defineProperty(this,"sub",{enumerable:!0,configurable:!0,writable:!0,value:e})}}t.TokenRefreshError=r},3649:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TokenRevokedError=void 0;class r extends Error{constructor(e,t=`The session for "${e}" was successfully revoked`,r){super(t,r),Object.defineProperty(this,"sub",{enumerable:!0,configurable:!0,writable:!0,value:e})}}t.TokenRevokedError=r},2504:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.dpopFetchWrapper=function({key:e,iss:t,supportedAlgs:r,nonces:s,sha256:d=(void 0!==i?c:void 0),isAuthServer:l,fetch:u=globalThis.fetch}){if(!d)throw new TypeError("crypto.subtle is not available in this environment. Please provide a sha256 function.");const h=function(e,t){if(t){const r=t.find((t=>e.algorithms.includes(t)));if(r)return r}else{const[t]=e.algorithms;if(t)return t}throw new Error("Key does not match any alg supported by the server")}(e,r);return async function(r,i){if(!e.algorithms.includes(h))throw new TypeError(`Key does not support the algorithm ${h}`);const c=null==i&&r instanceof Request?r:new Request(r,i),p=c.headers.get("Authorization"),f=p?.startsWith("DPoP ")?await d(p.slice(5)):void 0,{method:y,url:m}=c,{origin:w}=new URL(m);let g;try{g=await s.get(w)}catch{}const v=await a(e,h,t,y,m,g,f);c.headers.set("DPoP",v);const b=await u.call(this,c),_=b.headers.get("DPoP-Nonce");if(!_||_===g)return b;try{await s.set(w,_)}catch{}const S=await async function(e,t){if((void 0===t||!1===t)&&401===e.status){const t=e.headers.get("WWW-Authenticate");if(t?.startsWith("DPoP"))return t.includes('error="use_dpop_nonce"')}if((void 0===t||!0===t)&&400===e.status)try{const t=await(0,n.peekJson)(e,10240);return"object"==typeof t&&"use_dpop_nonce"===t?.error}catch{return!1}return!1}(b,l);if(!S)return b;if(r===c)return b;if(o&&i?.body instanceof o)return b;await(0,n.cancelBody)(b,"log");const E=await a(e,h,t,y,m,_,f),k=new Request(r,i);return k.headers.set("DPoP",E),u.call(this,k)}};const n=r(3654),s=r(7044),i=globalThis.crypto?.subtle,o=globalThis.ReadableStream;async function a(e,t,r,n,s,i,o){if(!e.bareJwk)throw new Error("Only asymmetric keys can be used as DPoP proofs");const a=Math.floor(Date.now()/1e3);return e.createJwt({alg:t,typ:"dpop+jwt",jwk:e.bareJwk},{iss:r,iat:a,jti:Math.random().toString(36).slice(2),htm:n,htu:s,nonce:i,ath:o})}async function c(e){if(null==i)throw new Error("crypto.subtle is not available in this environment. Please provide a sha256 function.");const t=(new TextEncoder).encode(e),r=await i.digest("SHA-256",t),n=new Uint8Array(r);return s.base64url.baseEncode(n)}},2546:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,s)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.FetchResponseError=t.FetchRequestError=t.FetchError=void 0,s(r(4186),t);var i=r(3654);Object.defineProperty(t,"FetchError",{enumerable:!0,get:function(){return i.FetchError}}),Object.defineProperty(t,"FetchRequestError",{enumerable:!0,get:function(){return i.FetchRequestError}}),Object.defineProperty(t,"FetchResponseError",{enumerable:!0,get:function(){return i.FetchResponseError}}),s(r(3427),t),s(r(6574),t),s(r(8588),t),s(r(22),t),s(r(8886),t),s(r(4993),t),s(r(6452),t),s(r(2731),t),s(r(6158),t),s(r(4417),t),s(r(5174),t),s(r(2860),t),s(r(9197),t),s(r(8948),t),s(r(3179),t),s(r(2175),t),s(r(3188),t),s(r(5904),t),s(r(3649),t)},9443:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.requestLocalLock=void 0;const r=new Map;t.requestLocalLock=(e,t)=>function(e){return new Promise((t=>{const n=(r.get(e)??Promise.resolve()).then((()=>new Promise((s=>{t((()=>{r.get(e)===n&&r.delete(e),s()}))}))));r.set(e,n)}))}(e).then((async e=>{try{return await t()}finally{e()}}))},22:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OAuthAuthorizationServerMetadataResolver=void 0;const n=r(3654),s=r(3350),i=r(8588),o=r(4716);class a extends s.CachedGetter{constructor(e,t,r){super((async(e,t)=>this.fetchMetadata(e,t)),e),Object.defineProperty(this,"fetch",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"allowHttpIssuer",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.fetch=(0,n.bindFetch)(t),this.allowHttpIssuer=!0===r?.allowHttpIssuer}async get(e,t){const r=i.oauthIssuerIdentifierSchema.parse(e);if(!this.allowHttpIssuer&&r.startsWith("http:"))throw new TypeError("Unsecure issuer URL protocol only allowed in development and test environments");return super.get(r,t)}async fetchMetadata(e,t){const r=new URL("/.well-known/oauth-authorization-server",e),s=new Request(r,{headers:{accept:"application/json"},cache:t?.noCache?"no-cache":void 0,signal:t?.signal,redirect:"manual"}),a=await this.fetch(s);if(200!==a.status)throw await(0,n.cancelBody)(a,"log"),await n.FetchResponseError.from(a,`Unexpected status code ${a.status} for "${r}"`,void 0,{cause:s});if("application/json"!==(0,o.contentMime)(a.headers))throw await(0,n.cancelBody)(a,"log"),await n.FetchResponseError.from(a,`Unexpected content type for "${r}"`,void 0,{cause:s});const c=i.oauthAuthorizationServerMetadataValidator.parse(await a.json());if(c.issuer!==e)throw new TypeError(`Invalid issuer ${c.issuer}`);if(!0!==c.client_id_metadata_document_supported)throw new TypeError(`Authorization server "${e}" does not support client_id_metadata_document`);return c}}t.OAuthAuthorizationServerMetadataResolver=a},8886:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OAuthCallbackError=void 0;class r extends Error{static from(e,t,n){if(e instanceof r)return e;const s=e instanceof Error?e.message:void 0;return new r(t,s,n,e)}constructor(e,t=e.get("error_description")||"OAuth callback error",r,n){super(t,{cause:n}),Object.defineProperty(this,"params",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,"state",{enumerable:!0,configurable:!0,writable:!0,value:r})}}t.OAuthCallbackError=r},4993:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OAuthClient=void 0;const n=r(4186),s=r(3427),i=r(9299),o=r(868),a=r(5909),c=r(8588),d=r(8435),l=r(3649),u=r(22),h=r(8886),p=r(6452),f=r(2024),y=r(5174),m=r(2860),w=r(9110),g=r(8948),v=r(4716),b=r(4824);class _ extends v.CustomEventTarget{static async fetchMetadata({clientId:e,fetch:t=globalThis.fetch,signal:r}){r?.throwIfAborted();const n=new Request(e,{redirect:"error",signal:r}),s=await t(n);if(200!==s.status)throw s.body?.cancel?.(),new TypeError(`Failed to fetch client metadata: ${s.status}`);const i=s.headers.get("content-type")?.split(";")[0].trim();if("application/json"!==i)throw s.body?.cancel?.(),new TypeError(`Invalid client metadata content type: ${i}`);const o=await s.json();return r?.throwIfAborted(),c.oauthClientMetadataSchema.parse(o)}constructor({fetch:e=globalThis.fetch,allowHttp:t=!1,stateStore:r,sessionStore:c,didCache:d,dpopNonceCache:l=new o.SimpleStoreMemory({ttl:6e4,max:100}),handleCache:h,authorizationServerMetadataCache:m=new o.SimpleStoreMemory({ttl:6e4,max:100}),protectedResourceMetadataCache:v=new o.SimpleStoreMemory({ttl:6e4,max:100}),responseMode:_,clientMetadata:S,handleResolver:E,plcDirectoryUrl:k,runtimeImplementation:A,keyset:P}){super(),Object.defineProperty(this,"clientMetadata",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"responseMode",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"keyset",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"runtime",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"fetch",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"oauthResolver",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"serverFactory",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"sessionGetter",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"stateStore",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.keyset=P?P instanceof a.Keyset?P:new a.Keyset(P):void 0,this.clientMetadata=(0,b.validateClientMetadata)(S,this.keyset),this.responseMode=_,this.runtime=new w.Runtime(A),this.fetch=e,this.oauthResolver=new f.OAuthResolver(new i.IdentityResolver(new n.DidResolverCached(new n.DidResolverCommon({fetch:e,plcDirectoryUrl:k,allowHttp:t}),d),new s.CachedHandleResolver(s.AppViewHandleResolver.from(E,{fetch:e}),h)),new p.OAuthProtectedResourceMetadataResolver(v,e,{allowHttpResource:t}),new u.OAuthAuthorizationServerMetadataResolver(m,e,{allowHttpIssuer:t})),this.serverFactory=new y.OAuthServerFactory(this.clientMetadata,this.runtime,this.oauthResolver,this.fetch,this.keyset,l),this.sessionGetter=new g.SessionGetter(c,this.serverFactory,this.runtime),this.stateStore=r;for(const e of["deleted","updated"])this.sessionGetter.addEventListener(e,(t=>{this.dispatchCustomEvent(e,t.detail)||t.preventDefault()}))}get identityResolver(){return this.oauthResolver.identityResolver}get didResolver(){return this.identityResolver.didResolver}get handleResolver(){return this.identityResolver.handleResolver}get jwks(){return this.keyset?.publicJwks??{keys:[]}}async authorize(e,{signal:t,...r}={}){const n=r?.redirect_uri??this.clientMetadata.redirect_uris[0];if(!this.clientMetadata.redirect_uris.includes(n))throw new TypeError("Invalid redirect_uri");const{identity:s,metadata:i}=await this.oauthResolver.resolve(e,{signal:t}),o=await this.runtime.generatePKCE(),a=await this.runtime.generateKey(i.dpop_signing_alg_values_supported||[d.FALLBACK_ALG]),c=await this.runtime.generateNonce();await this.stateStore.set(c,{iss:i.issuer,dpopKey:a,verifier:o.verifier,appState:r?.state});const l={...r,client_id:this.clientMetadata.client_id,redirect_uri:n,code_challenge:o.challenge,code_challenge_method:o.method,state:c,login_hint:s?e:void 0,response_mode:this.responseMode,response_type:"code",scope:r?.scope??this.clientMetadata.scope};if(i.pushed_authorization_request_endpoint){const e=await this.serverFactory.fromMetadata(i,a),t=await e.request("pushed_authorization_request",l),r=new URL(i.authorization_endpoint);return r.searchParams.set("client_id",this.clientMetadata.client_id),r.searchParams.set("request_uri",t.request_uri),r}if(i.require_pushed_authorization_requests)throw new Error("Server requires pushed authorization requests (PAR) but no PAR endpoint is available");{const e=new URL(i.authorization_endpoint);for(const[t,r]of Object.entries(l))r&&e.searchParams.set(t,String(r));if(e.pathname.length+e.search.length<2048)return e;if(!i.pushed_authorization_request_endpoint)throw new Error("Login URL too long")}throw new Error("Server does not support pushed authorization requests (PAR)")}async abortRequest(e){e.searchParams.get("request_uri")}async callback(e){if(null!=e.get("response"))throw new h.OAuthCallbackError(e,"JARM not supported");const t=e.get("iss"),r=e.get("state"),n=e.get("error"),s=e.get("code");if(!r)throw new h.OAuthCallbackError(e,'Missing "state" parameter');const i=await this.stateStore.get(r);if(!i)throw new h.OAuthCallbackError(e,`Unknown authorization session "${r}"`);await this.stateStore.del(r);try{if(null!=n)throw new h.OAuthCallbackError(e,void 0,i.appState);if(!s)throw new h.OAuthCallbackError(e,'Missing "code" query param',i.appState);const r=await this.serverFactory.fromIssuer(i.iss,i.dpopKey);if(null!=t){if(!r.issuer)throw new h.OAuthCallbackError(e,"Issuer not found in metadata",i.appState);if(r.issuer!==t)throw new h.OAuthCallbackError(e,"Issuer mismatch",i.appState)}else if(r.serverMetadata.authorization_response_iss_parameter_supported)throw new h.OAuthCallbackError(e,"iss missing from the response",i.appState);const o=await r.exchangeCode(s,i.verifier);try{return await this.sessionGetter.setStored(o.sub,{dpopKey:i.dpopKey,tokenSet:o}),{session:this.createSession(r,o.sub),state:i.appState??null}}catch(e){throw await r.revoke(o.refresh_token||o.access_token),e}}catch(t){throw h.OAuthCallbackError.from(t,e,i.appState)}}async restore(e,t="auto"){(0,n.assertAtprotoDid)(e);const{dpopKey:r,tokenSet:s}=await this.sessionGetter.get(e,{noCache:!0===t,allowStale:!1===t}),i=await this.serverFactory.fromIssuer(s.iss,r,{noCache:!0===t,allowStale:!1===t});return this.createSession(i,e)}async revoke(e){(0,n.assertAtprotoDid)(e);const{dpopKey:t,tokenSet:r}=await this.sessionGetter.get(e,{allowStale:!0});try{const e=await this.serverFactory.fromIssuer(r.iss,t);await e.revoke(r.access_token)}finally{await this.sessionGetter.delStored(e,new l.TokenRevokedError(e))}}createSession(e,t){return new m.OAuthSession(e,t,this.sessionGetter,this.fetch)}}t.OAuthClient=_},6452:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OAuthProtectedResourceMetadataResolver=void 0;const n=r(3654),s=r(3350),i=r(8588),o=r(4716);class a extends s.CachedGetter{constructor(e,t=globalThis.fetch,r){super((async(e,t)=>this.fetchMetadata(e,t)),e),Object.defineProperty(this,"fetch",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"allowHttpResource",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.fetch=(0,n.bindFetch)(t),this.allowHttpResource=!0===r?.allowHttpResource}async get(e,t){const{protocol:r,origin:n}=new URL(e);if("https:"!==r&&"http:"!==r)throw new TypeError(`Invalid protected resource metadata URL protocol: ${r}`);if("http:"===r&&!this.allowHttpResource)throw new TypeError(`Unsecure resource metadata URL (${r}) only allowed in development and test environments`);return super.get(n,t)}async fetchMetadata(e,t){const r=new URL("/.well-known/oauth-protected-resource",e),s=new Request(r,{signal:t?.signal,headers:{accept:"application/json"},cache:t?.noCache?"no-cache":void 0,redirect:"manual"}),a=await this.fetch(s);if(200!==a.status)throw await(0,n.cancelBody)(a,"log"),await n.FetchResponseError.from(a,`Unexpected status code ${a.status} for "${r}"`,void 0,{cause:s});if("application/json"!==(0,o.contentMime)(a.headers))throw await(0,n.cancelBody)(a,"log"),await n.FetchResponseError.from(a,`Unexpected content type for "${r}"`,void 0,{cause:s});const c=i.oauthProtectedResourceMetadataSchema.parse(await a.json());if(c.resource!==e)throw new TypeError(`Invalid issuer ${c.resource}`);return c}}t.OAuthProtectedResourceMetadataResolver=a},2731:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OAuthResolverError=void 0;class r extends Error{constructor(e,t){super(e,t)}static from(e,t){return e instanceof r?e:new r(t??"Unable to resolve identity",{cause:e})}}t.OAuthResolverError=r},2024:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OAuthResolver=void 0;const n=r(8588),s=r(2731);t.OAuthResolver=class{constructor(e,t,r){Object.defineProperty(this,"identityResolver",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,"protectedResourceMetadataResolver",{enumerable:!0,configurable:!0,writable:!0,value:t}),Object.defineProperty(this,"authorizationServerMetadataResolver",{enumerable:!0,configurable:!0,writable:!0,value:r})}async resolve(e,t){return/^https?:\/\//.test(e)?this.resolveFromService(e,t):this.resolveFromIdentity(e,t)}async resolveFromService(e,t){try{return{metadata:await this.getResourceServerMetadata(e,t)}}catch(r){if(!t?.signal?.aborted&&r instanceof s.OAuthResolverError)try{const r=n.oauthIssuerIdentifierSchema.safeParse(e);if(r.success)return{metadata:await this.getAuthorizationServerMetadata(r.data,t)}}catch{}throw r}}async resolveFromIdentity(e,t){const r=await this.resolveIdentity(e,t);return t?.signal?.throwIfAborted(),{identity:r,metadata:await this.getResourceServerMetadata(r.pds,t)}}async resolveIdentity(e,t){try{return await this.identityResolver.resolve(e,t)}catch(t){throw s.OAuthResolverError.from(t,`Failed to resolve identity: ${e}`)}}async getAuthorizationServerMetadata(e,t){try{return await this.authorizationServerMetadataResolver.get(e,t)}catch(t){throw s.OAuthResolverError.from(t,`Failed to resolve OAuth server metadata for issuer: ${e}`)}}async getResourceServerMetadata(e,t){try{const r=await this.protectedResourceMetadataResolver.get(e,t);if(1!==r.authorization_servers?.length)throw new s.OAuthResolverError(r.authorization_servers?.length?`Unable to determine authorization server for PDS: ${e}`:`No authorization servers found for PDS: ${e}`);const n=r.authorization_servers[0];t?.signal?.throwIfAborted();const i=await this.getAuthorizationServerMetadata(n,t);if(i.protected_resources&&!i.protected_resources.includes(r.resource))throw new s.OAuthResolverError(`PDS "${e}" not protected by issuer "${n}"`);return i}catch(t){throw s.OAuthResolverError.from(t,`Failed to resolve OAuth server metadata for resource: ${e}`)}}}},6158:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OAuthResponseError=void 0;const n=r(3654);class s extends Error{constructor(e,t){const r=(0,n.ifString)((0,n.ifObject)(t)?.error),s=(0,n.ifString)((0,n.ifObject)(t)?.error_description);super(`OAuth ${r?`"${r}"`:"unknown"} error${s?`: ${s}`:""}`),Object.defineProperty(this,"response",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,"payload",{enumerable:!0,configurable:!0,writable:!0,value:t}),Object.defineProperty(this,"error",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"errorDescription",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.error=r,this.errorDescription=s}get status(){return this.response.status}get headers(){return this.response.headers}}t.OAuthResponseError=s},4417:function(e,t,r){var n=this&&this.__addDisposableResource||function(e,t,r){if(null!=t){if("object"!=typeof t&&"function"!=typeof t)throw new TypeError("Object expected.");var n,s;if(r){if(!Symbol.asyncDispose)throw new TypeError("Symbol.asyncDispose is not defined.");n=t[Symbol.asyncDispose]}if(void 0===n){if(!Symbol.dispose)throw new TypeError("Symbol.dispose is not defined.");n=t[Symbol.dispose],r&&(s=n)}if("function"!=typeof n)throw new TypeError("Object not disposable.");s&&(n=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.stack.push({value:t,dispose:n,async:r})}else r&&e.stack.push({async:!0});return t},s=this&&this.__disposeResources||function(e){return function(t){function r(r){t.error=t.hasError?new e(r,t.error,"An error was suppressed during disposal."):r,t.hasError=!0}var n,s=0;return function e(){for(;n=t.stack.pop();)try{if(!n.async&&1===s)return s=0,t.stack.push(n),Promise.resolve().then(e);if(n.dispose){var i=n.dispose.call(n.value);if(n.async)return s|=2,Promise.resolve(i).then(e,(function(t){return r(t),e()}))}else s|=1}catch(e){r(e)}if(1===s)return t.hasError?Promise.reject(t.error):Promise.resolve();if(t.hasError)throw t.error}()}}("function"==typeof SuppressedError?SuppressedError:function(e,t,r){var n=new Error(r);return n.name="SuppressedError",n.error=e,n.suppressed=t,n});Object.defineProperty(t,"__esModule",{value:!0}),t.OAuthServerAgent=void 0;const i=r(3654),o=r(8588),a=r(8811),c=r(8435),d=r(5904),l=r(2504),u=r(6158),h=r(4716);t.OAuthServerAgent=class{constructor(e,t,r,n,s,o,a,c){Object.defineProperty(this,"dpopKey",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,"serverMetadata",{enumerable:!0,configurable:!0,writable:!0,value:t}),Object.defineProperty(this,"clientMetadata",{enumerable:!0,configurable:!0,writable:!0,value:r}),Object.defineProperty(this,"dpopNonces",{enumerable:!0,configurable:!0,writable:!0,value:n}),Object.defineProperty(this,"oauthResolver",{enumerable:!0,configurable:!0,writable:!0,value:s}),Object.defineProperty(this,"runtime",{enumerable:!0,configurable:!0,writable:!0,value:o}),Object.defineProperty(this,"keyset",{enumerable:!0,configurable:!0,writable:!0,value:a}),Object.defineProperty(this,"dpopFetch",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.dpopFetch=(0,l.dpopFetchWrapper)({fetch:(0,i.bindFetch)(c),iss:r.client_id,key:e,supportedAlgs:t.dpop_signing_alg_values_supported,sha256:async e=>o.sha256(e),nonces:n,isAuthServer:!0})}get issuer(){return this.serverMetadata.issuer}async revoke(e){try{await this.request("revocation",{token:e})}catch{}}async exchangeCode(e,t){const r=Date.now(),n=await this.request("token",{grant_type:"authorization_code",redirect_uri:this.clientMetadata.redirect_uris[0],code:e,code_verifier:t});try{return{aud:await this.verifyIssuer(n.sub),sub:n.sub,iss:this.issuer,scope:n.scope,refresh_token:n.refresh_token,access_token:n.access_token,token_type:n.token_type,expires_at:"number"==typeof n.expires_in?new Date(r+1e3*n.expires_in).toISOString():void 0}}catch(e){throw await this.revoke(n.access_token),e}}async refresh(e){if(!e.refresh_token)throw new d.TokenRefreshError(e.sub,"No refresh token available");const t=await this.verifyIssuer(e.sub),r=Date.now(),n=await this.request("token",{grant_type:"refresh_token",refresh_token:e.refresh_token});return{aud:t,sub:e.sub,iss:this.issuer,scope:n.scope,refresh_token:n.refresh_token,access_token:n.access_token,token_type:n.token_type,expires_at:"number"==typeof n.expires_in?new Date(r+1e3*n.expires_in).toISOString():void 0}}async verifyIssuer(e){const t={stack:[],error:void 0,hasError:!1};try{const r=n(t,(0,h.timeoutSignal)(1e4),!1),s=await this.oauthResolver.resolveFromIdentity(e,{noCache:!0,allowStale:!1,signal:r});if(this.issuer!==s.metadata.issuer)throw new TypeError("Issuer mismatch");return s.identity.pds.href}catch(e){t.error=e,t.hasError=!0}finally{s(t)}}async request(e,t){const r=this.serverMetadata[`${e}_endpoint`];if(!r)throw new Error(`No ${e} endpoint available`);const n=await this.buildClientAuth(e),{response:s,json:c}=await this.dpopFetch(r,{method:"POST",headers:{...n.headers,"Content-Type":"application/json"},body:JSON.stringify({...t,...n.payload})}).then((0,i.fetchJsonProcessor)());if(!s.ok)throw new u.OAuthResponseError(s,c);switch(e){case"token":return a.atprotoTokenResponseSchema.parse(c);case"pushed_authorization_request":return o.oauthParResponseSchema.parse(c);default:return c}}async buildClientAuth(e){const t=this.serverMetadata.token_endpoint_auth_methods_supported,r=this.clientMetadata.token_endpoint_auth_method;if("private_key_jwt"===r||this.keyset&&!r&&t?.includes("private_key_jwt")){if(!this.keyset)throw new Error("No keyset available");try{const e=this.serverMetadata.token_endpoint_auth_signing_alg_values_supported??c.FALLBACK_ALG,t=this.clientMetadata.jwks?.keys.map((({kid:e})=>e)).filter((e=>"string"==typeof e));return{payload:{client_id:this.clientMetadata.client_id,client_assertion_type:o.CLIENT_ASSERTION_TYPE_JWT_BEARER,client_assertion:await this.keyset.createJwt({alg:e,kid:t},{iss:this.clientMetadata.client_id,sub:this.clientMetadata.client_id,aud:this.serverMetadata.issuer,jti:await this.runtime.generateNonce(),iat:Math.floor(Date.now()/1e3)})}}}catch(e){if("private_key_jwt"===r)throw e}}if("none"===r||!r&&(t?.includes("none")??1))return{payload:{client_id:this.clientMetadata.client_id}};throw new Error(`Unsupported ${e} authentication method`)}}},5174:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OAuthServerFactory=void 0;const n=r(4417);t.OAuthServerFactory=class{constructor(e,t,r,n,s,i){Object.defineProperty(this,"clientMetadata",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,"runtime",{enumerable:!0,configurable:!0,writable:!0,value:t}),Object.defineProperty(this,"resolver",{enumerable:!0,configurable:!0,writable:!0,value:r}),Object.defineProperty(this,"fetch",{enumerable:!0,configurable:!0,writable:!0,value:n}),Object.defineProperty(this,"keyset",{enumerable:!0,configurable:!0,writable:!0,value:s}),Object.defineProperty(this,"dpopNonceCache",{enumerable:!0,configurable:!0,writable:!0,value:i})}async fromIssuer(e,t,r){const n=await this.resolver.getAuthorizationServerMetadata(e,r);return this.fromMetadata(n,t)}async fromMetadata(e,t){return new n.OAuthServerAgent(t,e,this.clientMetadata,this.dpopNonceCache,this.resolver,this.runtime,this.keyset,this.fetch)}}},2860:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OAuthSession=void 0;const n=r(3654),s=r(3188),i=r(3649),o=r(2504),a=globalThis.ReadableStream;function c(e){if(401!==e.status)return!1;const t=e.headers.get("WWW-Authenticate");return null!=t&&(t.startsWith("Bearer ")||t.startsWith("DPoP "))&&t.includes('error="invalid_token"')}t.OAuthSession=class{constructor(e,t,r,s=globalThis.fetch){Object.defineProperty(this,"server",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,"sub",{enumerable:!0,configurable:!0,writable:!0,value:t}),Object.defineProperty(this,"sessionGetter",{enumerable:!0,configurable:!0,writable:!0,value:r}),Object.defineProperty(this,"dpopFetch",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.dpopFetch=(0,o.dpopFetchWrapper)({fetch:(0,n.bindFetch)(s),iss:e.clientMetadata.client_id,key:e.dpopKey,supportedAlgs:e.serverMetadata.dpop_signing_alg_values_supported,sha256:async t=>e.runtime.sha256(t),nonces:e.dpopNonces,isAuthServer:!1})}get did(){return this.sub}get serverMetadata(){return this.server.serverMetadata}async getTokenSet(e){const{tokenSet:t}=await this.sessionGetter.get(this.sub,{noCache:!0===e,allowStale:!1===e});return t}async getTokenInfo(e="auto"){const t=await this.getTokenSet(e),r=null==t.expires_at?void 0:new Date(t.expires_at);return{expiresAt:r,get expired(){return null==r?void 0:r.getTime()<Date.now()-5e3},scope:t.scope,iss:t.iss,aud:t.aud,sub:t.sub}}async signOut(){try{const e=await this.getTokenSet(!1);await this.server.revoke(e.access_token)}finally{await this.sessionGetter.delStored(this.sub,new i.TokenRevokedError(this.sub))}}async fetchHandler(e,t){const r=await this.getTokenSet("auto"),n=new URL(e,r.aud),i=`${r.token_type} ${r.access_token}`,o=new Headers(t?.headers);o.set("Authorization",i);const d=await this.dpopFetch(n,{...t,headers:o});if(!c(d))return d;let l;try{l=await this.getTokenSet(!0)}catch(e){return d}if(a&&t?.body instanceof a)return d;const u=`${l.token_type} ${l.access_token}`,h=new URL(e,l.aud);o.set("Authorization",u);const p=await this.dpopFetch(h,{...t,headers:o});return c(p)&&await this.sessionGetter.delStored(this.sub,new s.TokenInvalidError(this.sub)),p}}},9197:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},9110:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Runtime=void 0;const n=r(7044),s=r(9443);function i(e,t){if("ES256K"===e)return-1;if("ES256K"===t)return 1;for(const r of["ES","PS","RS"]){if(e.startsWith(r))return t.startsWith(r)?parseInt(e.slice(2,5))-parseInt(t.slice(2,5)):-1;if(t.startsWith(r))return 1}return 0}t.Runtime=class{constructor(e){Object.defineProperty(this,"implementation",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,"hasImplementationLock",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"usingLock",{enumerable:!0,configurable:!0,writable:!0,value:void 0});const{requestLock:t}=e;this.hasImplementationLock=null!=t,this.usingLock=t?.bind(e)||s.requestLocalLock}async generateKey(e){const t=Array.from(e).sort(i);return this.implementation.createKey(t)}async sha256(e){const t=(new TextEncoder).encode(e),r=await this.implementation.digest(t,{name:"sha256"});return n.base64url.baseEncode(r)}async generateNonce(e=16){const t=await this.implementation.getRandomValues(e);return n.base64url.baseEncode(t)}async generatePKCE(e){const t=await this.generateVerifier(e);return{verifier:t,challenge:await this.sha256(t),method:"S256"}}async calculateJwkThumbprint(e){const t=function(e){const t=t=>{const r=e[t];if("string"!=typeof r||!r)throw new TypeError(`"${t}" Parameter missing or invalid`);return r};switch(e.kty){case"EC":return{crv:t("crv"),kty:t("kty"),x:t("x"),y:t("y")};case"OKP":return{crv:t("crv"),kty:t("kty"),x:t("x")};case"RSA":return{e:t("e"),kty:t("kty"),n:t("n")};case"oct":return{k:t("k"),kty:t("kty")};default:throw new TypeError('"kty" (Key Type) Parameter missing or unsupported')}}(e),r=JSON.stringify(t);return this.sha256(r)}async generateVerifier(e=32){if(e<32||e>96)throw new TypeError("Invalid code_verifier length");const t=await this.implementation.getRandomValues(e);return n.base64url.baseEncode(t)}}},8948:function(e,t,r){var n=this&&this.__addDisposableResource||function(e,t,r){if(null!=t){if("object"!=typeof t&&"function"!=typeof t)throw new TypeError("Object expected.");var n,s;if(r){if(!Symbol.asyncDispose)throw new TypeError("Symbol.asyncDispose is not defined.");n=t[Symbol.asyncDispose]}if(void 0===n){if(!Symbol.dispose)throw new TypeError("Symbol.dispose is not defined.");n=t[Symbol.dispose],r&&(s=n)}if("function"!=typeof n)throw new TypeError("Object not disposable.");s&&(n=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.stack.push({value:t,dispose:n,async:r})}else r&&e.stack.push({async:!0});return t},s=this&&this.__disposeResources||function(e){return function(t){function r(r){t.error=t.hasError?new e(r,t.error,"An error was suppressed during disposal."):r,t.hasError=!0}var n,s=0;return function e(){for(;n=t.stack.pop();)try{if(!n.async&&1===s)return s=0,t.stack.push(n),Promise.resolve().then(e);if(n.dispose){var i=n.dispose.call(n.value);if(n.async)return s|=2,Promise.resolve(i).then(e,(function(t){return r(t),e()}))}else s|=1}catch(e){r(e)}if(1===s)return t.hasError?Promise.reject(t.error):Promise.resolve();if(t.hasError)throw t.error}()}}("function"==typeof SuppressedError?SuppressedError:function(e,t,r){var n=new Error(r);return n.name="SuppressedError",n.error=e,n.suppressed=t,n});Object.defineProperty(t,"__esModule",{value:!0}),t.SessionGetter=void 0;const i=r(3350),o=r(3188),a=r(5904),c=r(3649),d=r(6158),l=r(4716);class u extends i.CachedGetter{constructor(e,t,r){super((async(e,n,s)=>{if(void 0===s){const t="The session was deleted by another process",r=new a.TokenRefreshError(e,t);throw this.dispatchEvent("deleted",{sub:e,cause:r}),r}const{dpopKey:i,tokenSet:o}=s;if(e!==o.sub)throw new a.TokenRefreshError(e,"Stored session sub mismatch");if(!o.refresh_token)throw new a.TokenRefreshError(e,"No refresh token available");const c=await t.fromIssuer(o.iss,i);n?.signal?.throwIfAborted();try{const t=await c.refresh(o);if(e!==t.sub)throw new a.TokenRefreshError(e,"Token set sub mismatch");return{dpopKey:i,tokenSet:t}}catch(t){if(t instanceof d.OAuthResponseError&&400===t.status&&"invalid_grant"===t.error){if(!r.hasImplementationLock){await new Promise((e=>setTimeout(e,1e3)));const r=await this.getStored(e);if(void 0===r){const r="The session was deleted by another process";throw new a.TokenRefreshError(e,r,{cause:t})}if(r.tokenSet.access_token!==o.access_token||r.tokenSet.refresh_token!==o.refresh_token)return r}const n=t.errorDescription??"The session was revoked";throw new a.TokenRefreshError(e,n,{cause:t})}throw t}}),e,{isStale:(e,{tokenSet:t})=>null!=t.expires_at&&new Date(t.expires_at).getTime()<Date.now()+1e4+3e4*Math.random(),onStoreError:async(e,r,{tokenSet:n,dpopKey:s})=>{const i=await t.fromIssuer(n.iss,s);throw await i.revoke(n.refresh_token??n.access_token),e},deleteOnError:async e=>e instanceof a.TokenRefreshError||e instanceof c.TokenRevokedError||e instanceof o.TokenInvalidError}),Object.defineProperty(this,"runtime",{enumerable:!0,configurable:!0,writable:!0,value:r}),Object.defineProperty(this,"eventTarget",{enumerable:!0,configurable:!0,writable:!0,value:new l.CustomEventTarget})}addEventListener(e,t,r){this.eventTarget.addEventListener(e,t,r)}removeEventListener(e,t,r){this.eventTarget.removeEventListener(e,t,r)}dispatchEvent(e,t){return this.eventTarget.dispatchCustomEvent(e,t)}async setStored(e,t){if(e!==t.tokenSet.sub)throw new TypeError("Token set does not match the expected sub");await super.setStored(e,t),this.dispatchEvent("updated",{sub:e,...t})}async delStored(e,t){await super.delStored(e,t),this.dispatchEvent("deleted",{sub:e,cause:t})}async getSession(e,t){return this.get(e,{noCache:!0===t,allowStale:!1===t})}async get(e,t){const r=await this.runtime.usingLock(`@atproto-oauth-client-${e}`,(async()=>{const r={stack:[],error:void 0,hasError:!1};try{const s=n(r,(0,l.timeoutSignal)(3e4,t),!1),i=n(r,(0,l.combineSignals)([t?.signal,s]),!1);return await super.get(e,{...t,signal:i.signal})}catch(e){r.error=e,r.hasError=!0}finally{s(r)}}));if(e!==r.tokenSet.sub)throw new Error("Token set does not match the expected sub");return r}}t.SessionGetter=u},3179:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},2175:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clientMetadataSchema=void 0;const n=r(8588);t.clientMetadataSchema=n.oauthClientMetadataSchema.extend({client_id:n.oauthClientIdSchema.url()})},4716:function(e,t){var r=this&&this.__classPrivateFieldSet||function(e,t,r,n,s){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?s.call(e,r):s?s.value=r:t.set(e,r),r},n=this&&this.__classPrivateFieldGet||function(e,t,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(e):n?n.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.includesSpaceSeparatedValue=t.CustomEventTarget=t.CustomEvent=t.timeoutSignal=void 0,t.contentMime=function(e){return e.get("content-type")?.split(";")[0].trim()},t.combineSignals=function(e){const t=new AbortController,r=function(e){const r=new Error("This operation was aborted",{cause:this.reason});t.abort(r)};for(const n of e)if(n){if(n.aborted)throw t.abort(),new Error("One of the signals is already aborted",{cause:n.reason});n.addEventListener("abort",r,{signal:t.signal})}return t[Symbol.dispose]=()=>{const e=new Error("AbortController was disposed");t.abort(e)},t},Symbol.dispose??(Symbol.dispose=Symbol("@@dispose")),t.timeoutSignal=(e,t)=>{if(!Number.isInteger(e)||e<0)throw new TypeError("Expected a positive integer");t?.signal?.throwIfAborted();const r=new AbortController,{signal:n}=r;t?.signal?.addEventListener("abort",(e=>r.abort(e)),{once:!0,signal:n});const s=setTimeout((e=>r.abort(e)),e,new Error("Timeout"));return s?.unref?.(),n.addEventListener("abort",(()=>clearTimeout(s)),{once:!0,signal:n}),Object.defineProperty(n,Symbol.dispose,{value:()=>r.abort()}),n},t.CustomEvent=globalThis.CustomEvent??(()=>{var e;class t extends Event{constructor(t,n){if(!arguments.length)throw new TypeError("type argument is required");super(t,n),e.set(this,void 0),r(this,e,n?.detail??null,"f")}get detail(){return n(this,e,"f")}}return e=new WeakMap,Object.defineProperties(t.prototype,{[Symbol.toStringTag]:{writable:!1,enumerable:!1,configurable:!0,value:"CustomEvent"},detail:{enumerable:!0}}),t})(),t.CustomEventTarget=class{constructor(){Object.defineProperty(this,"eventTarget",{enumerable:!0,configurable:!0,writable:!0,value:new EventTarget})}addEventListener(e,t,r){this.eventTarget.addEventListener(e,t,r)}removeEventListener(e,t,r){this.eventTarget.removeEventListener(e,t,r)}dispatchCustomEvent(e,r,n){return this.eventTarget.dispatchEvent(new t.CustomEvent(e,{...n,detail:r}))}},t.includesSpaceSeparatedValue=(e,t)=>{if(0===t.length)throw new TypeError("Value cannot be empty");if(t.includes(" "))throw new TypeError("Value cannot contain spaces");const r=e.length,n=t.length;if(r<n)return!1;let s,i=e.indexOf(t);for(;-1!==i;){if(s=i+n,!(0!==i&&" "!==e[i-1]||s!==r&&" "!==e[s]))return!0;i=e.indexOf(t,s+1)}return!1}},4824:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.validateClientMetadata=function(e,t){if(e.jwks){if(!t)throw new TypeError("Keyset must not be provided when jwks is provided");for(const r of e.jwks.keys){if(!r.kid)throw new TypeError('Key must have a "kid" property');if(!t.has(r.kid))throw new TypeError(`Key with kid "${r.kid}" not found in keyset`)}}e.jwks||e.jwks_uri||!t?.size||(e={...e,jwks:t.toJSON()});const r=s.clientMetadataSchema.parse(e);r.client_id.startsWith("http:")?(0,n.assertOAuthLoopbackClientId)(r.client_id):(0,n.assertOAuthDiscoverableClientId)(r.client_id);const a=r.scope?.split(" ");if(!a?.includes("atproto"))throw new TypeError('Client metadata must include the "atproto" scope');if(!r.response_types.includes("code"))throw new TypeError('"response_types" must include "code"');if(!r.grant_types.includes("authorization_code"))throw new TypeError('"grant_types" must include "authorization_code"');const c=r[i];switch(c){case void 0:throw new TypeError(`${i} must be provided`);case"none":if(r[o])throw new TypeError(`${o} must not be provided when ${i} is "${c}"`);break;case"private_key_jwt":if(!t?.size)throw new TypeError(`A non-empty keyset must be provided when ${i} is "${c}"`);if(!r[o])throw new TypeError(`${o} must be provided when ${i} is "${c}"`);break;default:throw new TypeError(`Invalid "token_endpoint_auth_method" value: ${c}`)}return r};const n=r(8588),s=r(2175),i="token_endpoint_auth_method",o="token_endpoint_auth_signing_alg"},2321:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.atprotoLoopbackClientMetadata=function(e){const{scope:t="atproto",redirect_uris:r=["http://127.0.0.1/","http://[::1]/"]}=(0,n.parseOAuthLoopbackClientId)(e);return{client_id:e,scope:t,redirect_uris:r,client_name:"Loopback client",response_types:["code"],grant_types:["authorization_code","refresh_token"],token_endpoint_auth_method:"none",application_type:"native",dpop_bound_access_tokens:!0}};const n=r(1323)},5185:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CLIENT_ASSERTION_TYPE_JWT_BEARER=void 0,t.CLIENT_ASSERTION_TYPE_JWT_BEARER="urn:ietf:params:oauth:client-assertion-type:jwt-bearer"},8588:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,s)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),s(r(5185),t),s(r(7358),t),s(r(2321),t),s(r(8358),t),s(r(1598),t),s(r(7428),t),s(r(8167),t),s(r(3125),t),s(r(956),t),s(r(5974),t),s(r(1612),t),s(r(3897),t),s(r(4575),t),s(r(284),t),s(r(429),t),s(r(1323),t),s(r(6357),t),s(r(7429),t),s(r(7472),t),s(r(5537),t),s(r(7609),t),s(r(7685),t),s(r(1503),t),s(r(5545),t),s(r(4174),t),s(r(339),t),s(r(8170),t),s(r(9125),t),s(r(7060),t),s(r(323),t),s(r(4256),t),s(r(6278),t),s(r(1766),t),s(r(3035),t),s(r(8911),t),s(r(7936),t),s(r(1935),t),s(r(3803),t),s(r(6072),t)},8358:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthAccessTokenSchema=void 0;const n=r(1614);t.oauthAccessTokenSchema=n.z.string().min(1)},1598:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthAuthorizationCodeGrantTokenRequestSchema=void 0;const n=r(1614);t.oauthAuthorizationCodeGrantTokenRequestSchema=n.z.object({grant_type:n.z.literal("authorization_code"),code:n.z.string().min(1),redirect_uri:n.z.string().url(),code_verifier:n.z.string().min(43).max(128).regex(/^[a-zA-Z0-9-._~]+$/).optional()})},7428:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthAuthorizationDetailsSchema=t.oauthAuthorizationDetailSchema=void 0;const n=r(1614);t.oauthAuthorizationDetailSchema=n.z.object({type:n.z.string(),locations:n.z.array(n.z.string().url()).optional(),actions:n.z.array(n.z.string()).optional(),datatypes:n.z.array(n.z.string()).optional(),identifier:n.z.string().optional(),privileges:n.z.array(n.z.string()).optional()}),t.oauthAuthorizationDetailsSchema=n.z.array(t.oauthAuthorizationDetailSchema)},8167:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthAuthorizationRequestJarSchema=void 0;const n=r(5909),s=r(1614);t.oauthAuthorizationRequestJarSchema=s.z.object({request:s.z.union([n.signedJwtSchema,n.unsignedJwtSchema])})},3125:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthAuthorizationRequestParSchema=void 0;const n=r(1614),s=r(8167),i=r(956);t.oauthAuthorizationRequestParSchema=n.z.union([i.oauthAuthorizationRequestParametersSchema,s.oauthAuthorizationRequestJarSchema])},956:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthAuthorizationRequestParametersSchema=void 0;const n=r(5909),s=r(1614),i=r(7428),o=r(6357),a=r(3287),c=r(4256),d=r(6278),l=r(1935),u=r(3803),h=r(6072);t.oauthAuthorizationRequestParametersSchema=s.z.object({client_id:o.oauthClientIdSchema,state:s.z.string().optional(),redirect_uri:s.z.string().url().optional(),scope:d.oauthScopeSchema.optional(),response_type:c.oauthResponseTypeSchema,code_challenge:s.z.string().optional(),code_challenge_method:a.oauthCodeChallengeMethodSchema.default("S256").optional(),dpop_jkt:s.z.string().optional(),response_mode:s.z.enum(["query","fragment","form_post"]).optional(),nonce:s.z.string().optional(),max_age:s.z.number().int().min(0).optional(),claims:s.z.record(h.oidcEntityTypeSchema,s.z.record(l.oidcClaimsParameterSchema,s.z.union([s.z.literal(null),u.oidcClaimsPropertiesSchema]))).optional(),login_hint:s.z.string().min(1).optional(),ui_locales:s.z.string().regex(/^[a-z]{2}(-[A-Z]{2})?( [a-z]{2}(-[A-Z]{2})?)*$/).optional(),id_token_hint:n.signedJwtSchema.optional(),display:s.z.enum(["page","popup","touch","wap"]).optional(),prompt:s.z.enum(["none","login","consent","select_account"]).optional(),authorization_details:i.oauthAuthorizationDetailsSchema.optional()})},5974:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthAuthorizationRequestQuerySchema=void 0;const n=r(1614),s=r(8167),i=r(956),o=r(1612);t.oauthAuthorizationRequestQuerySchema=n.z.union([i.oauthAuthorizationRequestParametersSchema,s.oauthAuthorizationRequestJarSchema,o.oauthAuthorizationRequestUriSchema])},1612:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthAuthorizationRequestUriSchema=void 0;const n=r(1614),s=r(7060);t.oauthAuthorizationRequestUriSchema=n.z.object({request_uri:s.oauthRequestUriSchema})},3897:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthAuthorizationServerMetadataValidator=t.oauthAuthorizationServerMetadataSchema=void 0;const n=r(1614),s=r(3287),i=r(1503);t.oauthAuthorizationServerMetadataSchema=n.z.object({issuer:i.oauthIssuerIdentifierSchema,claims_supported:n.z.array(n.z.string()).optional(),claims_locales_supported:n.z.array(n.z.string()).optional(),claims_parameter_supported:n.z.boolean().optional(),request_parameter_supported:n.z.boolean().optional(),request_uri_parameter_supported:n.z.boolean().optional(),require_request_uri_registration:n.z.boolean().optional(),scopes_supported:n.z.array(n.z.string()).optional(),subject_types_supported:n.z.array(n.z.string()).optional(),response_types_supported:n.z.array(n.z.string()).optional(),response_modes_supported:n.z.array(n.z.string()).optional(),grant_types_supported:n.z.array(n.z.string()).optional(),code_challenge_methods_supported:n.z.array(s.oauthCodeChallengeMethodSchema).min(1).optional(),ui_locales_supported:n.z.array(n.z.string()).optional(),id_token_signing_alg_values_supported:n.z.array(n.z.string()).optional(),display_values_supported:n.z.array(n.z.string()).optional(),request_object_signing_alg_values_supported:n.z.array(n.z.string()).optional(),authorization_response_iss_parameter_supported:n.z.boolean().optional(),authorization_details_types_supported:n.z.array(n.z.string()).optional(),request_object_encryption_alg_values_supported:n.z.array(n.z.string()).optional(),request_object_encryption_enc_values_supported:n.z.array(n.z.string()).optional(),jwks_uri:n.z.string().url().optional(),authorization_endpoint:n.z.string().url(),token_endpoint:n.z.string().url(),token_endpoint_auth_methods_supported:n.z.array(n.z.string()).optional(),token_endpoint_auth_signing_alg_values_supported:n.z.array(n.z.string()).optional(),revocation_endpoint:n.z.string().url().optional(),introspection_endpoint:n.z.string().url().optional(),pushed_authorization_request_endpoint:n.z.string().url().optional(),require_pushed_authorization_requests:n.z.boolean().optional(),userinfo_endpoint:n.z.string().url().optional(),end_session_endpoint:n.z.string().url().optional(),registration_endpoint:n.z.string().url().optional(),dpop_signing_alg_values_supported:n.z.array(n.z.string()).optional(),protected_resources:n.z.array(n.z.string().url()).optional(),client_id_metadata_document_supported:n.z.boolean().optional()}),t.oauthAuthorizationServerMetadataValidator=t.oauthAuthorizationServerMetadataSchema.superRefine(((e,t)=>{e.require_pushed_authorization_requests&&!e.pushed_authorization_request_endpoint&&t.addIssue({code:n.z.ZodIssueCode.custom,message:'"pushed_authorization_request_endpoint" required when "require_pushed_authorization_requests" is true'})})).superRefine(((e,t)=>{e.response_types_supported&&(e.response_types_supported.includes("code")||t.addIssue({code:n.z.ZodIssueCode.custom,message:'Response type "code" is required'}))}))},4575:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthClientCredentialsGrantTokenRequestSchema=void 0;const n=r(1614);t.oauthClientCredentialsGrantTokenRequestSchema=n.z.object({grant_type:n.z.literal("client_credentials")})},284:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthClientCredentialsSchema=t.oauthClientCredentialsNoneSchema=t.oauthClientCredentialsSecretPostSchema=t.oauthClientCredentialsJwtBearerSchema=void 0;const n=r(1614),s=r(5909),i=r(6357),o=r(5185);t.oauthClientCredentialsJwtBearerSchema=n.z.object({client_id:i.oauthClientIdSchema,client_assertion_type:n.z.literal(o.CLIENT_ASSERTION_TYPE_JWT_BEARER),client_assertion:s.signedJwtSchema}),t.oauthClientCredentialsSecretPostSchema=n.z.object({client_id:i.oauthClientIdSchema,client_secret:n.z.string()}),t.oauthClientCredentialsNoneSchema=n.z.object({client_id:i.oauthClientIdSchema}),t.oauthClientCredentialsSchema=n.z.union([t.oauthClientCredentialsJwtBearerSchema,t.oauthClientCredentialsSecretPostSchema,t.oauthClientCredentialsNoneSchema])},429:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isOAuthClientIdDiscoverable=function(e){try{return s(e),!0}catch{return!1}},t.assertOAuthDiscoverableClientId=function(e){s(e)},t.parseOAuthDiscoverableClientId=s;const n=r(7358);function s(e){const t=new URL(e);if("https:"!==t.protocol)throw new TypeError('ClientID must use the "https:" protocol');if(t.username||t.password)throw new TypeError("ClientID must not contain credentials");if(t.hash)throw new TypeError("ClientID must not contain a fragment");if("localhost"===t.hostname)throw new TypeError('ClientID hostname must not be "localhost"');if("/"===t.pathname)throw new TypeError('ClientID must contain a path component (e.g. "/client-metadata.json")');if(t.pathname.endsWith("/"))throw new TypeError("ClientID path must not end with a trailing slash");if((0,n.isHostnameIP)(t.hostname))throw new TypeError("ClientID hostname must not be an IP address");if((0,n.extractUrlPath)(e)!==t.pathname)throw new TypeError(`ClientID must be in canonical form ("${t.href}", got "${e}")`);return t}},1323:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isOAuthClientIdLoopback=function(e){try{return o(e),!0}catch{return!1}},t.assertOAuthLoopbackClientId=function(e){o(e)},t.parseOAuthLoopbackClientId=o;const n=r(6278),s=r(7358),i="http://localhost";function o(e){if(!e.startsWith(i))throw new TypeError(`Loopback ClientID must start with "${i}"`);if(e.includes("#",i.length))throw new TypeError("Loopback ClientID must not contain a hash component");const t=e.length>i.length&&"/"===e[i.length]?i.length+1:i.length;if(e.length===t)return{};if("?"!==e[t])throw new TypeError("Loopback ClientID must not contain a path component");const r=new URLSearchParams(e.slice(t+1));for(const e of r.keys())if("redirect_uri"!==e&&"scope"!==e)throw new TypeError(`Invalid query parameter "${e}" in client ID`);const o=r.get("scope")??void 0;if(null!=o){if(r.getAll("scope").length>1)throw new TypeError("Loopback ClientID must contain at most one scope query parameter");if(!n.oauthScopeSchema.safeParse(o).success)throw new TypeError("Invalid scope query parameter in client ID")}const a=r.has("redirect_uri")?r.getAll("redirect_uri"):void 0;if(a)for(const e of a){const t=(0,s.safeUrl)(e);if(!t)throw new TypeError(`Invalid redirect_uri in client ID: ${e}`);if("http:"!==t.protocol)throw new TypeError(`Loopback ClientID must use "http:" redirect_uri's (got ${e})`);if("localhost"===t.hostname)throw new TypeError(`Loopback ClientID must not use "localhost" as redirect_uri hostname (got ${e})`);if(!(0,s.isLoopbackHost)(t.hostname))throw new TypeError(`Loopback ClientID must use loopback addresses as redirect_uri's (got ${e})`)}return{scope:o,redirect_uris:a}}},6357:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthClientIdSchema=void 0;const n=r(1614);t.oauthClientIdSchema=n.z.string().min(1)},7429:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthClientMetadataSchema=void 0;const n=r(5909),s=r(1614),i=r(6357),o=r(7472),a=r(7609),c=r(4256),d=r(6278);t.oauthClientMetadataSchema=s.z.object({redirect_uris:s.z.array(s.z.string().url()).nonempty(),response_types:s.z.array(c.oauthResponseTypeSchema).nonempty().default(["code"]),grant_types:s.z.array(a.oauthGrantTypeSchema).nonempty().default(["authorization_code"]),scope:d.oauthScopeSchema.optional(),token_endpoint_auth_method:o.oauthEndpointAuthMethod.default("none").optional(),token_endpoint_auth_signing_alg:s.z.string().optional(),userinfo_signed_response_alg:s.z.string().optional(),userinfo_encrypted_response_alg:s.z.string().optional(),jwks_uri:s.z.string().url().optional(),jwks:n.jwksPubSchema.optional(),application_type:s.z.enum(["web","native"]).default("web").optional(),subject_type:s.z.enum(["public","pairwise"]).default("public").optional(),request_object_signing_alg:s.z.string().optional(),id_token_signed_response_alg:s.z.string().optional(),authorization_signed_response_alg:s.z.string().default("RS256").optional(),authorization_encrypted_response_enc:s.z.enum(["A128CBC-HS256"]).optional(),authorization_encrypted_response_alg:s.z.string().optional(),client_id:i.oauthClientIdSchema.optional(),client_name:s.z.string().optional(),client_uri:s.z.string().url().optional(),policy_uri:s.z.string().url().optional(),tos_uri:s.z.string().url().optional(),logo_uri:s.z.string().url().optional(),default_max_age:s.z.number().optional(),require_auth_time:s.z.boolean().optional(),contacts:s.z.array(s.z.string().email()).optional(),tls_client_certificate_bound_access_tokens:s.z.boolean().optional(),dpop_bound_access_tokens:s.z.boolean().optional(),authorization_details_types:s.z.array(s.z.string()).optional()})},3287:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthCodeChallengeMethodSchema=void 0;const n=r(1614);t.oauthCodeChallengeMethodSchema=n.z.enum(["S256","plain"])},7472:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthEndpointAuthMethod=void 0;const n=r(1614);t.oauthEndpointAuthMethod=n.z.enum(["client_secret_basic","client_secret_jwt","client_secret_post","none","private_key_jwt","self_signed_tls_client_auth","tls_client_auth"])},5537:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OAUTH_ENDPOINT_NAMES=void 0,t.OAUTH_ENDPOINT_NAMES=["token","revocation","introspection","pushed_authorization_request"]},7609:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthGrantTypeSchema=void 0;const n=r(1614);t.oauthGrantTypeSchema=n.z.enum(["authorization_code","implicit","refresh_token","password","client_credentials","urn:ietf:params:oauth:grant-type:jwt-bearer","urn:ietf:params:oauth:grant-type:saml2-bearer"])},7685:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},1503:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthIssuerIdentifierSchema=void 0;const n=r(1614),s=r(7358);t.oauthIssuerIdentifierSchema=n.z.string().superRefine(((e,t)=>{if(e.endsWith("/"))return t.addIssue({code:n.z.ZodIssueCode.custom,message:"Issuer URL must not end with a slash"}),!1;const r=(0,s.safeUrl)(e);return r?"https:"!==r.protocol&&"http:"!==r.protocol?(t.addIssue({code:n.z.ZodIssueCode.custom,message:`Invalid issuer URL protocol "${r.protocol}"`}),!1):r.username||r.password?(t.addIssue({code:n.z.ZodIssueCode.custom,message:"Issuer URL must not contain a username or password"}),!1):r.hash||r.search?(t.addIssue({code:n.z.ZodIssueCode.custom,message:"Issuer URL must not contain a query or fragment"}),!1):e===("/"===r.pathname?r.origin:r.href)||(t.addIssue({code:n.z.ZodIssueCode.custom,message:"Issuer URL must be in the canonical form"}),!1):(t.addIssue({code:n.z.ZodIssueCode.custom,message:"Invalid url"}),!1)}))},5545:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthParResponseSchema=void 0;const n=r(1614);t.oauthParResponseSchema=n.z.object({request_uri:n.z.string(),expires_in:n.z.number().int().positive()})},4174:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthPasswordGrantTokenRequestSchema=void 0;const n=r(1614);t.oauthPasswordGrantTokenRequestSchema=n.z.object({grant_type:n.z.literal("password"),username:n.z.string(),password:n.z.string()})},339:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthProtectedResourceMetadataSchema=void 0;const n=r(1614),s=r(1503);t.oauthProtectedResourceMetadataSchema=n.z.object({resource:n.z.string().url(),authorization_servers:n.z.array(s.oauthIssuerIdentifierSchema).optional(),jwks_uri:n.z.string().url().optional(),scopes_supported:n.z.array(n.z.string()).optional(),bearer_methods_supported:n.z.array(n.z.enum(["header","body","query"])).optional(),resource_signing_alg_values_supported:n.z.array(n.z.string()).optional(),resource_documentation:n.z.string().url().optional(),resource_policy_uri:n.z.string().url().optional(),resource_tos_uri:n.z.string().url().optional()})},8170:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthRefreshTokenGrantTokenRequestSchema=void 0;const n=r(1614),s=r(9125);t.oauthRefreshTokenGrantTokenRequestSchema=n.z.object({grant_type:n.z.literal("refresh_token"),refresh_token:s.oauthRefreshTokenSchema})},9125:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthRefreshTokenSchema=void 0;const n=r(1614);t.oauthRefreshTokenSchema=n.z.string().min(1)},7060:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthRequestUriSchema=void 0;const n=r(1614);t.oauthRequestUriSchema=n.z.string()},323:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthResponseModeSchema=void 0;const n=r(1614);t.oauthResponseModeSchema=n.z.enum(["query","fragment","form_post"])},4256:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthResponseTypeSchema=void 0;const n=r(1614);t.oauthResponseTypeSchema=n.z.enum(["code","token","none","code id_token token","code id_token","code token","id_token token","id_token"])},6278:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthScopeSchema=void 0;const n=r(1614);t.oauthScopeSchema=n.z.string().regex(/^[\x21\x23-\x5B\x5D-\x7E]+(?: [\x21\x23-\x5B\x5D-\x7E]+)*$/)},1766:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthTokenIdentificationSchema=void 0;const n=r(1614),s=r(8358),i=r(9125);t.oauthTokenIdentificationSchema=n.z.object({token:n.z.union([s.oauthAccessTokenSchema,i.oauthRefreshTokenSchema]),token_type_hint:n.z.enum(["access_token","refresh_token"]).optional()})},3035:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthTokenRequestSchema=void 0;const n=r(1614),s=r(1598),i=r(4575),o=r(4174),a=r(8170);t.oauthTokenRequestSchema=n.z.discriminatedUnion("grant_type",[s.oauthAuthorizationCodeGrantTokenRequestSchema,a.oauthRefreshTokenGrantTokenRequestSchema,o.oauthPasswordGrantTokenRequestSchema,i.oauthClientCredentialsGrantTokenRequestSchema])},8911:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthTokenResponseSchema=void 0;const n=r(5909),s=r(1614),i=r(7428),o=r(7936);t.oauthTokenResponseSchema=s.z.object({access_token:s.z.string(),token_type:o.oauthTokenTypeSchema,scope:s.z.string().optional(),refresh_token:s.z.string().optional(),expires_in:s.z.number().optional(),id_token:n.signedJwtSchema.optional(),authorization_details:i.oauthAuthorizationDetailsSchema.optional()}).passthrough()},7936:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthTokenTypeSchema=void 0;const n=r(1614);t.oauthTokenTypeSchema=n.z.union([n.z.string().regex(/^DPoP$/i).transform((()=>"DPoP")),n.z.string().regex(/^Bearer$/i).transform((()=>"Bearer"))])},1935:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oidcClaimsParameterSchema=void 0;const n=r(1614);t.oidcClaimsParameterSchema=n.z.enum(["auth_time","nonce","acr","name","family_name","given_name","middle_name","nickname","preferred_username","gender","picture","profile","website","birthdate","zoneinfo","locale","updated_at","email","email_verified","phone_number","phone_number_verified","address"])},3803:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oidcClaimsPropertiesSchema=void 0;const n=r(1614),s=n.z.union([n.z.string(),n.z.number(),n.z.boolean()]);t.oidcClaimsPropertiesSchema=n.z.object({essential:n.z.boolean().optional(),value:s.optional(),values:n.z.array(s).optional()})},6072:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oidcEntityTypeSchema=void 0;const n=r(1614);t.oidcEntityTypeSchema=n.z.enum(["userinfo","id_token"])},7358:(e,t)=>{function r(e){return"localhost"===e||"127.0.0.1"===e||"[::1]"===e}Object.defineProperty(t,"__esModule",{value:!0}),t.isHostnameIP=function(e){return!!e.match(/^\d+\.\d+\.\d+\.\d+$/)||!(!e.startsWith("[")||!e.endsWith("]"))},t.isLoopbackHost=r,t.isLoopbackUrl=function(e){return r(("string"==typeof e?new URL(e):e).hostname)},t.safeUrl=function(e){try{return new URL(e)}catch{return null}},t.extractUrlPath=function(e){const t=e.startsWith("https://")?8:e.startsWith("http://")?7:-1;if(-1===t)throw new TypeError('URL must use the "https:" or "http:" protocol');const r=e.indexOf("#",t),n=e.indexOf("?",t),s=-1!==n&&(-1===r||n<r)?n:-1,i=-1===r?-1===s?e.length:s:-1===s?r:Math.min(r,s),o=e.indexOf("/",t),a=-1===o||o>i?i:o;if(t===a)throw new TypeError("URL must contain a host");return e.substring(a,i)}},9096:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LRUCache=void 0;const r="object"==typeof performance&&performance&&"function"==typeof performance.now?performance:Date,n=new Set,s="object"==typeof process&&process?process:{},i=(e,t,r,n)=>{"function"==typeof s.emitWarning?s.emitWarning(e,t,r,n):console.error(`[${r}] ${t}: ${e}`)};let o=globalThis.AbortController,a=globalThis.AbortSignal;if(void 0===o){a=class{onabort;_onabort=[];reason;aborted=!1;addEventListener(e,t){this._onabort.push(t)}},o=class{constructor(){t()}signal=new a;abort(e){if(!this.signal.aborted){this.signal.reason=e,this.signal.aborted=!0;for(const t of this.signal._onabort)t(e);this.signal.onabort?.(e)}}};let e="1"!==s.env?.LRU_CACHE_IGNORE_AC_WARNING;const t=()=>{e&&(e=!1,i("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.","NO_ABORT_CONTROLLER","ENOTSUP",t))}}Symbol("type");const c=e=>e&&e===Math.floor(e)&&e>0&&isFinite(e),d=e=>c(e)?e<=Math.pow(2,8)?Uint8Array:e<=Math.pow(2,16)?Uint16Array:e<=Math.pow(2,32)?Uint32Array:e<=Number.MAX_SAFE_INTEGER?l:null:null;class l extends Array{constructor(e){super(e),this.fill(0)}}class u{heap;length;static#t=!1;static create(e){const t=d(e);if(!t)return[];u.#t=!0;const r=new u(e,t);return u.#t=!1,r}constructor(e,t){if(!u.#t)throw new TypeError("instantiate Stack using Stack.create(n)");this.heap=new t(e),this.length=0}push(e){this.heap[this.length++]=e}pop(){return this.heap[--this.length]}}class h{#r;#n;#s;#i;#o;#a;ttl;ttlResolution;ttlAutopurge;updateAgeOnGet;updateAgeOnHas;allowStale;noDisposeOnSet;noUpdateTTL;maxEntrySize;sizeCalculation;noDeleteOnFetchRejection;noDeleteOnStaleGet;allowStaleOnFetchAbort;allowStaleOnFetchRejection;ignoreFetchAbort;#c;#d;#l;#u;#h;#p;#f;#y;#m;#w;#g;#v;#b;#_;#S;#E;#k;static unsafeExposeInternals(e){return{starts:e.#b,ttls:e.#_,sizes:e.#v,keyMap:e.#l,keyList:e.#u,valList:e.#h,next:e.#p,prev:e.#f,get head(){return e.#y},get tail(){return e.#m},free:e.#w,isBackgroundFetch:t=>e.#A(t),backgroundFetch:(t,r,n,s)=>e.#P(t,r,n,s),moveToTail:t=>e.#T(t),indexes:t=>e.#I(t),rindexes:t=>e.#O(t),isStale:t=>e.#C(t)}}get max(){return this.#r}get maxSize(){return this.#n}get calculatedSize(){return this.#d}get size(){return this.#c}get fetchMethod(){return this.#o}get memoMethod(){return this.#a}get dispose(){return this.#s}get disposeAfter(){return this.#i}constructor(e){const{max:t=0,ttl:r,ttlResolution:s=1,ttlAutopurge:o,updateAgeOnGet:a,updateAgeOnHas:l,allowStale:p,dispose:f,disposeAfter:y,noDisposeOnSet:m,noUpdateTTL:w,maxSize:g=0,maxEntrySize:v=0,sizeCalculation:b,fetchMethod:_,memoMethod:S,noDeleteOnFetchRejection:E,noDeleteOnStaleGet:k,allowStaleOnFetchRejection:A,allowStaleOnFetchAbort:P,ignoreFetchAbort:T}=e;if(0!==t&&!c(t))throw new TypeError("max option must be a nonnegative integer");const I=t?d(t):Array;if(!I)throw new Error("invalid max value: "+t);if(this.#r=t,this.#n=g,this.maxEntrySize=v||this.#n,this.sizeCalculation=b,this.sizeCalculation){if(!this.#n&&!this.maxEntrySize)throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");if("function"!=typeof this.sizeCalculation)throw new TypeError("sizeCalculation set to non-function")}if(void 0!==S&&"function"!=typeof S)throw new TypeError("memoMethod must be a function if defined");if(this.#a=S,void 0!==_&&"function"!=typeof _)throw new TypeError("fetchMethod must be a function if specified");if(this.#o=_,this.#E=!!_,this.#l=new Map,this.#u=new Array(t).fill(void 0),this.#h=new Array(t).fill(void 0),this.#p=new I(t),this.#f=new I(t),this.#y=0,this.#m=0,this.#w=u.create(t),this.#c=0,this.#d=0,"function"==typeof f&&(this.#s=f),"function"==typeof y?(this.#i=y,this.#g=[]):(this.#i=void 0,this.#g=void 0),this.#S=!!this.#s,this.#k=!!this.#i,this.noDisposeOnSet=!!m,this.noUpdateTTL=!!w,this.noDeleteOnFetchRejection=!!E,this.allowStaleOnFetchRejection=!!A,this.allowStaleOnFetchAbort=!!P,this.ignoreFetchAbort=!!T,0!==this.maxEntrySize){if(0!==this.#n&&!c(this.#n))throw new TypeError("maxSize must be a positive integer if specified");if(!c(this.maxEntrySize))throw new TypeError("maxEntrySize must be a positive integer if specified");this.#x()}if(this.allowStale=!!p,this.noDeleteOnStaleGet=!!k,this.updateAgeOnGet=!!a,this.updateAgeOnHas=!!l,this.ttlResolution=c(s)||0===s?s:1,this.ttlAutopurge=!!o,this.ttl=r||0,this.ttl){if(!c(this.ttl))throw new TypeError("ttl must be a positive integer if specified");this.#j()}if(0===this.#r&&0===this.ttl&&0===this.#n)throw new TypeError("At least one of max, maxSize, or ttl is required");if(!this.ttlAutopurge&&!this.#r&&!this.#n){const e="LRU_CACHE_UNBOUNDED";(e=>!n.has(e))(e)&&(n.add(e),i("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.","UnboundedCacheWarning",e,h))}}getRemainingTTL(e){return this.#l.has(e)?1/0:0}#j(){const e=new l(this.#r),t=new l(this.#r);this.#_=e,this.#b=t,this.#R=(n,s,i=r.now())=>{if(t[n]=0!==s?i:0,e[n]=s,0!==s&&this.ttlAutopurge){const e=setTimeout((()=>{this.#C(n)&&this.#D(this.#u[n],"expire")}),s+1);e.unref&&e.unref()}},this.#z=n=>{t[n]=0!==e[n]?r.now():0},this.#M=(r,i)=>{if(e[i]){const o=e[i],a=t[i];if(!o||!a)return;r.ttl=o,r.start=a,r.now=n||s();const c=r.now-a;r.remainingTTL=o-c}};let n=0;const s=()=>{const e=r.now();if(this.ttlResolution>0){n=e;const t=setTimeout((()=>n=0),this.ttlResolution);t.unref&&t.unref()}return e};this.getRemainingTTL=r=>{const i=this.#l.get(r);if(void 0===i)return 0;const o=e[i],a=t[i];return o&&a?o-((n||s())-a):1/0},this.#C=r=>{const i=t[r],o=e[r];return!!o&&!!i&&(n||s())-i>o}}#z=()=>{};#M=()=>{};#R=()=>{};#C=()=>!1;#x(){const e=new l(this.#r);this.#d=0,this.#v=e,this.#K=t=>{this.#d-=e[t],e[t]=0},this.#L=(e,t,r,n)=>{if(this.#A(t))return 0;if(!c(r)){if(!n)throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");if("function"!=typeof n)throw new TypeError("sizeCalculation must be a function");if(r=n(t,e),!c(r))throw new TypeError("sizeCalculation return invalid (expect positive integer)")}return r},this.#H=(t,r,n)=>{if(e[t]=r,this.#n){const r=this.#n-e[t];for(;this.#d>r;)this.#W(!0)}this.#d+=e[t],n&&(n.entrySize=r,n.totalCalculatedSize=this.#d)}}#K=e=>{};#H=(e,t,r)=>{};#L=(e,t,r,n)=>{if(r||n)throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");return 0};*#I({allowStale:e=this.allowStale}={}){if(this.#c)for(let t=this.#m;this.#U(t)&&(!e&&this.#C(t)||(yield t),t!==this.#y);)t=this.#f[t]}*#O({allowStale:e=this.allowStale}={}){if(this.#c)for(let t=this.#y;this.#U(t)&&(!e&&this.#C(t)||(yield t),t!==this.#m);)t=this.#p[t]}#U(e){return void 0!==e&&this.#l.get(this.#u[e])===e}*entries(){for(const e of this.#I())void 0===this.#h[e]||void 0===this.#u[e]||this.#A(this.#h[e])||(yield[this.#u[e],this.#h[e]])}*rentries(){for(const e of this.#O())void 0===this.#h[e]||void 0===this.#u[e]||this.#A(this.#h[e])||(yield[this.#u[e],this.#h[e]])}*keys(){for(const e of this.#I()){const t=this.#u[e];void 0===t||this.#A(this.#h[e])||(yield t)}}*rkeys(){for(const e of this.#O()){const t=this.#u[e];void 0===t||this.#A(this.#h[e])||(yield t)}}*values(){for(const e of this.#I())void 0===this.#h[e]||this.#A(this.#h[e])||(yield this.#h[e])}*rvalues(){for(const e of this.#O())void 0===this.#h[e]||this.#A(this.#h[e])||(yield this.#h[e])}[Symbol.iterator](){return this.entries()}[Symbol.toStringTag]="LRUCache";find(e,t={}){for(const r of this.#I()){const n=this.#h[r],s=this.#A(n)?n.__staleWhileFetching:n;if(void 0!==s&&e(s,this.#u[r],this))return this.get(this.#u[r],t)}}forEach(e,t=this){for(const r of this.#I()){const n=this.#h[r],s=this.#A(n)?n.__staleWhileFetching:n;void 0!==s&&e.call(t,s,this.#u[r],this)}}rforEach(e,t=this){for(const r of this.#O()){const n=this.#h[r],s=this.#A(n)?n.__staleWhileFetching:n;void 0!==s&&e.call(t,s,this.#u[r],this)}}purgeStale(){let e=!1;for(const t of this.#O({allowStale:!0}))this.#C(t)&&(this.#D(this.#u[t],"expire"),e=!0);return e}info(e){const t=this.#l.get(e);if(void 0===t)return;const n=this.#h[t],s=this.#A(n)?n.__staleWhileFetching:n;if(void 0===s)return;const i={value:s};if(this.#_&&this.#b){const e=this.#_[t],n=this.#b[t];if(e&&n){const t=e-(r.now()-n);i.ttl=t,i.start=Date.now()}}return this.#v&&(i.size=this.#v[t]),i}dump(){const e=[];for(const t of this.#I({allowStale:!0})){const n=this.#u[t],s=this.#h[t],i=this.#A(s)?s.__staleWhileFetching:s;if(void 0===i||void 0===n)continue;const o={value:i};if(this.#_&&this.#b){o.ttl=this.#_[t];const e=r.now()-this.#b[t];o.start=Math.floor(Date.now()-e)}this.#v&&(o.size=this.#v[t]),e.unshift([n,o])}return e}load(e){this.clear();for(const[t,n]of e){if(n.start){const e=Date.now()-n.start;n.start=r.now()-e}this.set(t,n.value,n)}}set(e,t,r={}){if(void 0===t)return this.delete(e),this;const{ttl:n=this.ttl,start:s,noDisposeOnSet:i=this.noDisposeOnSet,sizeCalculation:o=this.sizeCalculation,status:a}=r;let{noUpdateTTL:c=this.noUpdateTTL}=r;const d=this.#L(e,t,r.size||0,o);if(this.maxEntrySize&&d>this.maxEntrySize)return a&&(a.set="miss",a.maxEntrySizeExceeded=!0),this.#D(e,"set"),this;let l=0===this.#c?void 0:this.#l.get(e);if(void 0===l)l=0===this.#c?this.#m:0!==this.#w.length?this.#w.pop():this.#c===this.#r?this.#W(!1):this.#c,this.#u[l]=e,this.#h[l]=t,this.#l.set(e,l),this.#p[this.#m]=l,this.#f[l]=this.#m,this.#m=l,this.#c++,this.#H(l,d,a),a&&(a.set="add"),c=!1;else{this.#T(l);const r=this.#h[l];if(t!==r){if(this.#E&&this.#A(r)){r.__abortController.abort(new Error("replaced"));const{__staleWhileFetching:t}=r;void 0===t||i||(this.#S&&this.#s?.(t,e,"set"),this.#k&&this.#g?.push([t,e,"set"]))}else i||(this.#S&&this.#s?.(r,e,"set"),this.#k&&this.#g?.push([r,e,"set"]));if(this.#K(l),this.#H(l,d,a),this.#h[l]=t,a){a.set="replace";const e=r&&this.#A(r)?r.__staleWhileFetching:r;void 0!==e&&(a.oldValue=e)}}else a&&(a.set="update")}if(0===n||this.#_||this.#j(),this.#_&&(c||this.#R(l,n,s),a&&this.#M(a,l)),!i&&this.#k&&this.#g){const e=this.#g;let t;for(;t=e?.shift();)this.#i?.(...t)}return this}pop(){try{for(;this.#c;){const e=this.#h[this.#y];if(this.#W(!0),this.#A(e)){if(e.__staleWhileFetching)return e.__staleWhileFetching}else if(void 0!==e)return e}}finally{if(this.#k&&this.#g){const e=this.#g;let t;for(;t=e?.shift();)this.#i?.(...t)}}}#W(e){const t=this.#y,r=this.#u[t],n=this.#h[t];return this.#E&&this.#A(n)?n.__abortController.abort(new Error("evicted")):(this.#S||this.#k)&&(this.#S&&this.#s?.(n,r,"evict"),this.#k&&this.#g?.push([n,r,"evict"])),this.#K(t),e&&(this.#u[t]=void 0,this.#h[t]=void 0,this.#w.push(t)),1===this.#c?(this.#y=this.#m=0,this.#w.length=0):this.#y=this.#p[t],this.#l.delete(r),this.#c--,t}has(e,t={}){const{updateAgeOnHas:r=this.updateAgeOnHas,status:n}=t,s=this.#l.get(e);if(void 0!==s){const e=this.#h[s];if(this.#A(e)&&void 0===e.__staleWhileFetching)return!1;if(!this.#C(s))return r&&this.#z(s),n&&(n.has="hit",this.#M(n,s)),!0;n&&(n.has="stale",this.#M(n,s))}else n&&(n.has="miss");return!1}peek(e,t={}){const{allowStale:r=this.allowStale}=t,n=this.#l.get(e);if(void 0===n||!r&&this.#C(n))return;const s=this.#h[n];return this.#A(s)?s.__staleWhileFetching:s}#P(e,t,r,n){const s=void 0===t?void 0:this.#h[t];if(this.#A(s))return s;const i=new o,{signal:a}=r;a?.addEventListener("abort",(()=>i.abort(a.reason)),{signal:i.signal});const c={signal:i.signal,options:r,context:n},d=(n,s=!1)=>{const{aborted:o}=i.signal,a=r.ignoreFetchAbort&&void 0!==n;if(r.status&&(o&&!s?(r.status.fetchAborted=!0,r.status.fetchError=i.signal.reason,a&&(r.status.fetchAbortIgnored=!0)):r.status.fetchResolved=!0),o&&!a&&!s)return l(i.signal.reason);const d=u;return this.#h[t]===u&&(void 0===n?d.__staleWhileFetching?this.#h[t]=d.__staleWhileFetching:this.#D(e,"fetch"):(r.status&&(r.status.fetchUpdated=!0),this.set(e,n,c.options))),n},l=n=>{const{aborted:s}=i.signal,o=s&&r.allowStaleOnFetchAbort,a=o||r.allowStaleOnFetchRejection,c=a||r.noDeleteOnFetchRejection,d=u;if(this.#h[t]===u&&(c&&void 0!==d.__staleWhileFetching?o||(this.#h[t]=d.__staleWhileFetching):this.#D(e,"fetch")),a)return r.status&&void 0!==d.__staleWhileFetching&&(r.status.returnedStale=!0),d.__staleWhileFetching;if(d.__returned===d)throw n};r.status&&(r.status.fetchDispatched=!0);const u=new Promise(((t,n)=>{const o=this.#o?.(e,s,c);o&&o instanceof Promise&&o.then((e=>t(void 0===e?void 0:e)),n),i.signal.addEventListener("abort",(()=>{r.ignoreFetchAbort&&!r.allowStaleOnFetchAbort||(t(void 0),r.allowStaleOnFetchAbort&&(t=e=>d(e,!0)))}))})).then(d,(e=>(r.status&&(r.status.fetchRejected=!0,r.status.fetchError=e),l(e)))),h=Object.assign(u,{__abortController:i,__staleWhileFetching:s,__returned:void 0});return void 0===t?(this.set(e,h,{...c.options,status:void 0}),t=this.#l.get(e)):this.#h[t]=h,h}#A(e){if(!this.#E)return!1;const t=e;return!!t&&t instanceof Promise&&t.hasOwnProperty("__staleWhileFetching")&&t.__abortController instanceof o}async fetch(e,t={}){const{allowStale:r=this.allowStale,updateAgeOnGet:n=this.updateAgeOnGet,noDeleteOnStaleGet:s=this.noDeleteOnStaleGet,ttl:i=this.ttl,noDisposeOnSet:o=this.noDisposeOnSet,size:a=0,sizeCalculation:c=this.sizeCalculation,noUpdateTTL:d=this.noUpdateTTL,noDeleteOnFetchRejection:l=this.noDeleteOnFetchRejection,allowStaleOnFetchRejection:u=this.allowStaleOnFetchRejection,ignoreFetchAbort:h=this.ignoreFetchAbort,allowStaleOnFetchAbort:p=this.allowStaleOnFetchAbort,context:f,forceRefresh:y=!1,status:m,signal:w}=t;if(!this.#E)return m&&(m.fetch="get"),this.get(e,{allowStale:r,updateAgeOnGet:n,noDeleteOnStaleGet:s,status:m});const g={allowStale:r,updateAgeOnGet:n,noDeleteOnStaleGet:s,ttl:i,noDisposeOnSet:o,size:a,sizeCalculation:c,noUpdateTTL:d,noDeleteOnFetchRejection:l,allowStaleOnFetchRejection:u,allowStaleOnFetchAbort:p,ignoreFetchAbort:h,status:m,signal:w};let v=this.#l.get(e);if(void 0===v){m&&(m.fetch="miss");const t=this.#P(e,v,g,f);return t.__returned=t}{const t=this.#h[v];if(this.#A(t)){const e=r&&void 0!==t.__staleWhileFetching;return m&&(m.fetch="inflight",e&&(m.returnedStale=!0)),e?t.__staleWhileFetching:t.__returned=t}const s=this.#C(v);if(!y&&!s)return m&&(m.fetch="hit"),this.#T(v),n&&this.#z(v),m&&this.#M(m,v),t;const i=this.#P(e,v,g,f),o=void 0!==i.__staleWhileFetching&&r;return m&&(m.fetch=s?"stale":"refresh",o&&s&&(m.returnedStale=!0)),o?i.__staleWhileFetching:i.__returned=i}}async forceFetch(e,t={}){const r=await this.fetch(e,t);if(void 0===r)throw new Error("fetch() returned undefined");return r}memo(e,t={}){const r=this.#a;if(!r)throw new Error("no memoMethod provided to constructor");const{context:n,forceRefresh:s,...i}=t,o=this.get(e,i);if(!s&&void 0!==o)return o;const a=r(e,o,{options:i,context:n});return this.set(e,a,i),a}get(e,t={}){const{allowStale:r=this.allowStale,updateAgeOnGet:n=this.updateAgeOnGet,noDeleteOnStaleGet:s=this.noDeleteOnStaleGet,status:i}=t,o=this.#l.get(e);if(void 0!==o){const t=this.#h[o],a=this.#A(t);return i&&this.#M(i,o),this.#C(o)?(i&&(i.get="stale"),a?(i&&r&&void 0!==t.__staleWhileFetching&&(i.returnedStale=!0),r?t.__staleWhileFetching:void 0):(s||this.#D(e,"expire"),i&&r&&(i.returnedStale=!0),r?t:void 0)):(i&&(i.get="hit"),a?t.__staleWhileFetching:(this.#T(o),n&&this.#z(o),t))}i&&(i.get="miss")}#Z(e,t){this.#f[t]=e,this.#p[e]=t}#T(e){e!==this.#m&&(e===this.#y?this.#y=this.#p[e]:this.#Z(this.#f[e],this.#p[e]),this.#Z(this.#m,e),this.#m=e)}delete(e){return this.#D(e,"delete")}#D(e,t){let r=!1;if(0!==this.#c){const n=this.#l.get(e);if(void 0!==n)if(r=!0,1===this.#c)this.#N(t);else{this.#K(n);const r=this.#h[n];if(this.#A(r)?r.__abortController.abort(new Error("deleted")):(this.#S||this.#k)&&(this.#S&&this.#s?.(r,e,t),this.#k&&this.#g?.push([r,e,t])),this.#l.delete(e),this.#u[n]=void 0,this.#h[n]=void 0,n===this.#m)this.#m=this.#f[n];else if(n===this.#y)this.#y=this.#p[n];else{const e=this.#f[n];this.#p[e]=this.#p[n];const t=this.#p[n];this.#f[t]=this.#f[n]}this.#c--,this.#w.push(n)}}if(this.#k&&this.#g?.length){const e=this.#g;let t;for(;t=e?.shift();)this.#i?.(...t)}return r}clear(){return this.#N("delete")}#N(e){for(const t of this.#O({allowStale:!0})){const r=this.#h[t];if(this.#A(r))r.__abortController.abort(new Error("deleted"));else{const n=this.#u[t];this.#S&&this.#s?.(r,n,e),this.#k&&this.#g?.push([r,n,e])}}if(this.#l.clear(),this.#h.fill(void 0),this.#u.fill(void 0),this.#_&&this.#b&&(this.#_.fill(0),this.#b.fill(0)),this.#v&&this.#v.fill(0),this.#y=0,this.#m=0,this.#w.length=0,this.#d=0,this.#c=0,this.#k&&this.#g){const e=this.#g;let t;for(;t=e?.shift();)this.#i?.(...t)}}}t.LRUCache=h},5948:(e,t,r)=>{r.r(t),r.d(t,{CompactEncrypt:()=>yt,CompactSign:()=>wt,EmbeddedJWK:()=>Tt,EncryptJWT:()=>Et,FlattenedEncrypt:()=>Qe,FlattenedSign:()=>mt,GeneralEncrypt:()=>tt,GeneralSign:()=>vt,SignJWT:()=>St,UnsecuredJWT:()=>Lt,base64url:()=>s,calculateJwkThumbprint:()=>At,calculateJwkThumbprintUri:()=>Pt,compactDecrypt:()=>$e,compactVerify:()=>ot,createLocalJWKSet:()=>jt,createRemoteJWKSet:()=>Mt,cryptoRuntime:()=>Ft,decodeJwt:()=>Zt,decodeProtectedHeader:()=>Ut,errors:()=>n,experimental_jwksCache:()=>Kt,exportJWK:()=>Xe,exportPKCS8:()=>Ge,exportSPKI:()=>qe,flattenedDecrypt:()=>Je,flattenedVerify:()=>it,generalDecrypt:()=>Fe,generalVerify:()=>at,generateKeyPair:()=>Jt,generateSecret:()=>$t,importJWK:()=>De,importPKCS8:()=>Re,importSPKI:()=>xe,importX509:()=>je,jwksCache:()=>Dt,jwtDecrypt:()=>ft,jwtVerify:()=>pt});var n={};r.r(n),r.d(n,{JOSEAlgNotAllowed:()=>E,JOSEError:()=>b,JOSENotSupported:()=>k,JWEDecryptionFailed:()=>A,JWEInvalid:()=>P,JWKInvalid:()=>O,JWKSInvalid:()=>C,JWKSMultipleMatchingKeys:()=>j,JWKSNoMatchingKey:()=>x,JWKSTimeout:()=>R,JWSInvalid:()=>T,JWSSignatureVerificationFailed:()=>D,JWTClaimValidationFailed:()=>_,JWTExpired:()=>S,JWTInvalid:()=>I});var s={};r.r(s),r.d(s,{decode:()=>Wt,encode:()=>Ht});const i=crypto,o=e=>e instanceof CryptoKey,a=async(e,t)=>{const r=`SHA-${e.slice(-3)}`;return new Uint8Array(await i.subtle.digest(r,t))},c=new TextEncoder,d=new TextDecoder,l=2**32;function u(...e){const t=e.reduce(((e,{length:t})=>e+t),0),r=new Uint8Array(t);let n=0;for(const t of e)r.set(t,n),n+=t.length;return r}function h(e,t,r){if(t<0||t>=l)throw new RangeError(`value must be >= 0 and <= 4294967295. Received ${t}`);e.set([t>>>24,t>>>16,t>>>8,255&t],r)}function p(e){const t=Math.floor(e/l),r=e%l,n=new Uint8Array(8);return h(n,t,0),h(n,r,4),n}function f(e){const t=new Uint8Array(4);return h(t,e),t}function y(e){return u(f(e.length),e)}const m=e=>{let t=e;"string"==typeof t&&(t=c.encode(t));const r=[];for(let e=0;e<t.length;e+=32768)r.push(String.fromCharCode.apply(null,t.subarray(e,e+32768)));return btoa(r.join(""))},w=e=>m(e).replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_"),g=e=>{const t=atob(e),r=new Uint8Array(t.length);for(let e=0;e<t.length;e++)r[e]=t.charCodeAt(e);return r},v=e=>{let t=e;t instanceof Uint8Array&&(t=d.decode(t)),t=t.replace(/-/g,"+").replace(/_/g,"/").replace(/\s/g,"");try{return g(t)}catch{throw new TypeError("The input to be decoded is not correctly encoded.")}};class b extends Error{constructor(e,t){super(e,t),this.code="ERR_JOSE_GENERIC",this.name=this.constructor.name,Error.captureStackTrace?.(this,this.constructor)}}b.code="ERR_JOSE_GENERIC";class _ extends b{constructor(e,t,r="unspecified",n="unspecified"){super(e,{cause:{claim:r,reason:n,payload:t}}),this.code="ERR_JWT_CLAIM_VALIDATION_FAILED",this.claim=r,this.reason=n,this.payload=t}}_.code="ERR_JWT_CLAIM_VALIDATION_FAILED";class S extends b{constructor(e,t,r="unspecified",n="unspecified"){super(e,{cause:{claim:r,reason:n,payload:t}}),this.code="ERR_JWT_EXPIRED",this.claim=r,this.reason=n,this.payload=t}}S.code="ERR_JWT_EXPIRED";class E extends b{constructor(){super(...arguments),this.code="ERR_JOSE_ALG_NOT_ALLOWED"}}E.code="ERR_JOSE_ALG_NOT_ALLOWED";class k extends b{constructor(){super(...arguments),this.code="ERR_JOSE_NOT_SUPPORTED"}}k.code="ERR_JOSE_NOT_SUPPORTED";class A extends b{constructor(e="decryption operation failed",t){super(e,t),this.code="ERR_JWE_DECRYPTION_FAILED"}}A.code="ERR_JWE_DECRYPTION_FAILED";class P extends b{constructor(){super(...arguments),this.code="ERR_JWE_INVALID"}}P.code="ERR_JWE_INVALID";class T extends b{constructor(){super(...arguments),this.code="ERR_JWS_INVALID"}}T.code="ERR_JWS_INVALID";class I extends b{constructor(){super(...arguments),this.code="ERR_JWT_INVALID"}}I.code="ERR_JWT_INVALID";class O extends b{constructor(){super(...arguments),this.code="ERR_JWK_INVALID"}}O.code="ERR_JWK_INVALID";class C extends b{constructor(){super(...arguments),this.code="ERR_JWKS_INVALID"}}C.code="ERR_JWKS_INVALID";class x extends b{constructor(e="no applicable key found in the JSON Web Key Set",t){super(e,t),this.code="ERR_JWKS_NO_MATCHING_KEY"}}x.code="ERR_JWKS_NO_MATCHING_KEY";class j extends b{constructor(e="multiple matching keys found in the JSON Web Key Set",t){super(e,t),this.code="ERR_JWKS_MULTIPLE_MATCHING_KEYS"}}Symbol.asyncIterator,j.code="ERR_JWKS_MULTIPLE_MATCHING_KEYS";class R extends b{constructor(e="request timed out",t){super(e,t),this.code="ERR_JWKS_TIMEOUT"}}R.code="ERR_JWKS_TIMEOUT";class D extends b{constructor(e="signature verification failed",t){super(e,t),this.code="ERR_JWS_SIGNATURE_VERIFICATION_FAILED"}}D.code="ERR_JWS_SIGNATURE_VERIFICATION_FAILED";const z=i.getRandomValues.bind(i);function M(e){switch(e){case"A128GCM":case"A128GCMKW":case"A192GCM":case"A192GCMKW":case"A256GCM":case"A256GCMKW":return 96;case"A128CBC-HS256":case"A192CBC-HS384":case"A256CBC-HS512":return 128;default:throw new k(`Unsupported JWE Algorithm: ${e}`)}}const K=(e,t)=>{if(t.length<<3!==M(e))throw new P("Invalid Initialization Vector length")},L=(e,t)=>{const r=e.byteLength<<3;if(r!==t)throw new P(`Invalid Content Encryption Key length. Expected ${t} bits, got ${r} bits`)};function H(e,t="algorithm.name"){return new TypeError(`CryptoKey does not support this operation, its ${t} must be ${e}`)}function W(e,t){return e.name===t}function U(e){return parseInt(e.name.slice(4),10)}function Z(e,t){if(t.length&&!t.some((t=>e.usages.includes(t)))){let e="CryptoKey does not support this operation, its usages must include ";if(t.length>2){const r=t.pop();e+=`one of ${t.join(", ")}, or ${r}.`}else 2===t.length?e+=`one of ${t[0]} or ${t[1]}.`:e+=`${t[0]}.`;throw new TypeError(e)}}function N(e,t,...r){switch(t){case"A128GCM":case"A192GCM":case"A256GCM":{if(!W(e.algorithm,"AES-GCM"))throw H("AES-GCM");const r=parseInt(t.slice(1,4),10);if(e.algorithm.length!==r)throw H(r,"algorithm.length");break}case"A128KW":case"A192KW":case"A256KW":{if(!W(e.algorithm,"AES-KW"))throw H("AES-KW");const r=parseInt(t.slice(1,4),10);if(e.algorithm.length!==r)throw H(r,"algorithm.length");break}case"ECDH":switch(e.algorithm.name){case"ECDH":case"X25519":case"X448":break;default:throw H("ECDH, X25519, or X448")}break;case"PBES2-HS256+A128KW":case"PBES2-HS384+A192KW":case"PBES2-HS512+A256KW":if(!W(e.algorithm,"PBKDF2"))throw H("PBKDF2");break;case"RSA-OAEP":case"RSA-OAEP-256":case"RSA-OAEP-384":case"RSA-OAEP-512":{if(!W(e.algorithm,"RSA-OAEP"))throw H("RSA-OAEP");const r=parseInt(t.slice(9),10)||1;if(U(e.algorithm.hash)!==r)throw H(`SHA-${r}`,"algorithm.hash");break}default:throw new TypeError("CryptoKey does not support this operation")}Z(e,r)}function J(e,t,...r){if((r=r.filter(Boolean)).length>2){const t=r.pop();e+=`one of type ${r.join(", ")}, or ${t}.`}else 2===r.length?e+=`one of type ${r[0]} or ${r[1]}.`:e+=`of type ${r[0]}.`;return null==t?e+=` Received ${t}`:"function"==typeof t&&t.name?e+=` Received function ${t.name}`:"object"==typeof t&&null!=t&&t.constructor?.name&&(e+=` Received an instance of ${t.constructor.name}`),e}const $=(e,...t)=>J("Key must be ",e,...t);function F(e,t,...r){return J(`Key for the ${e} algorithm must be `,t,...r)}const B=e=>!!o(e)||"KeyObject"===e?.[Symbol.toStringTag],V=["CryptoKey"],q=async(e,t,r,n,s,a)=>{if(!(o(t)||t instanceof Uint8Array))throw new TypeError($(t,...V,"Uint8Array"));if(!n)throw new P("JWE Initialization Vector missing");if(!s)throw new P("JWE Authentication Tag missing");switch(K(e,n),e){case"A128CBC-HS256":case"A192CBC-HS384":case"A256CBC-HS512":return t instanceof Uint8Array&&L(t,parseInt(e.slice(-3),10)),async function(e,t,r,n,s,o){if(!(t instanceof Uint8Array))throw new TypeError($(t,"Uint8Array"));const a=parseInt(e.slice(1,4),10),c=await i.subtle.importKey("raw",t.subarray(a>>3),"AES-CBC",!1,["decrypt"]),d=await i.subtle.importKey("raw",t.subarray(0,a>>3),{hash:"SHA-"+(a<<1),name:"HMAC"},!1,["sign"]),l=u(o,n,r,p(o.length<<3)),h=new Uint8Array((await i.subtle.sign("HMAC",d,l)).slice(0,a>>3));let f,y;try{f=((e,t)=>{if(!(e instanceof Uint8Array))throw new TypeError("First argument must be a buffer");if(!(t instanceof Uint8Array))throw new TypeError("Second argument must be a buffer");if(e.length!==t.length)throw new TypeError("Input buffers must have the same length");const r=e.length;let n=0,s=-1;for(;++s<r;)n|=e[s]^t[s];return 0===n})(s,h)}catch{}if(!f)throw new A;try{y=new Uint8Array(await i.subtle.decrypt({iv:n,name:"AES-CBC"},c,r))}catch{}if(!y)throw new A;return y}(e,t,r,n,s,a);case"A128GCM":case"A192GCM":case"A256GCM":return t instanceof Uint8Array&&L(t,parseInt(e.slice(1,4),10)),async function(e,t,r,n,s,o){let a;t instanceof Uint8Array?a=await i.subtle.importKey("raw",t,"AES-GCM",!1,["decrypt"]):(N(t,e,"decrypt"),a=t);try{return new Uint8Array(await i.subtle.decrypt({additionalData:o,iv:n,name:"AES-GCM",tagLength:128},a,u(r,s)))}catch{throw new A}}(e,t,r,n,s,a);default:throw new k("Unsupported JWE Content Encryption Algorithm")}},G=(...e)=>{const t=e.filter(Boolean);if(0===t.length||1===t.length)return!0;let r;for(const e of t){const t=Object.keys(e);if(r&&0!==r.size)for(const e of t){if(r.has(e))return!1;r.add(e)}else r=new Set(t)}return!0};function X(e){if("object"!=typeof(t=e)||null===t||"[object Object]"!==Object.prototype.toString.call(e))return!1;var t;if(null===Object.getPrototypeOf(e))return!0;let r=e;for(;null!==Object.getPrototypeOf(r);)r=Object.getPrototypeOf(r);return Object.getPrototypeOf(e)===r}const Y=[{hash:"SHA-256",name:"HMAC"},!0,["sign"]];function Q(e,t){if(e.algorithm.length!==parseInt(t.slice(1,4),10))throw new TypeError(`Invalid key size for alg: ${t}`)}function ee(e,t,r){if(o(e))return N(e,t,r),e;if(e instanceof Uint8Array)return i.subtle.importKey("raw",e,"AES-KW",!0,[r]);throw new TypeError($(e,...V,"Uint8Array"))}const te=async(e,t,r)=>{const n=await ee(t,e,"wrapKey");Q(n,e);const s=await i.subtle.importKey("raw",r,...Y);return new Uint8Array(await i.subtle.wrapKey("raw",s,n,"AES-KW"))},re=async(e,t,r)=>{const n=await ee(t,e,"unwrapKey");Q(n,e);const s=await i.subtle.unwrapKey("raw",r,n,"AES-KW",...Y);return new Uint8Array(await i.subtle.exportKey("raw",s))};async function ne(e,t,r,n,s=new Uint8Array(0),d=new Uint8Array(0)){if(!o(e))throw new TypeError($(e,...V));if(N(e,"ECDH"),!o(t))throw new TypeError($(t,...V));N(t,"ECDH","deriveBits");const l=u(y(c.encode(r)),y(s),y(d),f(n));let h;return h="X25519"===e.algorithm.name?256:"X448"===e.algorithm.name?448:Math.ceil(parseInt(e.algorithm.namedCurve.substr(-3),10)/8)<<3,async function(e,t,r){const n=Math.ceil((t>>3)/32),s=new Uint8Array(32*n);for(let t=0;t<n;t++){const n=new Uint8Array(4+e.length+r.length);n.set(f(t+1)),n.set(e,4),n.set(r,4+e.length),s.set(await a("sha256",n),32*t)}return s.slice(0,t>>3)}(new Uint8Array(await i.subtle.deriveBits({name:e.algorithm.name,public:e},t,h)),n,l)}function se(e){if(!o(e))throw new TypeError($(e,...V));return["P-256","P-384","P-521"].includes(e.algorithm.namedCurve)||"X25519"===e.algorithm.name||"X448"===e.algorithm.name}async function ie(e,t,r,n){!function(e){if(!(e instanceof Uint8Array)||e.length<8)throw new P("PBES2 Salt Input must be 8 or more octets")}(e);const s=function(e,t){return u(c.encode(e),new Uint8Array([0]),t)}(t,e),a=parseInt(t.slice(13,16),10),d={hash:`SHA-${t.slice(8,11)}`,iterations:r,name:"PBKDF2",salt:s},l={length:a,name:"AES-KW"},h=await function(e,t){if(e instanceof Uint8Array)return i.subtle.importKey("raw",e,"PBKDF2",!1,["deriveBits"]);if(o(e))return N(e,t,"deriveBits","deriveKey"),e;throw new TypeError($(e,...V,"Uint8Array"))}(n,t);if(h.usages.includes("deriveBits"))return new Uint8Array(await i.subtle.deriveBits(d,h,a));if(h.usages.includes("deriveKey"))return i.subtle.deriveKey(d,h,l,!1,["wrapKey","unwrapKey"]);throw new TypeError('PBKDF2 key "usages" must include "deriveBits" or "deriveKey"')}function oe(e){switch(e){case"RSA-OAEP":case"RSA-OAEP-256":case"RSA-OAEP-384":case"RSA-OAEP-512":return"RSA-OAEP";default:throw new k(`alg ${e} is not supported either by JOSE or your javascript runtime`)}}const ae=(e,t)=>{if(e.startsWith("RS")||e.startsWith("PS")){const{modulusLength:r}=t.algorithm;if("number"!=typeof r||r<2048)throw new TypeError(`${e} requires key modulusLength to be 2048 bits or larger`)}};function ce(e){return X(e)&&"string"==typeof e.kty}const de=async e=>{if(!e.alg)throw new TypeError('"alg" argument is required when "jwk.alg" is not present');const{algorithm:t,keyUsages:r}=function(e){let t,r;switch(e.kty){case"RSA":switch(e.alg){case"PS256":case"PS384":case"PS512":t={name:"RSA-PSS",hash:`SHA-${e.alg.slice(-3)}`},r=e.d?["sign"]:["verify"];break;case"RS256":case"RS384":case"RS512":t={name:"RSASSA-PKCS1-v1_5",hash:`SHA-${e.alg.slice(-3)}`},r=e.d?["sign"]:["verify"];break;case"RSA-OAEP":case"RSA-OAEP-256":case"RSA-OAEP-384":case"RSA-OAEP-512":t={name:"RSA-OAEP",hash:`SHA-${parseInt(e.alg.slice(-3),10)||1}`},r=e.d?["decrypt","unwrapKey"]:["encrypt","wrapKey"];break;default:throw new k('Invalid or unsupported JWK "alg" (Algorithm) Parameter value')}break;case"EC":switch(e.alg){case"ES256":t={name:"ECDSA",namedCurve:"P-256"},r=e.d?["sign"]:["verify"];break;case"ES384":t={name:"ECDSA",namedCurve:"P-384"},r=e.d?["sign"]:["verify"];break;case"ES512":t={name:"ECDSA",namedCurve:"P-521"},r=e.d?["sign"]:["verify"];break;case"ECDH-ES":case"ECDH-ES+A128KW":case"ECDH-ES+A192KW":case"ECDH-ES+A256KW":t={name:"ECDH",namedCurve:e.crv},r=e.d?["deriveBits"]:[];break;default:throw new k('Invalid or unsupported JWK "alg" (Algorithm) Parameter value')}break;case"OKP":switch(e.alg){case"EdDSA":t={name:e.crv},r=e.d?["sign"]:["verify"];break;case"ECDH-ES":case"ECDH-ES+A128KW":case"ECDH-ES+A192KW":case"ECDH-ES+A256KW":t={name:e.crv},r=e.d?["deriveBits"]:[];break;default:throw new k('Invalid or unsupported JWK "alg" (Algorithm) Parameter value')}break;default:throw new k('Invalid or unsupported JWK "kty" (Key Type) Parameter value')}return{algorithm:t,keyUsages:r}}(e),n=[t,e.ext??!1,e.key_ops??r],s={...e};return delete s.alg,delete s.use,i.subtle.importKey("jwk",s,...n)},le=e=>v(e);let ue,he;const pe=e=>"KeyObject"===e?.[Symbol.toStringTag],fe=async(e,t,r,n,s=!1)=>{let i=e.get(t);if(i?.[n])return i[n];const o=await de({...r,alg:n});return s&&Object.freeze(t),i?i[n]=o:e.set(t,{[n]:o}),o},ye=(e,t)=>{if(pe(e)){let r=e.export({format:"jwk"});return delete r.d,delete r.dp,delete r.dq,delete r.p,delete r.q,delete r.qi,r.k?le(r.k):(he||(he=new WeakMap),fe(he,e,r,t))}return ce(e)?e.k?v(e.k):(he||(he=new WeakMap),fe(he,e,e,t,!0)):e},me=(e,t)=>{if(pe(e)){let r=e.export({format:"jwk"});return r.k?le(r.k):(ue||(ue=new WeakMap),fe(ue,e,r,t))}return ce(e)?e.k?v(e.k):(ue||(ue=new WeakMap),fe(ue,e,e,t,!0)):e};function we(e){switch(e){case"A128GCM":return 128;case"A192GCM":return 192;case"A256GCM":case"A128CBC-HS256":return 256;case"A192CBC-HS384":return 384;case"A256CBC-HS512":return 512;default:throw new k(`Unsupported JWE Algorithm: ${e}`)}}const ge=e=>z(new Uint8Array(we(e)>>3)),ve=(e,t)=>`-----BEGIN ${t}-----\n${(e.match(/.{1,64}/g)||[]).join("\n")}\n-----END ${t}-----`,be=async(e,t,r)=>{if(!o(r))throw new TypeError($(r,...V));if(!r.extractable)throw new TypeError("CryptoKey is not extractable");if(r.type!==e)throw new TypeError(`key is not a ${e} key`);return ve(m(new Uint8Array(await i.subtle.exportKey(t,r))),`${e.toUpperCase()} KEY`)},_e=e=>be("public","spki",e),Se=e=>be("private","pkcs8",e),Ee=(e,t,r=0)=>{0===r&&(t.unshift(t.length),t.unshift(6));const n=e.indexOf(t[0],r);if(-1===n)return!1;const s=e.subarray(n,n+t.length);return s.length===t.length&&(s.every(((e,r)=>e===t[r]))||Ee(e,t,n+1))},ke=e=>{switch(!0){case Ee(e,[42,134,72,206,61,3,1,7]):return"P-256";case Ee(e,[43,129,4,0,34]):return"P-384";case Ee(e,[43,129,4,0,35]):return"P-521";case Ee(e,[43,101,110]):return"X25519";case Ee(e,[43,101,111]):return"X448";case Ee(e,[43,101,112]):return"Ed25519";case Ee(e,[43,101,113]):return"Ed448";default:throw new k("Invalid or unsupported EC Key Curve or OKP Key Sub Type")}},Ae=async(e,t,r,n,s)=>{let o,a;const c=new Uint8Array(atob(r.replace(e,"")).split("").map((e=>e.charCodeAt(0)))),d="spki"===t;switch(n){case"PS256":case"PS384":case"PS512":o={name:"RSA-PSS",hash:`SHA-${n.slice(-3)}`},a=d?["verify"]:["sign"];break;case"RS256":case"RS384":case"RS512":o={name:"RSASSA-PKCS1-v1_5",hash:`SHA-${n.slice(-3)}`},a=d?["verify"]:["sign"];break;case"RSA-OAEP":case"RSA-OAEP-256":case"RSA-OAEP-384":case"RSA-OAEP-512":o={name:"RSA-OAEP",hash:`SHA-${parseInt(n.slice(-3),10)||1}`},a=d?["encrypt","wrapKey"]:["decrypt","unwrapKey"];break;case"ES256":o={name:"ECDSA",namedCurve:"P-256"},a=d?["verify"]:["sign"];break;case"ES384":o={name:"ECDSA",namedCurve:"P-384"},a=d?["verify"]:["sign"];break;case"ES512":o={name:"ECDSA",namedCurve:"P-521"},a=d?["verify"]:["sign"];break;case"ECDH-ES":case"ECDH-ES+A128KW":case"ECDH-ES+A192KW":case"ECDH-ES+A256KW":{const e=ke(c);o=e.startsWith("P-")?{name:"ECDH",namedCurve:e}:{name:e},a=d?[]:["deriveBits"];break}case"EdDSA":o={name:ke(c)},a=d?["verify"]:["sign"];break;default:throw new k('Invalid or unsupported "alg" (Algorithm) value')}return i.subtle.importKey(t,c,o,s?.extractable??!1,a)},Pe=(e,t,r)=>Ae(/(?:-----(?:BEGIN|END) PRIVATE KEY-----|\s)/g,"pkcs8",e,t,r),Te=(e,t,r)=>Ae(/(?:-----(?:BEGIN|END) PUBLIC KEY-----|\s)/g,"spki",e,t,r);function Ie(e){const t=[];let r=0;for(;r<e.length;){const n=Oe(e.subarray(r));t.push(n),r+=n.byteLength}return t}function Oe(e){let t=0,r=31&e[0];if(t++,31===r){for(r=0;e[t]>=128;)r=128*r+e[t]-128,t++;r=128*r+e[t]-128,t++}let n=0;if(e[t]<128)n=e[t],t++;else{if(128===n){for(n=0;0!==e[t+n]||0!==e[t+n+1];){if(n>e.byteLength)throw new TypeError("invalid indefinite form length");n++}const r=t+n+2;return{byteLength:r,contents:e.subarray(t,t+n),raw:e.subarray(0,r)}}{const r=127&e[t];t++,n=0;for(let s=0;s<r;s++)n=256*n+e[t],t++}}const s=t+n;return{byteLength:s,contents:e.subarray(t,s),raw:e.subarray(0,s)}}const Ce=(e,t,r)=>{let n;try{n=function(e){const t=e.replace(/(?:-----(?:BEGIN|END) CERTIFICATE-----|\s)/g,""),r=g(t);return ve(function(e){const t=Ie(Ie(Oe(e).contents)[0].contents);return m(t[160===t[0].raw[0]?6:5].raw)}(r),"PUBLIC KEY")}(e)}catch(e){throw new TypeError("Failed to parse the X.509 certificate",{cause:e})}return Te(n,t,r)};async function xe(e,t,r){if("string"!=typeof e||0!==e.indexOf("-----BEGIN PUBLIC KEY-----"))throw new TypeError('"spki" must be SPKI formatted string');return Te(e,t,r)}async function je(e,t,r){if("string"!=typeof e||0!==e.indexOf("-----BEGIN CERTIFICATE-----"))throw new TypeError('"x509" must be X.509 formatted string');return Ce(e,t,r)}async function Re(e,t,r){if("string"!=typeof e||0!==e.indexOf("-----BEGIN PRIVATE KEY-----"))throw new TypeError('"pkcs8" must be PKCS#8 formatted string');return Pe(e,t,r)}async function De(e,t){if(!X(e))throw new TypeError("JWK must be an object");switch(t||(t=e.alg),e.kty){case"oct":if("string"!=typeof e.k||!e.k)throw new TypeError('missing "k" (Key Value) Parameter value');return v(e.k);case"RSA":if(void 0!==e.oth)throw new k('RSA JWK "oth" (Other Primes Info) Parameter value is not supported');case"EC":case"OKP":return de({...e,alg:t});default:throw new k('Unsupported "kty" (Key Type) Parameter value')}}const ze=e=>e?.[Symbol.toStringTag],Me=(e,t,r)=>{if(void 0!==t.use&&"sig"!==t.use)throw new TypeError("Invalid key for this operation, when present its use must be sig");if(void 0!==t.key_ops&&!0!==t.key_ops.includes?.(r))throw new TypeError(`Invalid key for this operation, when present its key_ops must include ${r}`);if(void 0!==t.alg&&t.alg!==e)throw new TypeError(`Invalid key for this operation, when present its alg must be ${e}`);return!0};function Ke(e,t,r,n){t.startsWith("HS")||"dir"===t||t.startsWith("PBES2")||/^A\d{3}(?:GCM)?KW$/.test(t)?((e,t,r,n)=>{if(!(t instanceof Uint8Array)){if(n&&ce(t)){if(function(e){return ce(e)&&"oct"===e.kty&&"string"==typeof e.k}(t)&&Me(e,t,r))return;throw new TypeError('JSON Web Key for symmetric algorithms must have JWK "kty" (Key Type) equal to "oct" and the JWK "k" (Key Value) present')}if(!B(t))throw new TypeError(F(e,t,...V,"Uint8Array",n?"JSON Web Key":null));if("secret"!==t.type)throw new TypeError(`${ze(t)} instances for symmetric algorithms must be of type "secret"`)}})(t,r,n,e):((e,t,r,n)=>{if(n&&ce(t))switch(r){case"sign":if(function(e){return"oct"!==e.kty&&"string"==typeof e.d}(t)&&Me(e,t,r))return;throw new TypeError("JSON Web Key for this operation be a private JWK");case"verify":if(function(e){return"oct"!==e.kty&&void 0===e.d}(t)&&Me(e,t,r))return;throw new TypeError("JSON Web Key for this operation be a public JWK")}if(!B(t))throw new TypeError(F(e,t,...V,n?"JSON Web Key":null));if("secret"===t.type)throw new TypeError(`${ze(t)} instances for asymmetric algorithms must not be of type "secret"`);if("sign"===r&&"public"===t.type)throw new TypeError(`${ze(t)} instances for asymmetric algorithm signing must be of type "private"`);if("decrypt"===r&&"public"===t.type)throw new TypeError(`${ze(t)} instances for asymmetric algorithm decryption must be of type "private"`);if(t.algorithm&&"verify"===r&&"private"===t.type)throw new TypeError(`${ze(t)} instances for asymmetric algorithm verifying must be of type "public"`);if(t.algorithm&&"encrypt"===r&&"private"===t.type)throw new TypeError(`${ze(t)} instances for asymmetric algorithm encryption must be of type "public"`)})(t,r,n,e)}const Le=Ke.bind(void 0,!1),He=Ke.bind(void 0,!0),We=async(e,t,r,n,s)=>{if(!(o(r)||r instanceof Uint8Array))throw new TypeError($(r,...V,"Uint8Array"));switch(n?K(e,n):n=z(new Uint8Array(M(e)>>3)),e){case"A128CBC-HS256":case"A192CBC-HS384":case"A256CBC-HS512":return r instanceof Uint8Array&&L(r,parseInt(e.slice(-3),10)),async function(e,t,r,n,s){if(!(r instanceof Uint8Array))throw new TypeError($(r,"Uint8Array"));const o=parseInt(e.slice(1,4),10),a=await i.subtle.importKey("raw",r.subarray(o>>3),"AES-CBC",!1,["encrypt"]),c=await i.subtle.importKey("raw",r.subarray(0,o>>3),{hash:"SHA-"+(o<<1),name:"HMAC"},!1,["sign"]),d=new Uint8Array(await i.subtle.encrypt({iv:n,name:"AES-CBC"},a,t)),l=u(s,n,d,p(s.length<<3));return{ciphertext:d,tag:new Uint8Array((await i.subtle.sign("HMAC",c,l)).slice(0,o>>3)),iv:n}}(e,t,r,n,s);case"A128GCM":case"A192GCM":case"A256GCM":return r instanceof Uint8Array&&L(r,parseInt(e.slice(1,4),10)),async function(e,t,r,n,s){let o;r instanceof Uint8Array?o=await i.subtle.importKey("raw",r,"AES-GCM",!1,["encrypt"]):(N(r,e,"encrypt"),o=r);const a=new Uint8Array(await i.subtle.encrypt({additionalData:s,iv:n,name:"AES-GCM",tagLength:128},o,t)),c=a.slice(-16);return{ciphertext:a.slice(0,-16),tag:c,iv:n}}(e,t,r,n,s);default:throw new k("Unsupported JWE Content Encryption Algorithm")}},Ue=async function(e,t,r,n,s){switch(Le(e,t,"decrypt"),t=await(me?.(t,e))||t,e){case"dir":if(void 0!==r)throw new P("Encountered unexpected JWE Encrypted Key");return t;case"ECDH-ES":if(void 0!==r)throw new P("Encountered unexpected JWE Encrypted Key");case"ECDH-ES+A128KW":case"ECDH-ES+A192KW":case"ECDH-ES+A256KW":{if(!X(n.epk))throw new P('JOSE Header "epk" (Ephemeral Public Key) missing or invalid');if(!se(t))throw new k("ECDH with the provided key is not allowed or not supported by your javascript runtime");const s=await De(n.epk,e);let i,o;if(void 0!==n.apu){if("string"!=typeof n.apu)throw new P('JOSE Header "apu" (Agreement PartyUInfo) invalid');try{i=v(n.apu)}catch{throw new P("Failed to base64url decode the apu")}}if(void 0!==n.apv){if("string"!=typeof n.apv)throw new P('JOSE Header "apv" (Agreement PartyVInfo) invalid');try{o=v(n.apv)}catch{throw new P("Failed to base64url decode the apv")}}const a=await ne(s,t,"ECDH-ES"===e?n.enc:e,"ECDH-ES"===e?we(n.enc):parseInt(e.slice(-5,-2),10),i,o);if("ECDH-ES"===e)return a;if(void 0===r)throw new P("JWE Encrypted Key missing");return re(e.slice(-6),a,r)}case"RSA1_5":case"RSA-OAEP":case"RSA-OAEP-256":case"RSA-OAEP-384":case"RSA-OAEP-512":if(void 0===r)throw new P("JWE Encrypted Key missing");return(async(e,t,r)=>{if(!o(t))throw new TypeError($(t,...V));if(N(t,e,"decrypt","unwrapKey"),ae(e,t),t.usages.includes("decrypt"))return new Uint8Array(await i.subtle.decrypt(oe(e),t,r));if(t.usages.includes("unwrapKey")){const n=await i.subtle.unwrapKey("raw",r,t,oe(e),...Y);return new Uint8Array(await i.subtle.exportKey("raw",n))}throw new TypeError('RSA-OAEP key "usages" must include "decrypt" or "unwrapKey" for this operation')})(e,t,r);case"PBES2-HS256+A128KW":case"PBES2-HS384+A192KW":case"PBES2-HS512+A256KW":{if(void 0===r)throw new P("JWE Encrypted Key missing");if("number"!=typeof n.p2c)throw new P('JOSE Header "p2c" (PBES2 Count) missing or invalid');const i=s?.maxPBES2Count||1e4;if(n.p2c>i)throw new P('JOSE Header "p2c" (PBES2 Count) out is of acceptable bounds');if("string"!=typeof n.p2s)throw new P('JOSE Header "p2s" (PBES2 Salt) missing or invalid');let o;try{o=v(n.p2s)}catch{throw new P("Failed to base64url decode the p2s")}return(async(e,t,r,n,s)=>{const i=await ie(s,e,n,t);return re(e.slice(-6),i,r)})(e,t,r,n.p2c,o)}case"A128KW":case"A192KW":case"A256KW":if(void 0===r)throw new P("JWE Encrypted Key missing");return re(e,t,r);case"A128GCMKW":case"A192GCMKW":case"A256GCMKW":{if(void 0===r)throw new P("JWE Encrypted Key missing");if("string"!=typeof n.iv)throw new P('JOSE Header "iv" (Initialization Vector) missing or invalid');if("string"!=typeof n.tag)throw new P('JOSE Header "tag" (Authentication Tag) missing or invalid');let s,i;try{s=v(n.iv)}catch{throw new P("Failed to base64url decode the iv")}try{i=v(n.tag)}catch{throw new P("Failed to base64url decode the tag")}return async function(e,t,r,n,s){const i=e.slice(0,7);return q(i,t,r,n,s,new Uint8Array(0))}(e,t,r,s,i)}default:throw new k('Invalid or unsupported "alg" (JWE Algorithm) header value')}},Ze=function(e,t,r,n,s){if(void 0!==s.crit&&void 0===n?.crit)throw new e('"crit" (Critical) Header Parameter MUST be integrity protected');if(!n||void 0===n.crit)return new Set;if(!Array.isArray(n.crit)||0===n.crit.length||n.crit.some((e=>"string"!=typeof e||0===e.length)))throw new e('"crit" (Critical) Header Parameter MUST be an array of non-empty strings when present');let i;i=void 0!==r?new Map([...Object.entries(r),...t.entries()]):t;for(const t of n.crit){if(!i.has(t))throw new k(`Extension Header Parameter "${t}" is not recognized`);if(void 0===s[t])throw new e(`Extension Header Parameter "${t}" is missing`);if(i.get(t)&&void 0===n[t])throw new e(`Extension Header Parameter "${t}" MUST be integrity protected`)}return new Set(n.crit)},Ne=(e,t)=>{if(void 0!==t&&(!Array.isArray(t)||t.some((e=>"string"!=typeof e))))throw new TypeError(`"${e}" option must be an array of strings`);if(t)return new Set(t)};async function Je(e,t,r){if(!X(e))throw new P("Flattened JWE must be an object");if(void 0===e.protected&&void 0===e.header&&void 0===e.unprotected)throw new P("JOSE Header missing");if(void 0!==e.iv&&"string"!=typeof e.iv)throw new P("JWE Initialization Vector incorrect type");if("string"!=typeof e.ciphertext)throw new P("JWE Ciphertext missing or incorrect type");if(void 0!==e.tag&&"string"!=typeof e.tag)throw new P("JWE Authentication Tag incorrect type");if(void 0!==e.protected&&"string"!=typeof e.protected)throw new P("JWE Protected Header incorrect type");if(void 0!==e.encrypted_key&&"string"!=typeof e.encrypted_key)throw new P("JWE Encrypted Key incorrect type");if(void 0!==e.aad&&"string"!=typeof e.aad)throw new P("JWE AAD incorrect type");if(void 0!==e.header&&!X(e.header))throw new P("JWE Shared Unprotected Header incorrect type");if(void 0!==e.unprotected&&!X(e.unprotected))throw new P("JWE Per-Recipient Unprotected Header incorrect type");let n;if(e.protected)try{const t=v(e.protected);n=JSON.parse(d.decode(t))}catch{throw new P("JWE Protected Header is invalid")}if(!G(n,e.header,e.unprotected))throw new P("JWE Protected, JWE Unprotected Header, and JWE Per-Recipient Unprotected Header Parameter names must be disjoint");const s={...n,...e.header,...e.unprotected};if(Ze(P,new Map,r?.crit,n,s),void 0!==s.zip)throw new k('JWE "zip" (Compression Algorithm) Header Parameter is not supported.');const{alg:i,enc:o}=s;if("string"!=typeof i||!i)throw new P("missing JWE Algorithm (alg) in JWE Header");if("string"!=typeof o||!o)throw new P("missing JWE Encryption Algorithm (enc) in JWE Header");const a=r&&Ne("keyManagementAlgorithms",r.keyManagementAlgorithms),l=r&&Ne("contentEncryptionAlgorithms",r.contentEncryptionAlgorithms);if(a&&!a.has(i)||!a&&i.startsWith("PBES2"))throw new E('"alg" (Algorithm) Header Parameter value not allowed');if(l&&!l.has(o))throw new E('"enc" (Encryption Algorithm) Header Parameter value not allowed');let h;if(void 0!==e.encrypted_key)try{h=v(e.encrypted_key)}catch{throw new P("Failed to base64url decode the encrypted_key")}let p,f,y,m=!1;"function"==typeof t&&(t=await t(n,e),m=!0);try{p=await Ue(i,t,h,s,r)}catch(e){if(e instanceof TypeError||e instanceof P||e instanceof k)throw e;p=ge(o)}if(void 0!==e.iv)try{f=v(e.iv)}catch{throw new P("Failed to base64url decode the iv")}if(void 0!==e.tag)try{y=v(e.tag)}catch{throw new P("Failed to base64url decode the tag")}const w=c.encode(e.protected??"");let g,b;g=void 0!==e.aad?u(w,c.encode("."),c.encode(e.aad)):w;try{b=v(e.ciphertext)}catch{throw new P("Failed to base64url decode the ciphertext")}const _={plaintext:await q(o,p,b,f,y,g)};if(void 0!==e.protected&&(_.protectedHeader=n),void 0!==e.aad)try{_.additionalAuthenticatedData=v(e.aad)}catch{throw new P("Failed to base64url decode the aad")}return void 0!==e.unprotected&&(_.sharedUnprotectedHeader=e.unprotected),void 0!==e.header&&(_.unprotectedHeader=e.header),m?{..._,key:t}:_}async function $e(e,t,r){if(e instanceof Uint8Array&&(e=d.decode(e)),"string"!=typeof e)throw new P("Compact JWE must be a string or Uint8Array");const{0:n,1:s,2:i,3:o,4:a,length:c}=e.split(".");if(5!==c)throw new P("Invalid Compact JWE");const l=await Je({ciphertext:o,iv:i||void 0,protected:n,tag:a||void 0,encrypted_key:s||void 0},t,r),u={plaintext:l.plaintext,protectedHeader:l.protectedHeader};return"function"==typeof t?{...u,key:l.key}:u}async function Fe(e,t,r){if(!X(e))throw new P("General JWE must be an object");if(!Array.isArray(e.recipients)||!e.recipients.every(X))throw new P("JWE Recipients missing or incorrect type");if(!e.recipients.length)throw new P("JWE Recipients has no members");for(const n of e.recipients)try{return await Je({aad:e.aad,ciphertext:e.ciphertext,encrypted_key:n.encrypted_key,header:n.header,iv:e.iv,protected:e.protected,tag:e.tag,unprotected:e.unprotected},t,r)}catch{}throw new A}const Be=Symbol(),Ve=async e=>{if(e instanceof Uint8Array)return{kty:"oct",k:w(e)};if(!o(e))throw new TypeError($(e,...V,"Uint8Array"));if(!e.extractable)throw new TypeError("non-extractable CryptoKey cannot be exported as a JWK");const{ext:t,key_ops:r,alg:n,use:s,...a}=await i.subtle.exportKey("jwk",e);return a};async function qe(e){return _e(e)}async function Ge(e){return Se(e)}async function Xe(e){return Ve(e)}const Ye=async function(e,t,r,n,s={}){let a,c,d;switch(Le(e,r,"encrypt"),r=await(ye?.(r,e))||r,e){case"dir":d=r;break;case"ECDH-ES":case"ECDH-ES+A128KW":case"ECDH-ES+A192KW":case"ECDH-ES+A256KW":{if(!se(r))throw new k("ECDH with the provided key is not allowed or not supported by your javascript runtime");const{apu:l,apv:u}=s;let{epk:h}=s;h||(h=(await async function(e){if(!o(e))throw new TypeError($(e,...V));return i.subtle.generateKey(e.algorithm,!0,["deriveBits"])}(r)).privateKey);const{x:p,y:f,crv:y,kty:m}=await Xe(h),g=await ne(r,h,"ECDH-ES"===e?t:e,"ECDH-ES"===e?we(t):parseInt(e.slice(-5,-2),10),l,u);if(c={epk:{x:p,crv:y,kty:m}},"EC"===m&&(c.epk.y=f),l&&(c.apu=w(l)),u&&(c.apv=w(u)),"ECDH-ES"===e){d=g;break}d=n||ge(t);const v=e.slice(-6);a=await te(v,g,d);break}case"RSA1_5":case"RSA-OAEP":case"RSA-OAEP-256":case"RSA-OAEP-384":case"RSA-OAEP-512":d=n||ge(t),a=await(async(e,t,r)=>{if(!o(t))throw new TypeError($(t,...V));if(N(t,e,"encrypt","wrapKey"),ae(e,t),t.usages.includes("encrypt"))return new Uint8Array(await i.subtle.encrypt(oe(e),t,r));if(t.usages.includes("wrapKey")){const n=await i.subtle.importKey("raw",r,...Y);return new Uint8Array(await i.subtle.wrapKey("raw",n,t,oe(e)))}throw new TypeError('RSA-OAEP key "usages" must include "encrypt" or "wrapKey" for this operation')})(e,r,d);break;case"PBES2-HS256+A128KW":case"PBES2-HS384+A192KW":case"PBES2-HS512+A256KW":{d=n||ge(t);const{p2c:i,p2s:o}=s;({encryptedKey:a,...c}=await(async(e,t,r,n=2048,s=z(new Uint8Array(16)))=>{const i=await ie(s,e,n,t);return{encryptedKey:await te(e.slice(-6),i,r),p2c:n,p2s:w(s)}})(e,r,d,i,o));break}case"A128KW":case"A192KW":case"A256KW":d=n||ge(t),a=await te(e,r,d);break;case"A128GCMKW":case"A192GCMKW":case"A256GCMKW":{d=n||ge(t);const{iv:i}=s;({encryptedKey:a,...c}=await async function(e,t,r,n){const s=e.slice(0,7),i=await We(s,r,t,n,new Uint8Array(0));return{encryptedKey:i.ciphertext,iv:w(i.iv),tag:w(i.tag)}}(e,r,d,i));break}default:throw new k('Invalid or unsupported "alg" (JWE Algorithm) header value')}return{cek:d,encryptedKey:a,parameters:c}};class Qe{constructor(e){if(!(e instanceof Uint8Array))throw new TypeError("plaintext must be an instance of Uint8Array");this._plaintext=e}setKeyManagementParameters(e){if(this._keyManagementParameters)throw new TypeError("setKeyManagementParameters can only be called once");return this._keyManagementParameters=e,this}setProtectedHeader(e){if(this._protectedHeader)throw new TypeError("setProtectedHeader can only be called once");return this._protectedHeader=e,this}setSharedUnprotectedHeader(e){if(this._sharedUnprotectedHeader)throw new TypeError("setSharedUnprotectedHeader can only be called once");return this._sharedUnprotectedHeader=e,this}setUnprotectedHeader(e){if(this._unprotectedHeader)throw new TypeError("setUnprotectedHeader can only be called once");return this._unprotectedHeader=e,this}setAdditionalAuthenticatedData(e){return this._aad=e,this}setContentEncryptionKey(e){if(this._cek)throw new TypeError("setContentEncryptionKey can only be called once");return this._cek=e,this}setInitializationVector(e){if(this._iv)throw new TypeError("setInitializationVector can only be called once");return this._iv=e,this}async encrypt(e,t){if(!this._protectedHeader&&!this._unprotectedHeader&&!this._sharedUnprotectedHeader)throw new P("either setProtectedHeader, setUnprotectedHeader, or sharedUnprotectedHeader must be called before #encrypt()");if(!G(this._protectedHeader,this._unprotectedHeader,this._sharedUnprotectedHeader))throw new P("JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint");const r={...this._protectedHeader,...this._unprotectedHeader,...this._sharedUnprotectedHeader};if(Ze(P,new Map,t?.crit,this._protectedHeader,r),void 0!==r.zip)throw new k('JWE "zip" (Compression Algorithm) Header Parameter is not supported.');const{alg:n,enc:s}=r;if("string"!=typeof n||!n)throw new P('JWE "alg" (Algorithm) Header Parameter missing or invalid');if("string"!=typeof s||!s)throw new P('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');let i,o,a,l,h;if(this._cek&&("dir"===n||"ECDH-ES"===n))throw new TypeError(`setContentEncryptionKey cannot be called with JWE "alg" (Algorithm) Header ${n}`);{let r;({cek:o,encryptedKey:i,parameters:r}=await Ye(n,s,e,this._cek,this._keyManagementParameters)),r&&(t&&Be in t?this._unprotectedHeader?this._unprotectedHeader={...this._unprotectedHeader,...r}:this.setUnprotectedHeader(r):this._protectedHeader?this._protectedHeader={...this._protectedHeader,...r}:this.setProtectedHeader(r))}l=this._protectedHeader?c.encode(w(JSON.stringify(this._protectedHeader))):c.encode(""),this._aad?(h=w(this._aad),a=u(l,c.encode("."),c.encode(h))):a=l;const{ciphertext:p,tag:f,iv:y}=await We(s,this._plaintext,o,this._iv,a),m={ciphertext:w(p)};return y&&(m.iv=w(y)),f&&(m.tag=w(f)),i&&(m.encrypted_key=w(i)),h&&(m.aad=h),this._protectedHeader&&(m.protected=d.decode(l)),this._sharedUnprotectedHeader&&(m.unprotected=this._sharedUnprotectedHeader),this._unprotectedHeader&&(m.header=this._unprotectedHeader),m}}class et{constructor(e,t,r){this.parent=e,this.key=t,this.options=r}setUnprotectedHeader(e){if(this.unprotectedHeader)throw new TypeError("setUnprotectedHeader can only be called once");return this.unprotectedHeader=e,this}addRecipient(...e){return this.parent.addRecipient(...e)}encrypt(...e){return this.parent.encrypt(...e)}done(){return this.parent}}class tt{constructor(e){this._recipients=[],this._plaintext=e}addRecipient(e,t){const r=new et(this,e,{crit:t?.crit});return this._recipients.push(r),r}setProtectedHeader(e){if(this._protectedHeader)throw new TypeError("setProtectedHeader can only be called once");return this._protectedHeader=e,this}setSharedUnprotectedHeader(e){if(this._unprotectedHeader)throw new TypeError("setSharedUnprotectedHeader can only be called once");return this._unprotectedHeader=e,this}setAdditionalAuthenticatedData(e){return this._aad=e,this}async encrypt(){if(!this._recipients.length)throw new P("at least one recipient must be added");if(1===this._recipients.length){const[e]=this._recipients,t=await new Qe(this._plaintext).setAdditionalAuthenticatedData(this._aad).setProtectedHeader(this._protectedHeader).setSharedUnprotectedHeader(this._unprotectedHeader).setUnprotectedHeader(e.unprotectedHeader).encrypt(e.key,{...e.options}),r={ciphertext:t.ciphertext,iv:t.iv,recipients:[{}],tag:t.tag};return t.aad&&(r.aad=t.aad),t.protected&&(r.protected=t.protected),t.unprotected&&(r.unprotected=t.unprotected),t.encrypted_key&&(r.recipients[0].encrypted_key=t.encrypted_key),t.header&&(r.recipients[0].header=t.header),r}let e;for(let t=0;t<this._recipients.length;t++){const r=this._recipients[t];if(!G(this._protectedHeader,this._unprotectedHeader,r.unprotectedHeader))throw new P("JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint");const n={...this._protectedHeader,...this._unprotectedHeader,...r.unprotectedHeader},{alg:s}=n;if("string"!=typeof s||!s)throw new P('JWE "alg" (Algorithm) Header Parameter missing or invalid');if("dir"===s||"ECDH-ES"===s)throw new P('"dir" and "ECDH-ES" alg may only be used with a single recipient');if("string"!=typeof n.enc||!n.enc)throw new P('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');if(e){if(e!==n.enc)throw new P('JWE "enc" (Encryption Algorithm) Header Parameter must be the same for all recipients')}else e=n.enc;if(Ze(P,new Map,r.options.crit,this._protectedHeader,n),void 0!==n.zip)throw new k('JWE "zip" (Compression Algorithm) Header Parameter is not supported.')}const t=ge(e),r={ciphertext:"",iv:"",recipients:[],tag:""};for(let n=0;n<this._recipients.length;n++){const s=this._recipients[n],i={};r.recipients.push(i);const o={...this._protectedHeader,...this._unprotectedHeader,...s.unprotectedHeader}.alg.startsWith("PBES2")?2048+n:void 0;if(0===n){const e=await new Qe(this._plaintext).setAdditionalAuthenticatedData(this._aad).setContentEncryptionKey(t).setProtectedHeader(this._protectedHeader).setSharedUnprotectedHeader(this._unprotectedHeader).setUnprotectedHeader(s.unprotectedHeader).setKeyManagementParameters({p2c:o}).encrypt(s.key,{...s.options,[Be]:!0});r.ciphertext=e.ciphertext,r.iv=e.iv,r.tag=e.tag,e.aad&&(r.aad=e.aad),e.protected&&(r.protected=e.protected),e.unprotected&&(r.unprotected=e.unprotected),i.encrypted_key=e.encrypted_key,e.header&&(i.header=e.header);continue}const{encryptedKey:a,parameters:c}=await Ye(s.unprotectedHeader?.alg||this._protectedHeader?.alg||this._unprotectedHeader?.alg,e,s.key,t,{p2c:o});i.encrypted_key=w(a),(s.unprotectedHeader||c)&&(i.header={...s.unprotectedHeader,...c})}return r}}function rt(e,t){const r=`SHA-${e.slice(-3)}`;switch(e){case"HS256":case"HS384":case"HS512":return{hash:r,name:"HMAC"};case"PS256":case"PS384":case"PS512":return{hash:r,name:"RSA-PSS",saltLength:e.slice(-3)>>3};case"RS256":case"RS384":case"RS512":return{hash:r,name:"RSASSA-PKCS1-v1_5"};case"ES256":case"ES384":case"ES512":return{hash:r,name:"ECDSA",namedCurve:t.namedCurve};case"EdDSA":return{name:t.name};default:throw new k(`alg ${e} is not supported either by JOSE or your javascript runtime`)}}async function nt(e,t,r){if("sign"===r&&(t=await me(t,e)),"verify"===r&&(t=await ye(t,e)),o(t))return function(e,t,...r){switch(t){case"HS256":case"HS384":case"HS512":{if(!W(e.algorithm,"HMAC"))throw H("HMAC");const r=parseInt(t.slice(2),10);if(U(e.algorithm.hash)!==r)throw H(`SHA-${r}`,"algorithm.hash");break}case"RS256":case"RS384":case"RS512":{if(!W(e.algorithm,"RSASSA-PKCS1-v1_5"))throw H("RSASSA-PKCS1-v1_5");const r=parseInt(t.slice(2),10);if(U(e.algorithm.hash)!==r)throw H(`SHA-${r}`,"algorithm.hash");break}case"PS256":case"PS384":case"PS512":{if(!W(e.algorithm,"RSA-PSS"))throw H("RSA-PSS");const r=parseInt(t.slice(2),10);if(U(e.algorithm.hash)!==r)throw H(`SHA-${r}`,"algorithm.hash");break}case"EdDSA":if("Ed25519"!==e.algorithm.name&&"Ed448"!==e.algorithm.name)throw H("Ed25519 or Ed448");break;case"ES256":case"ES384":case"ES512":{if(!W(e.algorithm,"ECDSA"))throw H("ECDSA");const r=function(e){switch(e){case"ES256":return"P-256";case"ES384":return"P-384";case"ES512":return"P-521";default:throw new Error("unreachable")}}(t);if(e.algorithm.namedCurve!==r)throw H(r,"algorithm.namedCurve");break}default:throw new TypeError("CryptoKey does not support this operation")}Z(e,r)}(t,e,r),t;if(t instanceof Uint8Array){if(!e.startsWith("HS"))throw new TypeError($(t,...V));return i.subtle.importKey("raw",t,{hash:`SHA-${e.slice(-3)}`,name:"HMAC"},!1,[r])}throw new TypeError($(t,...V,"Uint8Array","JSON Web Key"))}const st=async(e,t,r,n)=>{const s=await nt(e,t,"verify");ae(e,s);const o=rt(e,s.algorithm);try{return await i.subtle.verify(o,s,r,n)}catch{return!1}};async function it(e,t,r){if(!X(e))throw new T("Flattened JWS must be an object");if(void 0===e.protected&&void 0===e.header)throw new T('Flattened JWS must have either of the "protected" or "header" members');if(void 0!==e.protected&&"string"!=typeof e.protected)throw new T("JWS Protected Header incorrect type");if(void 0===e.payload)throw new T("JWS Payload missing");if("string"!=typeof e.signature)throw new T("JWS Signature missing or incorrect type");if(void 0!==e.header&&!X(e.header))throw new T("JWS Unprotected Header incorrect type");let n={};if(e.protected)try{const t=v(e.protected);n=JSON.parse(d.decode(t))}catch{throw new T("JWS Protected Header is invalid")}if(!G(n,e.header))throw new T("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");const s={...n,...e.header};let i=!0;if(Ze(T,new Map([["b64",!0]]),r?.crit,n,s).has("b64")&&(i=n.b64,"boolean"!=typeof i))throw new T('The "b64" (base64url-encode payload) Header Parameter must be a boolean');const{alg:o}=s;if("string"!=typeof o||!o)throw new T('JWS "alg" (Algorithm) Header Parameter missing or invalid');const a=r&&Ne("algorithms",r.algorithms);if(a&&!a.has(o))throw new E('"alg" (Algorithm) Header Parameter value not allowed');if(i){if("string"!=typeof e.payload)throw new T("JWS Payload must be a string")}else if("string"!=typeof e.payload&&!(e.payload instanceof Uint8Array))throw new T("JWS Payload must be a string or an Uint8Array instance");let l=!1;"function"==typeof t?(t=await t(n,e),l=!0,He(o,t,"verify"),ce(t)&&(t=await De(t,o))):He(o,t,"verify");const h=u(c.encode(e.protected??""),c.encode("."),"string"==typeof e.payload?c.encode(e.payload):e.payload);let p,f;try{p=v(e.signature)}catch{throw new T("Failed to base64url decode the signature")}if(!await st(o,t,p,h))throw new D;if(i)try{f=v(e.payload)}catch{throw new T("Failed to base64url decode the payload")}else f="string"==typeof e.payload?c.encode(e.payload):e.payload;const y={payload:f};return void 0!==e.protected&&(y.protectedHeader=n),void 0!==e.header&&(y.unprotectedHeader=e.header),l?{...y,key:t}:y}async function ot(e,t,r){if(e instanceof Uint8Array&&(e=d.decode(e)),"string"!=typeof e)throw new T("Compact JWS must be a string or Uint8Array");const{0:n,1:s,2:i,length:o}=e.split(".");if(3!==o)throw new T("Invalid Compact JWS");const a=await it({payload:s,protected:n,signature:i},t,r),c={payload:a.payload,protectedHeader:a.protectedHeader};return"function"==typeof t?{...c,key:a.key}:c}async function at(e,t,r){if(!X(e))throw new T("General JWS must be an object");if(!Array.isArray(e.signatures)||!e.signatures.every(X))throw new T("JWS Signatures missing or incorrect type");for(const n of e.signatures)try{return await it({header:n.header,payload:e.payload,protected:n.protected,signature:n.signature},t,r)}catch{}throw new D}const ct=e=>Math.floor(e.getTime()/1e3),dt=/^(\+|\-)? ?(\d+|\d+\.\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)(?: (ago|from now))?$/i,lt=e=>{const t=dt.exec(e);if(!t||t[4]&&t[1])throw new TypeError("Invalid time period format");const r=parseFloat(t[2]);let n;switch(t[3].toLowerCase()){case"sec":case"secs":case"second":case"seconds":case"s":n=Math.round(r);break;case"minute":case"minutes":case"min":case"mins":case"m":n=Math.round(60*r);break;case"hour":case"hours":case"hr":case"hrs":case"h":n=Math.round(3600*r);break;case"day":case"days":case"d":n=Math.round(86400*r);break;case"week":case"weeks":case"w":n=Math.round(604800*r);break;default:n=Math.round(31557600*r)}return"-"===t[1]||"ago"===t[4]?-n:n},ut=e=>e.toLowerCase().replace(/^application\//,""),ht=(e,t,r={})=>{let n;try{n=JSON.parse(d.decode(t))}catch{}if(!X(n))throw new I("JWT Claims Set must be a top-level JSON object");const{typ:s}=r;if(s&&("string"!=typeof e.typ||ut(e.typ)!==ut(s)))throw new _('unexpected "typ" JWT header value',n,"typ","check_failed");const{requiredClaims:i=[],issuer:o,subject:a,audience:c,maxTokenAge:l}=r,u=[...i];void 0!==l&&u.push("iat"),void 0!==c&&u.push("aud"),void 0!==a&&u.push("sub"),void 0!==o&&u.push("iss");for(const e of new Set(u.reverse()))if(!(e in n))throw new _(`missing required "${e}" claim`,n,e,"missing");if(o&&!(Array.isArray(o)?o:[o]).includes(n.iss))throw new _('unexpected "iss" claim value',n,"iss","check_failed");if(a&&n.sub!==a)throw new _('unexpected "sub" claim value',n,"sub","check_failed");if(c&&(p="string"==typeof c?[c]:c,!("string"==typeof(h=n.aud)?p.includes(h):Array.isArray(h)&&p.some(Set.prototype.has.bind(new Set(h))))))throw new _('unexpected "aud" claim value',n,"aud","check_failed");var h,p;let f;switch(typeof r.clockTolerance){case"string":f=lt(r.clockTolerance);break;case"number":f=r.clockTolerance;break;case"undefined":f=0;break;default:throw new TypeError("Invalid clockTolerance option type")}const{currentDate:y}=r,m=ct(y||new Date);if((void 0!==n.iat||l)&&"number"!=typeof n.iat)throw new _('"iat" claim must be a number',n,"iat","invalid");if(void 0!==n.nbf){if("number"!=typeof n.nbf)throw new _('"nbf" claim must be a number',n,"nbf","invalid");if(n.nbf>m+f)throw new _('"nbf" claim timestamp check failed',n,"nbf","check_failed")}if(void 0!==n.exp){if("number"!=typeof n.exp)throw new _('"exp" claim must be a number',n,"exp","invalid");if(n.exp<=m-f)throw new S('"exp" claim timestamp check failed',n,"exp","check_failed")}if(l){const e=m-n.iat;if(e-f>("number"==typeof l?l:lt(l)))throw new S('"iat" claim timestamp check failed (too far in the past)',n,"iat","check_failed");if(e<0-f)throw new _('"iat" claim timestamp check failed (it should be in the past)',n,"iat","check_failed")}return n};async function pt(e,t,r){const n=await ot(e,t,r);if(n.protectedHeader.crit?.includes("b64")&&!1===n.protectedHeader.b64)throw new I("JWTs MUST NOT use unencoded payload");const s={payload:ht(n.protectedHeader,n.payload,r),protectedHeader:n.protectedHeader};return"function"==typeof t?{...s,key:n.key}:s}async function ft(e,t,r){const n=await $e(e,t,r),s=ht(n.protectedHeader,n.plaintext,r),{protectedHeader:i}=n;if(void 0!==i.iss&&i.iss!==s.iss)throw new _('replicated "iss" claim header parameter mismatch',s,"iss","mismatch");if(void 0!==i.sub&&i.sub!==s.sub)throw new _('replicated "sub" claim header parameter mismatch',s,"sub","mismatch");if(void 0!==i.aud&&JSON.stringify(i.aud)!==JSON.stringify(s.aud))throw new _('replicated "aud" claim header parameter mismatch',s,"aud","mismatch");const o={payload:s,protectedHeader:i};return"function"==typeof t?{...o,key:n.key}:o}class yt{constructor(e){this._flattened=new Qe(e)}setContentEncryptionKey(e){return this._flattened.setContentEncryptionKey(e),this}setInitializationVector(e){return this._flattened.setInitializationVector(e),this}setProtectedHeader(e){return this._flattened.setProtectedHeader(e),this}setKeyManagementParameters(e){return this._flattened.setKeyManagementParameters(e),this}async encrypt(e,t){const r=await this._flattened.encrypt(e,t);return[r.protected,r.encrypted_key,r.iv,r.ciphertext,r.tag].join(".")}}class mt{constructor(e){if(!(e instanceof Uint8Array))throw new TypeError("payload must be an instance of Uint8Array");this._payload=e}setProtectedHeader(e){if(this._protectedHeader)throw new TypeError("setProtectedHeader can only be called once");return this._protectedHeader=e,this}setUnprotectedHeader(e){if(this._unprotectedHeader)throw new TypeError("setUnprotectedHeader can only be called once");return this._unprotectedHeader=e,this}async sign(e,t){if(!this._protectedHeader&&!this._unprotectedHeader)throw new T("either setProtectedHeader or setUnprotectedHeader must be called before #sign()");if(!G(this._protectedHeader,this._unprotectedHeader))throw new T("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");const r={...this._protectedHeader,...this._unprotectedHeader};let n=!0;if(Ze(T,new Map([["b64",!0]]),t?.crit,this._protectedHeader,r).has("b64")&&(n=this._protectedHeader.b64,"boolean"!=typeof n))throw new T('The "b64" (base64url-encode payload) Header Parameter must be a boolean');const{alg:s}=r;if("string"!=typeof s||!s)throw new T('JWS "alg" (Algorithm) Header Parameter missing or invalid');He(s,e,"sign");let o,a=this._payload;n&&(a=c.encode(w(a))),o=this._protectedHeader?c.encode(w(JSON.stringify(this._protectedHeader))):c.encode("");const l=u(o,c.encode("."),a),h=await(async(e,t,r)=>{const n=await nt(e,t,"sign");ae(e,n);const s=await i.subtle.sign(rt(e,n.algorithm),n,r);return new Uint8Array(s)})(s,e,l),p={signature:w(h),payload:""};return n&&(p.payload=d.decode(a)),this._unprotectedHeader&&(p.header=this._unprotectedHeader),this._protectedHeader&&(p.protected=d.decode(o)),p}}class wt{constructor(e){this._flattened=new mt(e)}setProtectedHeader(e){return this._flattened.setProtectedHeader(e),this}async sign(e,t){const r=await this._flattened.sign(e,t);if(void 0===r.payload)throw new TypeError("use the flattened module for creating JWS with b64: false");return`${r.protected}.${r.payload}.${r.signature}`}}class gt{constructor(e,t,r){this.parent=e,this.key=t,this.options=r}setProtectedHeader(e){if(this.protectedHeader)throw new TypeError("setProtectedHeader can only be called once");return this.protectedHeader=e,this}setUnprotectedHeader(e){if(this.unprotectedHeader)throw new TypeError("setUnprotectedHeader can only be called once");return this.unprotectedHeader=e,this}addSignature(...e){return this.parent.addSignature(...e)}sign(...e){return this.parent.sign(...e)}done(){return this.parent}}class vt{constructor(e){this._signatures=[],this._payload=e}addSignature(e,t){const r=new gt(this,e,t);return this._signatures.push(r),r}async sign(){if(!this._signatures.length)throw new T("at least one signature must be added");const e={signatures:[],payload:""};for(let t=0;t<this._signatures.length;t++){const r=this._signatures[t],n=new mt(this._payload);n.setProtectedHeader(r.protectedHeader),n.setUnprotectedHeader(r.unprotectedHeader);const{payload:s,...i}=await n.sign(r.key,r.options);if(0===t)e.payload=s;else if(e.payload!==s)throw new T("inconsistent use of JWS Unencoded Payload (RFC7797)");e.signatures.push(i)}return e}}function bt(e,t){if(!Number.isFinite(t))throw new TypeError(`Invalid ${e} input`);return t}class _t{constructor(e={}){if(!X(e))throw new TypeError("JWT Claims Set MUST be an object");this._payload=e}setIssuer(e){return this._payload={...this._payload,iss:e},this}setSubject(e){return this._payload={...this._payload,sub:e},this}setAudience(e){return this._payload={...this._payload,aud:e},this}setJti(e){return this._payload={...this._payload,jti:e},this}setNotBefore(e){return"number"==typeof e?this._payload={...this._payload,nbf:bt("setNotBefore",e)}:e instanceof Date?this._payload={...this._payload,nbf:bt("setNotBefore",ct(e))}:this._payload={...this._payload,nbf:ct(new Date)+lt(e)},this}setExpirationTime(e){return"number"==typeof e?this._payload={...this._payload,exp:bt("setExpirationTime",e)}:e instanceof Date?this._payload={...this._payload,exp:bt("setExpirationTime",ct(e))}:this._payload={...this._payload,exp:ct(new Date)+lt(e)},this}setIssuedAt(e){return void 0===e?this._payload={...this._payload,iat:ct(new Date)}:e instanceof Date?this._payload={...this._payload,iat:bt("setIssuedAt",ct(e))}:this._payload="string"==typeof e?{...this._payload,iat:bt("setIssuedAt",ct(new Date)+lt(e))}:{...this._payload,iat:bt("setIssuedAt",e)},this}}class St extends _t{setProtectedHeader(e){return this._protectedHeader=e,this}async sign(e,t){const r=new wt(c.encode(JSON.stringify(this._payload)));if(r.setProtectedHeader(this._protectedHeader),Array.isArray(this._protectedHeader?.crit)&&this._protectedHeader.crit.includes("b64")&&!1===this._protectedHeader.b64)throw new I("JWTs MUST NOT use unencoded payload");return r.sign(e,t)}}class Et extends _t{setProtectedHeader(e){if(this._protectedHeader)throw new TypeError("setProtectedHeader can only be called once");return this._protectedHeader=e,this}setKeyManagementParameters(e){if(this._keyManagementParameters)throw new TypeError("setKeyManagementParameters can only be called once");return this._keyManagementParameters=e,this}setContentEncryptionKey(e){if(this._cek)throw new TypeError("setContentEncryptionKey can only be called once");return this._cek=e,this}setInitializationVector(e){if(this._iv)throw new TypeError("setInitializationVector can only be called once");return this._iv=e,this}replicateIssuerAsHeader(){return this._replicateIssuerAsHeader=!0,this}replicateSubjectAsHeader(){return this._replicateSubjectAsHeader=!0,this}replicateAudienceAsHeader(){return this._replicateAudienceAsHeader=!0,this}async encrypt(e,t){const r=new yt(c.encode(JSON.stringify(this._payload)));return this._replicateIssuerAsHeader&&(this._protectedHeader={...this._protectedHeader,iss:this._payload.iss}),this._replicateSubjectAsHeader&&(this._protectedHeader={...this._protectedHeader,sub:this._payload.sub}),this._replicateAudienceAsHeader&&(this._protectedHeader={...this._protectedHeader,aud:this._payload.aud}),r.setProtectedHeader(this._protectedHeader),this._iv&&r.setInitializationVector(this._iv),this._cek&&r.setContentEncryptionKey(this._cek),this._keyManagementParameters&&r.setKeyManagementParameters(this._keyManagementParameters),r.encrypt(e,t)}}const kt=(e,t)=>{if("string"!=typeof e||!e)throw new O(`${t} missing or invalid`)};async function At(e,t){if(!X(e))throw new TypeError("JWK must be an object");if(t??(t="sha256"),"sha256"!==t&&"sha384"!==t&&"sha512"!==t)throw new TypeError('digestAlgorithm must one of "sha256", "sha384", or "sha512"');let r;switch(e.kty){case"EC":kt(e.crv,'"crv" (Curve) Parameter'),kt(e.x,'"x" (X Coordinate) Parameter'),kt(e.y,'"y" (Y Coordinate) Parameter'),r={crv:e.crv,kty:e.kty,x:e.x,y:e.y};break;case"OKP":kt(e.crv,'"crv" (Subtype of Key Pair) Parameter'),kt(e.x,'"x" (Public Key) Parameter'),r={crv:e.crv,kty:e.kty,x:e.x};break;case"RSA":kt(e.e,'"e" (Exponent) Parameter'),kt(e.n,'"n" (Modulus) Parameter'),r={e:e.e,kty:e.kty,n:e.n};break;case"oct":kt(e.k,'"k" (Key Value) Parameter'),r={k:e.k,kty:e.kty};break;default:throw new k('"kty" (Key Type) Parameter missing or unsupported')}const n=c.encode(JSON.stringify(r));return w(await a(t,n))}async function Pt(e,t){t??(t="sha256");const r=await At(e,t);return`urn:ietf:params:oauth:jwk-thumbprint:sha-${t.slice(-3)}:${r}`}async function Tt(e,t){const r={...e,...t?.header};if(!X(r.jwk))throw new T('"jwk" (JSON Web Key) Header Parameter must be a JSON object');const n=await De({...r.jwk,ext:!0},r.alg);if(n instanceof Uint8Array||"public"!==n.type)throw new T('"jwk" (JSON Web Key) Header Parameter must be a public key');return n}function It(e){return X(e)}function Ot(e){return"function"==typeof structuredClone?structuredClone(e):JSON.parse(JSON.stringify(e))}class Ct{constructor(e){if(this._cached=new WeakMap,!function(e){return e&&"object"==typeof e&&Array.isArray(e.keys)&&e.keys.every(It)}(e))throw new C("JSON Web Key Set malformed");this._jwks=Ot(e)}async getKey(e,t){const{alg:r,kid:n}={...e,...t?.header},s=function(e){switch("string"==typeof e&&e.slice(0,2)){case"RS":case"PS":return"RSA";case"ES":return"EC";case"Ed":return"OKP";default:throw new k('Unsupported "alg" value for a JSON Web Key Set')}}(r),i=this._jwks.keys.filter((e=>{let t=s===e.kty;if(t&&"string"==typeof n&&(t=n===e.kid),t&&"string"==typeof e.alg&&(t=r===e.alg),t&&"string"==typeof e.use&&(t="sig"===e.use),t&&Array.isArray(e.key_ops)&&(t=e.key_ops.includes("verify")),t&&"EdDSA"===r&&(t="Ed25519"===e.crv||"Ed448"===e.crv),t)switch(r){case"ES256":t="P-256"===e.crv;break;case"ES256K":t="secp256k1"===e.crv;break;case"ES384":t="P-384"===e.crv;break;case"ES512":t="P-521"===e.crv}return t})),{0:o,length:a}=i;if(0===a)throw new x;if(1!==a){const e=new j,{_cached:t}=this;throw e[Symbol.asyncIterator]=async function*(){for(const e of i)try{yield await xt(t,e,r)}catch{}},e}return xt(this._cached,o,r)}}async function xt(e,t,r){const n=e.get(t)||e.set(t,{}).get(t);if(void 0===n[r]){const e=await De({...t,ext:!0},r);if(e instanceof Uint8Array||"public"!==e.type)throw new C("JSON Web Key Set members must be public keys");n[r]=e}return n[r]}function jt(e){const t=new Ct(e),r=async(e,r)=>t.getKey(e,r);return Object.defineProperties(r,{jwks:{value:()=>Ot(t._jwks),enumerable:!0,configurable:!1,writable:!1}}),r}let Rt;"undefined"!=typeof navigator&&navigator.userAgent?.startsWith?.("Mozilla/5.0 ")||(Rt="jose/v5.9.6");const Dt=Symbol();class zt{constructor(e,t){if(!(e instanceof URL))throw new TypeError("url must be an instance of URL");var r,n;this._url=new URL(e.href),this._options={agent:t?.agent,headers:t?.headers},this._timeoutDuration="number"==typeof t?.timeoutDuration?t?.timeoutDuration:5e3,this._cooldownDuration="number"==typeof t?.cooldownDuration?t?.cooldownDuration:3e4,this._cacheMaxAge="number"==typeof t?.cacheMaxAge?t?.cacheMaxAge:6e5,void 0!==t?.[Dt]&&(this._cache=t?.[Dt],r=t?.[Dt],n=this._cacheMaxAge,"object"==typeof r&&null!==r&&"uat"in r&&"number"==typeof r.uat&&!(Date.now()-r.uat>=n)&&"jwks"in r&&X(r.jwks)&&Array.isArray(r.jwks.keys)&&Array.prototype.every.call(r.jwks.keys,X)&&(this._jwksTimestamp=this._cache.uat,this._local=jt(this._cache.jwks)))}coolingDown(){return"number"==typeof this._jwksTimestamp&&Date.now()<this._jwksTimestamp+this._cooldownDuration}fresh(){return"number"==typeof this._jwksTimestamp&&Date.now()<this._jwksTimestamp+this._cacheMaxAge}async getKey(e,t){this._local&&this.fresh()||await this.reload();try{return await this._local(e,t)}catch(r){if(r instanceof x&&!1===this.coolingDown())return await this.reload(),this._local(e,t);throw r}}async reload(){this._pendingFetch&&("undefined"!=typeof WebSocketPair||"undefined"!=typeof navigator&&"Cloudflare-Workers"===navigator.userAgent||"undefined"!=typeof EdgeRuntime&&"vercel"===EdgeRuntime)&&(this._pendingFetch=void 0);const e=new Headers(this._options.headers);Rt&&!e.has("User-Agent")&&(e.set("User-Agent",Rt),this._options.headers=Object.fromEntries(e.entries())),this._pendingFetch||(this._pendingFetch=(async(e,t,r)=>{let n,s,i=!1;"function"==typeof AbortController&&(n=new AbortController,s=setTimeout((()=>{i=!0,n.abort()}),t));const o=await fetch(e.href,{signal:n?n.signal:void 0,redirect:"manual",headers:r.headers}).catch((e=>{if(i)throw new R;throw e}));if(void 0!==s&&clearTimeout(s),200!==o.status)throw new b("Expected 200 OK from the JSON Web Key Set HTTP response");try{return await o.json()}catch{throw new b("Failed to parse the JSON Web Key Set HTTP response as JSON")}})(this._url,this._timeoutDuration,this._options).then((e=>{this._local=jt(e),this._cache&&(this._cache.uat=Date.now(),this._cache.jwks=e),this._jwksTimestamp=Date.now(),this._pendingFetch=void 0})).catch((e=>{throw this._pendingFetch=void 0,e}))),await this._pendingFetch}}function Mt(e,t){const r=new zt(e,t),n=async(e,t)=>r.getKey(e,t);return Object.defineProperties(n,{coolingDown:{get:()=>r.coolingDown(),enumerable:!0,configurable:!1},fresh:{get:()=>r.fresh(),enumerable:!0,configurable:!1},reload:{value:()=>r.reload(),enumerable:!0,configurable:!1,writable:!1},reloading:{get:()=>!!r._pendingFetch,enumerable:!0,configurable:!1},jwks:{value:()=>r._local?.jwks(),enumerable:!0,configurable:!1,writable:!1}}),n}const Kt=Dt;class Lt extends _t{encode(){return`${w(JSON.stringify({alg:"none"}))}.${w(JSON.stringify(this._payload))}.`}static decode(e,t){if("string"!=typeof e)throw new I("Unsecured JWT must be a string");const{0:r,1:n,2:s,length:i}=e.split(".");if(3!==i||""!==s)throw new I("Invalid Unsecured JWT");let o;try{if(o=JSON.parse(d.decode(v(r))),"none"!==o.alg)throw new Error}catch{throw new I("Invalid Unsecured JWT")}return{payload:ht(o,v(n),t),header:o}}}const Ht=w,Wt=v;function Ut(e){let t;if("string"==typeof e){const r=e.split(".");3!==r.length&&5!==r.length||([t]=r)}else if("object"==typeof e&&e){if(!("protected"in e))throw new TypeError("Token does not contain a Protected Header");t=e.protected}try{if("string"!=typeof t||!t)throw new Error;const e=JSON.parse(d.decode(Wt(t)));if(!X(e))throw new Error;return e}catch{throw new TypeError("Invalid Token or Protected Header formatting")}}function Zt(e){if("string"!=typeof e)throw new I("JWTs must use Compact JWS serialization, JWT must be a string");const{1:t,length:r}=e.split(".");if(5===r)throw new I("Only JWTs using Compact JWS serialization can be decoded");if(3!==r)throw new I("Invalid JWT");if(!t)throw new I("JWTs must contain a payload");let n,s;try{n=Wt(t)}catch{throw new I("Failed to base64url decode the payload")}try{s=JSON.parse(d.decode(n))}catch{throw new I("Failed to parse the decoded payload as JSON")}if(!X(s))throw new I("Invalid JWT Claims Set");return s}function Nt(e){const t=e?.modulusLength??2048;if("number"!=typeof t||t<2048)throw new k("Invalid or unsupported modulusLength option provided, 2048 bits or larger keys must be used");return t}async function Jt(e,t){return async function(e,t){let r,n;switch(e){case"PS256":case"PS384":case"PS512":r={name:"RSA-PSS",hash:`SHA-${e.slice(-3)}`,publicExponent:new Uint8Array([1,0,1]),modulusLength:Nt(t)},n=["sign","verify"];break;case"RS256":case"RS384":case"RS512":r={name:"RSASSA-PKCS1-v1_5",hash:`SHA-${e.slice(-3)}`,publicExponent:new Uint8Array([1,0,1]),modulusLength:Nt(t)},n=["sign","verify"];break;case"RSA-OAEP":case"RSA-OAEP-256":case"RSA-OAEP-384":case"RSA-OAEP-512":r={name:"RSA-OAEP",hash:`SHA-${parseInt(e.slice(-3),10)||1}`,publicExponent:new Uint8Array([1,0,1]),modulusLength:Nt(t)},n=["decrypt","unwrapKey","encrypt","wrapKey"];break;case"ES256":r={name:"ECDSA",namedCurve:"P-256"},n=["sign","verify"];break;case"ES384":r={name:"ECDSA",namedCurve:"P-384"},n=["sign","verify"];break;case"ES512":r={name:"ECDSA",namedCurve:"P-521"},n=["sign","verify"];break;case"EdDSA":{n=["sign","verify"];const e=t?.crv??"Ed25519";switch(e){case"Ed25519":case"Ed448":r={name:e};break;default:throw new k("Invalid or unsupported crv option provided")}break}case"ECDH-ES":case"ECDH-ES+A128KW":case"ECDH-ES+A192KW":case"ECDH-ES+A256KW":{n=["deriveKey","deriveBits"];const e=t?.crv??"P-256";switch(e){case"P-256":case"P-384":case"P-521":r={name:"ECDH",namedCurve:e};break;case"X25519":case"X448":r={name:e};break;default:throw new k("Invalid or unsupported crv option provided, supported values are P-256, P-384, P-521, X25519, and X448")}break}default:throw new k('Invalid or unsupported JWK "alg" (Algorithm) Parameter value')}return i.subtle.generateKey(r,t?.extractable??!1,n)}(e,t)}async function $t(e,t){return async function(e,t){let r,n,s;switch(e){case"HS256":case"HS384":case"HS512":r=parseInt(e.slice(-3),10),n={name:"HMAC",hash:`SHA-${r}`,length:r},s=["sign","verify"];break;case"A128CBC-HS256":case"A192CBC-HS384":case"A256CBC-HS512":return r=parseInt(e.slice(-3),10),z(new Uint8Array(r>>3));case"A128KW":case"A192KW":case"A256KW":r=parseInt(e.slice(1,4),10),n={name:"AES-KW",length:r},s=["wrapKey","unwrapKey"];break;case"A128GCMKW":case"A192GCMKW":case"A256GCMKW":case"A128GCM":case"A192GCM":case"A256GCM":r=parseInt(e.slice(1,4),10),n={name:"AES-GCM",length:r},s=["encrypt","decrypt"];break;default:throw new k('Invalid or unsupported JWK "alg" (Algorithm) Parameter value')}return i.subtle.generateKey(n,t?.extractable??!1,s)}(e,t)}const Ft="WebCryptoAPI"},7044:(e,t,r)=>{r.r(t),r.d(t,{base64:()=>d,base64pad:()=>l,base64url:()=>u,base64urlpad:()=>h}),new Uint8Array(0);class n{constructor(e,t,r){this.name=e,this.prefix=t,this.baseEncode=r}encode(e){if(e instanceof Uint8Array)return`${this.prefix}${this.baseEncode(e)}`;throw Error("Unknown type, must be binary type")}}class s{constructor(e,t,r){if(this.name=e,this.prefix=t,void 0===t.codePointAt(0))throw new Error("Invalid prefix character");this.prefixCodePoint=t.codePointAt(0),this.baseDecode=r}decode(e){if("string"==typeof e){if(e.codePointAt(0)!==this.prefixCodePoint)throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);return this.baseDecode(e.slice(this.prefix.length))}throw Error("Can only multibase decode strings")}or(e){return o(this,e)}}class i{constructor(e){this.decoders=e}or(e){return o(this,e)}decode(e){const t=e[0],r=this.decoders[t];if(r)return r.decode(e);throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)}}const o=(e,t)=>new i({...e.decoders||{[e.prefix]:e},...t.decoders||{[t.prefix]:t}});class a{constructor(e,t,r,i){this.name=e,this.prefix=t,this.baseEncode=r,this.baseDecode=i,this.encoder=new n(e,t,r),this.decoder=new s(e,t,i)}encode(e){return this.encoder.encode(e)}decode(e){return this.decoder.decode(e)}}const c=({name:e,prefix:t,bitsPerChar:r,alphabet:n})=>(({name:e,prefix:t,encode:r,decode:n})=>new a(e,t,r,n))({prefix:t,name:e,encode:e=>((e,t,r)=>{const n="="===t[t.length-1],s=(1<<r)-1;let i="",o=0,a=0;for(let n=0;n<e.length;++n)for(a=a<<8|e[n],o+=8;o>r;)o-=r,i+=t[s&a>>o];if(o&&(i+=t[s&a<<r-o]),n)for(;i.length*r&7;)i+="=";return i})(e,n,r),decode:t=>((e,t,r,n)=>{const s={};for(let e=0;e<t.length;++e)s[t[e]]=e;let i=e.length;for(;"="===e[i-1];)--i;const o=new Uint8Array(i*r/8|0);let a=0,c=0,d=0;for(let t=0;t<i;++t){const i=s[e[t]];if(void 0===i)throw new SyntaxError(`Non-${n} character`);c=c<<r|i,a+=r,a>=8&&(a-=8,o[d++]=255&c>>a)}if(a>=r||255&c<<8-a)throw new SyntaxError("Unexpected end of data");return o})(t,n,r,e)}),d=c({prefix:"m",name:"base64",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",bitsPerChar:6}),l=c({prefix:"M",name:"base64pad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",bitsPerChar:6}),u=c({prefix:"u",name:"base64url",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",bitsPerChar:6}),h=c({prefix:"U",name:"base64urlpad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",bitsPerChar:6})}},t={};function r(n){var s=t[n];if(void 0!==s)return s.exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,r),i.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(8275)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,